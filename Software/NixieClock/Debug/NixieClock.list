
NixieClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000698c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08006b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002678  20000018  08006b6c  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002690  08006b6c  00022690  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022347  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b29  00000000  00000000  00042388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00013d3d  00000000  00000000  00045eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001850  00000000  00000000  00059bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001920  00000000  00000000  0005b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00019afe  00000000  00000000  0005cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e9c1  00000000  00000000  0007685e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00094b8c  00000000  00000000  0009521f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00129dab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044bc  00000000  00000000  00129e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a84 	.word	0x08006a84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08006a84 	.word	0x08006a84

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000152:	4a07      	ldr	r2, [pc, #28]	; (8000170 <HAL_Init+0x20>)
 8000154:	6813      	ldr	r3, [r2, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f81b 	bl	8000198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f005 fd1a 	bl	8005b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f005 fc48 	bl	80059fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd08      	pop	{r3, pc}
 8000170:	40022000 	.word	0x40022000

08000174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <HAL_IncTick+0x10>)
 8000176:	6811      	ldr	r1, [r2, #0]
 8000178:	4b03      	ldr	r3, [pc, #12]	; (8000188 <HAL_IncTick+0x14>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	440b      	add	r3, r1
 800017e:	6013      	str	r3, [r2, #0]
}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20002480 	.word	0x20002480
 8000188:	20000000 	.word	0x20000000

0800018c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800018c:	4b01      	ldr	r3, [pc, #4]	; (8000194 <HAL_GetTick+0x8>)
 800018e:	6818      	ldr	r0, [r3, #0]
}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20002480 	.word	0x20002480

08000198 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000198:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800019a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800019c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001a0:	041b      	lsls	r3, r3, #16
 80001a2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001a4:	0200      	lsls	r0, r0, #8
 80001a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001aa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80001ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001b4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001b6:	4770      	bx	lr
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001bc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001be:	4b17      	ldr	r3, [pc, #92]	; (800021c <HAL_NVIC_SetPriority+0x60>)
 80001c0:	68db      	ldr	r3, [r3, #12]
 80001c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001c6:	f1c3 0407 	rsb	r4, r3, #7
 80001ca:	2c04      	cmp	r4, #4
 80001cc:	bf28      	it	cs
 80001ce:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d0:	1d1d      	adds	r5, r3, #4
 80001d2:	2d06      	cmp	r5, #6
 80001d4:	d918      	bls.n	8000208 <HAL_NVIC_SetPriority+0x4c>
 80001d6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001d8:	f04f 35ff 	mov.w	r5, #4294967295
 80001dc:	fa05 f404 	lsl.w	r4, r5, r4
 80001e0:	ea21 0104 	bic.w	r1, r1, r4
 80001e4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001e6:	fa05 f303 	lsl.w	r3, r5, r3
 80001ea:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001ee:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80001f0:	2800      	cmp	r0, #0
 80001f2:	db0b      	blt.n	800020c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f4:	0109      	lsls	r1, r1, #4
 80001f6:	b2c9      	uxtb	r1, r1
 80001f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80001fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000200:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000204:	bc30      	pop	{r4, r5}
 8000206:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000208:	2300      	movs	r3, #0
 800020a:	e7e5      	b.n	80001d8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	f000 000f 	and.w	r0, r0, #15
 8000210:	0109      	lsls	r1, r1, #4
 8000212:	b2c9      	uxtb	r1, r1
 8000214:	4b02      	ldr	r3, [pc, #8]	; (8000220 <HAL_NVIC_SetPriority+0x64>)
 8000216:	5419      	strb	r1, [r3, r0]
 8000218:	e7f4      	b.n	8000204 <HAL_NVIC_SetPriority+0x48>
 800021a:	bf00      	nop
 800021c:	e000ed00 	.word	0xe000ed00
 8000220:	e000ed14 	.word	0xe000ed14

08000224 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000224:	2800      	cmp	r0, #0
 8000226:	db07      	blt.n	8000238 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000228:	f000 021f 	and.w	r2, r0, #31
 800022c:	0940      	lsrs	r0, r0, #5
 800022e:	2301      	movs	r3, #1
 8000230:	4093      	lsls	r3, r2
 8000232:	4a02      	ldr	r2, [pc, #8]	; (800023c <HAL_NVIC_EnableIRQ+0x18>)
 8000234:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000240:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000242:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000244:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000246:	2401      	movs	r4, #1
 8000248:	40b4      	lsls	r4, r6
 800024a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800024c:	6804      	ldr	r4, [r0, #0]
 800024e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000250:	6843      	ldr	r3, [r0, #4]
 8000252:	2b10      	cmp	r3, #16
 8000254:	d005      	beq.n	8000262 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000256:	6803      	ldr	r3, [r0, #0]
 8000258:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800025a:	6803      	ldr	r3, [r0, #0]
 800025c:	60da      	str	r2, [r3, #12]
  }
}
 800025e:	bc70      	pop	{r4, r5, r6}
 8000260:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000262:	6803      	ldr	r3, [r0, #0]
 8000264:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000266:	6803      	ldr	r3, [r0, #0]
 8000268:	60d9      	str	r1, [r3, #12]
 800026a:	e7f8      	b.n	800025e <DMA_SetConfig+0x1e>

0800026c <HAL_DMA_Init>:
  if(hdma == NULL)
 800026c:	b360      	cbz	r0, 80002c8 <HAL_DMA_Init+0x5c>
{
 800026e:	b410      	push	{r4}
 8000270:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000272:	6801      	ldr	r1, [r0, #0]
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <HAL_DMA_Init+0x60>)
 8000276:	440b      	add	r3, r1
 8000278:	4815      	ldr	r0, [pc, #84]	; (80002d0 <HAL_DMA_Init+0x64>)
 800027a:	fba0 0303 	umull	r0, r3, r0, r3
 800027e:	091b      	lsrs	r3, r3, #4
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <HAL_DMA_Init+0x68>)
 8000286:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000288:	2302      	movs	r3, #2
 800028a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800028e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000290:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000294:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000298:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800029a:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 800029c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80002a2:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80002a4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80002a6:	6954      	ldr	r4, [r2, #20]
 80002a8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80002aa:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80002ac:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80002ae:	69d4      	ldr	r4, [r2, #28]
 80002b0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80002b2:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80002b4:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80002b6:	2000      	movs	r0, #0
 80002b8:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80002ba:	2301      	movs	r3, #1
 80002bc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80002c0:	f882 0020 	strb.w	r0, [r2, #32]
}
 80002c4:	bc10      	pop	{r4}
 80002c6:	4770      	bx	lr
    return HAL_ERROR;
 80002c8:	2001      	movs	r0, #1
}
 80002ca:	4770      	bx	lr
 80002cc:	bffdfff8 	.word	0xbffdfff8
 80002d0:	cccccccd 	.word	0xcccccccd
 80002d4:	40020000 	.word	0x40020000

080002d8 <HAL_DMA_Start_IT>:
{
 80002d8:	b538      	push	{r3, r4, r5, lr}
 80002da:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80002dc:	f890 0020 	ldrb.w	r0, [r0, #32]
 80002e0:	2801      	cmp	r0, #1
 80002e2:	d031      	beq.n	8000348 <HAL_DMA_Start_IT+0x70>
 80002e4:	2001      	movs	r0, #1
 80002e6:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80002ea:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 80002ee:	2801      	cmp	r0, #1
 80002f0:	d004      	beq.n	80002fc <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80002f2:	2300      	movs	r3, #0
 80002f4:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 80002f8:	2002      	movs	r0, #2
}
 80002fa:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80002fc:	2002      	movs	r0, #2
 80002fe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000302:	2000      	movs	r0, #0
 8000304:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000306:	6825      	ldr	r5, [r4, #0]
 8000308:	6828      	ldr	r0, [r5, #0]
 800030a:	f020 0001 	bic.w	r0, r0, #1
 800030e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000310:	4620      	mov	r0, r4
 8000312:	f7ff ff95 	bl	8000240 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000318:	b15b      	cbz	r3, 8000332 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800031a:	6822      	ldr	r2, [r4, #0]
 800031c:	6813      	ldr	r3, [r2, #0]
 800031e:	f043 030e 	orr.w	r3, r3, #14
 8000322:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000324:	6822      	ldr	r2, [r4, #0]
 8000326:	6813      	ldr	r3, [r2, #0]
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800032e:	2000      	movs	r0, #0
 8000330:	e7e3      	b.n	80002fa <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000332:	6822      	ldr	r2, [r4, #0]
 8000334:	6813      	ldr	r3, [r2, #0]
 8000336:	f023 0304 	bic.w	r3, r3, #4
 800033a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800033c:	6822      	ldr	r2, [r4, #0]
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	f043 030a 	orr.w	r3, r3, #10
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	e7ed      	b.n	8000324 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000348:	2002      	movs	r0, #2
 800034a:	e7d6      	b.n	80002fa <HAL_DMA_Start_IT+0x22>

0800034c <HAL_DMA_Abort_IT>:
{  
 800034c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800034e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000352:	2b02      	cmp	r3, #2
 8000354:	d003      	beq.n	800035e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000356:	2304      	movs	r3, #4
 8000358:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800035a:	2001      	movs	r0, #1
}
 800035c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800035e:	6802      	ldr	r2, [r0, #0]
 8000360:	6813      	ldr	r3, [r2, #0]
 8000362:	f023 030e 	bic.w	r3, r3, #14
 8000366:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000368:	6802      	ldr	r2, [r0, #0]
 800036a:	6813      	ldr	r3, [r2, #0]
 800036c:	f023 0301 	bic.w	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000372:	6803      	ldr	r3, [r0, #0]
 8000374:	4a19      	ldr	r2, [pc, #100]	; (80003dc <HAL_DMA_Abort_IT+0x90>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d014      	beq.n	80003a4 <HAL_DMA_Abort_IT+0x58>
 800037a:	3214      	adds	r2, #20
 800037c:	4293      	cmp	r3, r2
 800037e:	d01f      	beq.n	80003c0 <HAL_DMA_Abort_IT+0x74>
 8000380:	3214      	adds	r2, #20
 8000382:	4293      	cmp	r3, r2
 8000384:	d01e      	beq.n	80003c4 <HAL_DMA_Abort_IT+0x78>
 8000386:	3214      	adds	r2, #20
 8000388:	4293      	cmp	r3, r2
 800038a:	d01e      	beq.n	80003ca <HAL_DMA_Abort_IT+0x7e>
 800038c:	3214      	adds	r2, #20
 800038e:	4293      	cmp	r3, r2
 8000390:	d01e      	beq.n	80003d0 <HAL_DMA_Abort_IT+0x84>
 8000392:	3214      	adds	r2, #20
 8000394:	4293      	cmp	r3, r2
 8000396:	d002      	beq.n	800039e <HAL_DMA_Abort_IT+0x52>
 8000398:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800039c:	e003      	b.n	80003a6 <HAL_DMA_Abort_IT+0x5a>
 800039e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003a2:	e000      	b.n	80003a6 <HAL_DMA_Abort_IT+0x5a>
 80003a4:	2201      	movs	r2, #1
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <HAL_DMA_Abort_IT+0x94>)
 80003a8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80003aa:	2301      	movs	r3, #1
 80003ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80003b0:	2300      	movs	r3, #0
 80003b2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80003b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80003b8:	b16b      	cbz	r3, 80003d6 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80003ba:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80003bc:	2000      	movs	r0, #0
 80003be:	e7cd      	b.n	800035c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003c0:	2210      	movs	r2, #16
 80003c2:	e7f0      	b.n	80003a6 <HAL_DMA_Abort_IT+0x5a>
 80003c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003c8:	e7ed      	b.n	80003a6 <HAL_DMA_Abort_IT+0x5a>
 80003ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003ce:	e7ea      	b.n	80003a6 <HAL_DMA_Abort_IT+0x5a>
 80003d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003d4:	e7e7      	b.n	80003a6 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80003d6:	2000      	movs	r0, #0
 80003d8:	e7c0      	b.n	800035c <HAL_DMA_Abort_IT+0x10>
 80003da:	bf00      	nop
 80003dc:	40020008 	.word	0x40020008
 80003e0:	40020000 	.word	0x40020000

080003e4 <HAL_DMA_IRQHandler>:
{
 80003e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003e6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80003e8:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80003ea:	6804      	ldr	r4, [r0, #0]
 80003ec:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80003f0:	2304      	movs	r3, #4
 80003f2:	408b      	lsls	r3, r1
 80003f4:	4213      	tst	r3, r2
 80003f6:	d035      	beq.n	8000464 <HAL_DMA_IRQHandler+0x80>
 80003f8:	f015 0f04 	tst.w	r5, #4
 80003fc:	d032      	beq.n	8000464 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80003fe:	6823      	ldr	r3, [r4, #0]
 8000400:	f013 0f20 	tst.w	r3, #32
 8000404:	d103      	bne.n	800040e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000406:	6823      	ldr	r3, [r4, #0]
 8000408:	f023 0304 	bic.w	r3, r3, #4
 800040c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800040e:	6803      	ldr	r3, [r0, #0]
 8000410:	4a43      	ldr	r2, [pc, #268]	; (8000520 <HAL_DMA_IRQHandler+0x13c>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d014      	beq.n	8000440 <HAL_DMA_IRQHandler+0x5c>
 8000416:	3214      	adds	r2, #20
 8000418:	4293      	cmp	r3, r2
 800041a:	d018      	beq.n	800044e <HAL_DMA_IRQHandler+0x6a>
 800041c:	3214      	adds	r2, #20
 800041e:	4293      	cmp	r3, r2
 8000420:	d017      	beq.n	8000452 <HAL_DMA_IRQHandler+0x6e>
 8000422:	3214      	adds	r2, #20
 8000424:	4293      	cmp	r3, r2
 8000426:	d017      	beq.n	8000458 <HAL_DMA_IRQHandler+0x74>
 8000428:	3214      	adds	r2, #20
 800042a:	4293      	cmp	r3, r2
 800042c:	d017      	beq.n	800045e <HAL_DMA_IRQHandler+0x7a>
 800042e:	3214      	adds	r2, #20
 8000430:	4293      	cmp	r3, r2
 8000432:	d002      	beq.n	800043a <HAL_DMA_IRQHandler+0x56>
 8000434:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000438:	e003      	b.n	8000442 <HAL_DMA_IRQHandler+0x5e>
 800043a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800043e:	e000      	b.n	8000442 <HAL_DMA_IRQHandler+0x5e>
 8000440:	2204      	movs	r2, #4
 8000442:	4b38      	ldr	r3, [pc, #224]	; (8000524 <HAL_DMA_IRQHandler+0x140>)
 8000444:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000446:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000448:	b103      	cbz	r3, 800044c <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 800044a:	4798      	blx	r3
}
 800044c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800044e:	2240      	movs	r2, #64	; 0x40
 8000450:	e7f7      	b.n	8000442 <HAL_DMA_IRQHandler+0x5e>
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000456:	e7f4      	b.n	8000442 <HAL_DMA_IRQHandler+0x5e>
 8000458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800045c:	e7f1      	b.n	8000442 <HAL_DMA_IRQHandler+0x5e>
 800045e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000462:	e7ee      	b.n	8000442 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000464:	2302      	movs	r3, #2
 8000466:	408b      	lsls	r3, r1
 8000468:	4213      	tst	r3, r2
 800046a:	d03c      	beq.n	80004e6 <HAL_DMA_IRQHandler+0x102>
 800046c:	f015 0f02 	tst.w	r5, #2
 8000470:	d039      	beq.n	80004e6 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000472:	6823      	ldr	r3, [r4, #0]
 8000474:	f013 0f20 	tst.w	r3, #32
 8000478:	d106      	bne.n	8000488 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800047a:	6823      	ldr	r3, [r4, #0]
 800047c:	f023 030a 	bic.w	r3, r3, #10
 8000480:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000482:	2301      	movs	r3, #1
 8000484:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000488:	6803      	ldr	r3, [r0, #0]
 800048a:	4a25      	ldr	r2, [pc, #148]	; (8000520 <HAL_DMA_IRQHandler+0x13c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d014      	beq.n	80004ba <HAL_DMA_IRQHandler+0xd6>
 8000490:	3214      	adds	r2, #20
 8000492:	4293      	cmp	r3, r2
 8000494:	d01c      	beq.n	80004d0 <HAL_DMA_IRQHandler+0xec>
 8000496:	3214      	adds	r2, #20
 8000498:	4293      	cmp	r3, r2
 800049a:	d01b      	beq.n	80004d4 <HAL_DMA_IRQHandler+0xf0>
 800049c:	3214      	adds	r2, #20
 800049e:	4293      	cmp	r3, r2
 80004a0:	d01b      	beq.n	80004da <HAL_DMA_IRQHandler+0xf6>
 80004a2:	3214      	adds	r2, #20
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d01b      	beq.n	80004e0 <HAL_DMA_IRQHandler+0xfc>
 80004a8:	3214      	adds	r2, #20
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d002      	beq.n	80004b4 <HAL_DMA_IRQHandler+0xd0>
 80004ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80004b2:	e003      	b.n	80004bc <HAL_DMA_IRQHandler+0xd8>
 80004b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004b8:	e000      	b.n	80004bc <HAL_DMA_IRQHandler+0xd8>
 80004ba:	2202      	movs	r2, #2
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_DMA_IRQHandler+0x140>)
 80004be:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80004c0:	2300      	movs	r3, #0
 80004c2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80004c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0bf      	beq.n	800044c <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 80004cc:	4798      	blx	r3
 80004ce:	e7bd      	b.n	800044c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80004d0:	2220      	movs	r2, #32
 80004d2:	e7f3      	b.n	80004bc <HAL_DMA_IRQHandler+0xd8>
 80004d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004d8:	e7f0      	b.n	80004bc <HAL_DMA_IRQHandler+0xd8>
 80004da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004de:	e7ed      	b.n	80004bc <HAL_DMA_IRQHandler+0xd8>
 80004e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004e4:	e7ea      	b.n	80004bc <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004e6:	2308      	movs	r3, #8
 80004e8:	fa03 f101 	lsl.w	r1, r3, r1
 80004ec:	4211      	tst	r1, r2
 80004ee:	d0ad      	beq.n	800044c <HAL_DMA_IRQHandler+0x68>
 80004f0:	f015 0f08 	tst.w	r5, #8
 80004f4:	d0aa      	beq.n	800044c <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	f023 030e 	bic.w	r3, r3, #14
 80004fc:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80004fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000500:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000502:	2301      	movs	r3, #1
 8000504:	fa03 f202 	lsl.w	r2, r3, r2
 8000508:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800050a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800050c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000510:	2300      	movs	r3, #0
 8000512:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000516:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000518:	2b00      	cmp	r3, #0
 800051a:	d097      	beq.n	800044c <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800051c:	4798      	blx	r3
  return;
 800051e:	e795      	b.n	800044c <HAL_DMA_IRQHandler+0x68>
 8000520:	40020008 	.word	0x40020008
 8000524:	40020000 	.word	0x40020000

08000528 <HAL_DMA_GetState>:
}
 8000528:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800052c:	4770      	bx	lr
	...

08000530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000530:	b4f0      	push	{r4, r5, r6, r7}
 8000532:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000534:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000536:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000538:	e0a3      	b.n	8000682 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800053a:	4f7f      	ldr	r7, [pc, #508]	; (8000738 <HAL_GPIO_Init+0x208>)
 800053c:	42bb      	cmp	r3, r7
 800053e:	d010      	beq.n	8000562 <HAL_GPIO_Init+0x32>
 8000540:	d907      	bls.n	8000552 <HAL_GPIO_Init+0x22>
 8000542:	4f7e      	ldr	r7, [pc, #504]	; (800073c <HAL_GPIO_Init+0x20c>)
 8000544:	42bb      	cmp	r3, r7
 8000546:	d00c      	beq.n	8000562 <HAL_GPIO_Init+0x32>
 8000548:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800054c:	42bb      	cmp	r3, r7
 800054e:	d008      	beq.n	8000562 <HAL_GPIO_Init+0x32>
 8000550:	e013      	b.n	800057a <HAL_GPIO_Init+0x4a>
 8000552:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000556:	42bb      	cmp	r3, r7
 8000558:	d003      	beq.n	8000562 <HAL_GPIO_Init+0x32>
 800055a:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 800055e:	42bb      	cmp	r3, r7
 8000560:	d107      	bne.n	8000572 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000562:	688b      	ldr	r3, [r1, #8]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d058      	beq.n	800061a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000568:	2b01      	cmp	r3, #1
 800056a:	d051      	beq.n	8000610 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 800056c:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800056e:	2508      	movs	r5, #8
 8000570:	e003      	b.n	800057a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000572:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000576:	42bb      	cmp	r3, r7
 8000578:	d0f3      	beq.n	8000562 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800057a:	2eff      	cmp	r6, #255	; 0xff
 800057c:	d84f      	bhi.n	800061e <HAL_GPIO_Init+0xee>
 800057e:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000580:	2eff      	cmp	r6, #255	; 0xff
 8000582:	d84f      	bhi.n	8000624 <HAL_GPIO_Init+0xf4>
 8000584:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000586:	f8dc 3000 	ldr.w	r3, [ip]
 800058a:	270f      	movs	r7, #15
 800058c:	4097      	lsls	r7, r2
 800058e:	ea23 0307 	bic.w	r3, r3, r7
 8000592:	fa05 f202 	lsl.w	r2, r5, r2
 8000596:	4313      	orrs	r3, r2
 8000598:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059c:	684b      	ldr	r3, [r1, #4]
 800059e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80005a2:	d06d      	beq.n	8000680 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <HAL_GPIO_Init+0x210>)
 80005a6:	699a      	ldr	r2, [r3, #24]
 80005a8:	f042 0201 	orr.w	r2, r2, #1
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80005b8:	08a2      	lsrs	r2, r4, #2
 80005ba:	1c97      	adds	r7, r2, #2
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <HAL_GPIO_Init+0x214>)
 80005be:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c2:	f004 0703 	and.w	r7, r4, #3
 80005c6:	00bf      	lsls	r7, r7, #2
 80005c8:	f04f 0c0f 	mov.w	ip, #15
 80005cc:	fa0c fc07 	lsl.w	ip, ip, r7
 80005d0:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <HAL_GPIO_Init+0x218>)
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d02a      	beq.n	8000630 <HAL_GPIO_Init+0x100>
 80005da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005de:	4298      	cmp	r0, r3
 80005e0:	f000 808a 	beq.w	80006f8 <HAL_GPIO_Init+0x1c8>
 80005e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005e8:	4298      	cmp	r0, r3
 80005ea:	f000 8087 	beq.w	80006fc <HAL_GPIO_Init+0x1cc>
 80005ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d01a      	beq.n	800062c <HAL_GPIO_Init+0xfc>
 80005f6:	2304      	movs	r3, #4
 80005f8:	e01b      	b.n	8000632 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005fa:	68cd      	ldr	r5, [r1, #12]
          break;
 80005fc:	e7bd      	b.n	800057a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005fe:	68cd      	ldr	r5, [r1, #12]
 8000600:	3504      	adds	r5, #4
          break;
 8000602:	e7ba      	b.n	800057a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000604:	68cd      	ldr	r5, [r1, #12]
 8000606:	3508      	adds	r5, #8
          break;
 8000608:	e7b7      	b.n	800057a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800060a:	68cd      	ldr	r5, [r1, #12]
 800060c:	350c      	adds	r5, #12
          break;
 800060e:	e7b4      	b.n	800057a <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000610:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000612:	2508      	movs	r5, #8
 8000614:	e7b1      	b.n	800057a <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000616:	2500      	movs	r5, #0
 8000618:	e7af      	b.n	800057a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800061a:	2504      	movs	r5, #4
 800061c:	e7ad      	b.n	800057a <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800061e:	f100 0c04 	add.w	ip, r0, #4
 8000622:	e7ad      	b.n	8000580 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000624:	f1a4 0208 	sub.w	r2, r4, #8
 8000628:	0092      	lsls	r2, r2, #2
 800062a:	e7ac      	b.n	8000586 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800062c:	2303      	movs	r3, #3
 800062e:	e000      	b.n	8000632 <HAL_GPIO_Init+0x102>
 8000630:	2300      	movs	r3, #0
 8000632:	40bb      	lsls	r3, r7
 8000634:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000638:	3202      	adds	r2, #2
 800063a:	4f42      	ldr	r7, [pc, #264]	; (8000744 <HAL_GPIO_Init+0x214>)
 800063c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000640:	684b      	ldr	r3, [r1, #4]
 8000642:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000646:	d05b      	beq.n	8000700 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000648:	4a40      	ldr	r2, [pc, #256]	; (800074c <HAL_GPIO_Init+0x21c>)
 800064a:	6813      	ldr	r3, [r2, #0]
 800064c:	4333      	orrs	r3, r6
 800064e:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000650:	684b      	ldr	r3, [r1, #4]
 8000652:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000656:	d059      	beq.n	800070c <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000658:	4a3c      	ldr	r2, [pc, #240]	; (800074c <HAL_GPIO_Init+0x21c>)
 800065a:	6853      	ldr	r3, [r2, #4]
 800065c:	4333      	orrs	r3, r6
 800065e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000660:	684b      	ldr	r3, [r1, #4]
 8000662:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000666:	d057      	beq.n	8000718 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000668:	4a38      	ldr	r2, [pc, #224]	; (800074c <HAL_GPIO_Init+0x21c>)
 800066a:	6893      	ldr	r3, [r2, #8]
 800066c:	4333      	orrs	r3, r6
 800066e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000670:	684b      	ldr	r3, [r1, #4]
 8000672:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000676:	d055      	beq.n	8000724 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000678:	4a34      	ldr	r2, [pc, #208]	; (800074c <HAL_GPIO_Init+0x21c>)
 800067a:	68d3      	ldr	r3, [r2, #12]
 800067c:	431e      	orrs	r6, r3
 800067e:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000680:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000682:	680b      	ldr	r3, [r1, #0]
 8000684:	fa33 f204 	lsrs.w	r2, r3, r4
 8000688:	d052      	beq.n	8000730 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 800068a:	2201      	movs	r2, #1
 800068c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068e:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000692:	ea32 0303 	bics.w	r3, r2, r3
 8000696:	d1f3      	bne.n	8000680 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000698:	684b      	ldr	r3, [r1, #4]
 800069a:	2b12      	cmp	r3, #18
 800069c:	f63f af4d 	bhi.w	800053a <HAL_GPIO_Init+0xa>
 80006a0:	2b12      	cmp	r3, #18
 80006a2:	f63f af6a 	bhi.w	800057a <HAL_GPIO_Init+0x4a>
 80006a6:	a701      	add	r7, pc, #4	; (adr r7, 80006ac <HAL_GPIO_Init+0x17c>)
 80006a8:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 80006ac:	08000563 	.word	0x08000563
 80006b0:	080005fb 	.word	0x080005fb
 80006b4:	08000605 	.word	0x08000605
 80006b8:	08000617 	.word	0x08000617
 80006bc:	0800057b 	.word	0x0800057b
 80006c0:	0800057b 	.word	0x0800057b
 80006c4:	0800057b 	.word	0x0800057b
 80006c8:	0800057b 	.word	0x0800057b
 80006cc:	0800057b 	.word	0x0800057b
 80006d0:	0800057b 	.word	0x0800057b
 80006d4:	0800057b 	.word	0x0800057b
 80006d8:	0800057b 	.word	0x0800057b
 80006dc:	0800057b 	.word	0x0800057b
 80006e0:	0800057b 	.word	0x0800057b
 80006e4:	0800057b 	.word	0x0800057b
 80006e8:	0800057b 	.word	0x0800057b
 80006ec:	0800057b 	.word	0x0800057b
 80006f0:	080005ff 	.word	0x080005ff
 80006f4:	0800060b 	.word	0x0800060b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006f8:	2301      	movs	r3, #1
 80006fa:	e79a      	b.n	8000632 <HAL_GPIO_Init+0x102>
 80006fc:	2302      	movs	r3, #2
 80006fe:	e798      	b.n	8000632 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <HAL_GPIO_Init+0x21c>)
 8000702:	6813      	ldr	r3, [r2, #0]
 8000704:	ea23 0306 	bic.w	r3, r3, r6
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	e7a1      	b.n	8000650 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800070c:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_GPIO_Init+0x21c>)
 800070e:	6853      	ldr	r3, [r2, #4]
 8000710:	ea23 0306 	bic.w	r3, r3, r6
 8000714:	6053      	str	r3, [r2, #4]
 8000716:	e7a3      	b.n	8000660 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <HAL_GPIO_Init+0x21c>)
 800071a:	6893      	ldr	r3, [r2, #8]
 800071c:	ea23 0306 	bic.w	r3, r3, r6
 8000720:	6093      	str	r3, [r2, #8]
 8000722:	e7a5      	b.n	8000670 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000724:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_GPIO_Init+0x21c>)
 8000726:	68d3      	ldr	r3, [r2, #12]
 8000728:	ea23 0606 	bic.w	r6, r3, r6
 800072c:	60d6      	str	r6, [r2, #12]
 800072e:	e7a7      	b.n	8000680 <HAL_GPIO_Init+0x150>
  }
}
 8000730:	b002      	add	sp, #8
 8000732:	bcf0      	pop	{r4, r5, r6, r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	10220000 	.word	0x10220000
 800073c:	10310000 	.word	0x10310000
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000
 8000748:	40010800 	.word	0x40010800
 800074c:	40010400 	.word	0x40010400

08000750 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000750:	6883      	ldr	r3, [r0, #8]
 8000752:	4219      	tst	r1, r3
 8000754:	d001      	beq.n	800075a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000756:	2001      	movs	r0, #1
 8000758:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800075a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800075c:	4770      	bx	lr

0800075e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800075e:	b10a      	cbz	r2, 8000764 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000760:	6101      	str	r1, [r0, #16]
 8000762:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	6101      	str	r1, [r0, #16]
  }
}
 8000768:	4770      	bx	lr

0800076a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800076a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800076c:	ea01 0203 	and.w	r2, r1, r3
 8000770:	ea21 0103 	bic.w	r1, r1, r3
 8000774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000778:	6101      	str	r1, [r0, #16]
}
 800077a:	4770      	bx	lr

0800077c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800077c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4203      	tst	r3, r0
 8000784:	d100      	bne.n	8000788 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000786:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800078a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800078c:	f004 fc62 	bl	8005054 <HAL_GPIO_EXTI_Callback>
}
 8000790:	e7f9      	b.n	8000786 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000792:	bf00      	nop
 8000794:	40010400 	.word	0x40010400

08000798 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8000798:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b40      	cmp	r3, #64	; 0x40
 80007a0:	d010      	beq.n	80007c4 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007a2:	6903      	ldr	r3, [r0, #16]
 80007a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007a8:	d01b      	beq.n	80007e2 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 80007aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d139      	bne.n	8000824 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80007b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007b2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80007b6:	6802      	ldr	r2, [r0, #0]
 80007b8:	f003 0306 	and.w	r3, r3, #6
 80007bc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80007c0:	6113      	str	r3, [r2, #16]
 80007c2:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 80007c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80007c6:	b92b      	cbnz	r3, 80007d4 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80007c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007ca:	6802      	ldr	r2, [r0, #0]
 80007cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80007d0:	6113      	str	r3, [r2, #16]
 80007d2:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80007d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007d6:	6802      	ldr	r2, [r0, #0]
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	6113      	str	r3, [r2, #16]
 80007e0:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80007e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b21      	cmp	r3, #33	; 0x21
 80007ea:	d00f      	beq.n	800080c <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80007ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007ee:	6802      	ldr	r2, [r0, #0]
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80007f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80007fa:	b16b      	cbz	r3, 8000818 <I2C_Master_SB+0x80>
 80007fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fe:	b15b      	cbz	r3, 8000818 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8000800:	6802      	ldr	r2, [r0, #0]
 8000802:	6853      	ldr	r3, [r2, #4]
 8000804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000808:	6053      	str	r3, [r2, #4]
 800080a:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800080c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800080e:	6802      	ldr	r2, [r0, #0]
 8000810:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000814:	6113      	str	r3, [r2, #16]
 8000816:	e7ef      	b.n	80007f8 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8000818:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800081a:	b133      	cbz	r3, 800082a <I2C_Master_SB+0x92>
 800081c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1ee      	bne.n	8000800 <I2C_Master_SB+0x68>
 8000822:	e002      	b.n	800082a <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8000824:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000826:	2b01      	cmp	r3, #1
 8000828:	d000      	beq.n	800082c <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 800082a:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800082c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800082e:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8000832:	6802      	ldr	r2, [r0, #0]
 8000834:	f003 0306 	and.w	r3, r3, #6
 8000838:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800083c:	6113      	str	r3, [r2, #16]
}
 800083e:	e7f4      	b.n	800082a <I2C_Master_SB+0x92>

08000840 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8000840:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000842:	6802      	ldr	r2, [r0, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8000848:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800084a:	b13b      	cbz	r3, 800085c <I2C_Master_ADD10+0x1c>
 800084c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084e:	b12b      	cbz	r3, 800085c <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8000850:	6802      	ldr	r2, [r0, #0]
 8000852:	6853      	ldr	r3, [r2, #4]
 8000854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000858:	6053      	str	r3, [r2, #4]
  }
}
 800085a:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800085c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0fb      	beq.n	800085a <I2C_Master_ADD10+0x1a>
 8000862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f3      	bne.n	8000850 <I2C_Master_ADD10+0x10>
 8000868:	e7f7      	b.n	800085a <I2C_Master_ADD10+0x1a>

0800086a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800086a:	b410      	push	{r4}
 800086c:	b08d      	sub	sp, #52	; 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800086e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000872:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8000874:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8000876:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000878:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b22      	cmp	r3, #34	; 0x22
 8000880:	d00a      	beq.n	8000898 <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000882:	2300      	movs	r3, #0
 8000884:	930b      	str	r3, [sp, #44]	; 0x2c
 8000886:	6803      	ldr	r3, [r0, #0]
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	920b      	str	r2, [sp, #44]	; 0x2c
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }
}
 8000892:	b00d      	add	sp, #52	; 0x34
 8000894:	bc10      	pop	{r4}
 8000896:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8000898:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800089a:	b90b      	cbnz	r3, 80008a0 <I2C_Master_ADDR+0x36>
 800089c:	2a40      	cmp	r2, #64	; 0x40
 800089e:	d017      	beq.n	80008d0 <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80008a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80008a2:	b91b      	cbnz	r3, 80008ac <I2C_Master_ADDR+0x42>
 80008a4:	6903      	ldr	r3, [r0, #16]
 80008a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80008aa:	d019      	beq.n	80008e0 <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 80008ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d125      	bne.n	8000900 <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	6803      	ldr	r3, [r0, #0]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	9203      	str	r2, [sp, #12]
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	9203      	str	r2, [sp, #12]
 80008c0:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	6503      	str	r3, [r0, #80]	; 0x50
 80008ce:	e7e0      	b.n	8000892 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	6803      	ldr	r3, [r0, #0]
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	9201      	str	r2, [sp, #4]
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	9b01      	ldr	r3, [sp, #4]
 80008de:	e7d8      	b.n	8000892 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008e0:	2300      	movs	r3, #0
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	6803      	ldr	r3, [r0, #0]
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	9202      	str	r2, [sp, #8]
 80008ea:	699a      	ldr	r2, [r3, #24]
 80008ec:	9202      	str	r2, [sp, #8]
 80008ee:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80008f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80008fa:	3301      	adds	r3, #1
 80008fc:	6503      	str	r3, [r0, #80]	; 0x50
 80008fe:	e7c8      	b.n	8000892 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8000900:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000902:	b29b      	uxth	r3, r3
 8000904:	2b01      	cmp	r3, #1
 8000906:	d025      	beq.n	8000954 <I2C_Master_ADDR+0xea>
      else if (hi2c->XferCount == 2U)
 8000908:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800090a:	b29b      	uxth	r3, r3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d07b      	beq.n	8000a08 <I2C_Master_ADDR+0x19e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000910:	6802      	ldr	r2, [r0, #0]
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000918:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800091a:	6803      	ldr	r3, [r0, #0]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8000922:	d00e      	beq.n	8000942 <I2C_Master_ADDR+0xd8>
 8000924:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8000928:	d007      	beq.n	800093a <I2C_Master_ADDR+0xd0>
 800092a:	2901      	cmp	r1, #1
 800092c:	d005      	beq.n	800093a <I2C_Master_ADDR+0xd0>
 800092e:	2908      	cmp	r1, #8
 8000930:	d003      	beq.n	800093a <I2C_Master_ADDR+0xd0>
 8000932:	2910      	cmp	r1, #16
 8000934:	d001      	beq.n	800093a <I2C_Master_ADDR+0xd0>
 8000936:	2920      	cmp	r1, #32
 8000938:	d103      	bne.n	8000942 <I2C_Master_ADDR+0xd8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000940:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000942:	2300      	movs	r3, #0
 8000944:	930a      	str	r3, [sp, #40]	; 0x28
 8000946:	6803      	ldr	r3, [r0, #0]
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	920a      	str	r2, [sp, #40]	; 0x28
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	930a      	str	r3, [sp, #40]	; 0x28
 8000950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000952:	e7ba      	b.n	80008ca <I2C_Master_ADDR+0x60>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8000954:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8000958:	d011      	beq.n	800097e <I2C_Master_ADDR+0x114>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800095a:	2908      	cmp	r1, #8
 800095c:	d034      	beq.n	80009c8 <I2C_Master_ADDR+0x15e>
 800095e:	2920      	cmp	r1, #32
 8000960:	d032      	beq.n	80009c8 <I2C_Master_ADDR+0x15e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8000962:	2c12      	cmp	r4, #18
 8000964:	d02e      	beq.n	80009c4 <I2C_Master_ADDR+0x15a>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8000966:	2904      	cmp	r1, #4
 8000968:	d040      	beq.n	80009ec <I2C_Master_ADDR+0x182>
 800096a:	2902      	cmp	r1, #2
 800096c:	d03e      	beq.n	80009ec <I2C_Master_ADDR+0x182>
 800096e:	2910      	cmp	r1, #16
 8000970:	d03c      	beq.n	80009ec <I2C_Master_ADDR+0x182>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000972:	6802      	ldr	r2, [r0, #0]
 8000974:	6813      	ldr	r3, [r2, #0]
 8000976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	e03b      	b.n	80009f6 <I2C_Master_ADDR+0x18c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800097e:	6802      	ldr	r2, [r0, #0]
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000988:	6803      	ldr	r3, [r0, #0]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8000990:	d00c      	beq.n	80009ac <I2C_Master_ADDR+0x142>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000998:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800099a:	2300      	movs	r3, #0
 800099c:	9304      	str	r3, [sp, #16]
 800099e:	6803      	ldr	r3, [r0, #0]
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	9204      	str	r2, [sp, #16]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	9304      	str	r3, [sp, #16]
 80009a8:	9b04      	ldr	r3, [sp, #16]
 80009aa:	e78e      	b.n	80008ca <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009ac:	2200      	movs	r2, #0
 80009ae:	9205      	str	r2, [sp, #20]
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	9205      	str	r2, [sp, #20]
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	9205      	str	r2, [sp, #20]
 80009b8:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e782      	b.n	80008ca <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80009c4:	2901      	cmp	r1, #1
 80009c6:	d0ce      	beq.n	8000966 <I2C_Master_ADDR+0xfc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80009c8:	6802      	ldr	r2, [r0, #0]
 80009ca:	6813      	ldr	r3, [r2, #0]
 80009cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009d0:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009d2:	2300      	movs	r3, #0
 80009d4:	9307      	str	r3, [sp, #28]
 80009d6:	6803      	ldr	r3, [r0, #0]
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	9207      	str	r2, [sp, #28]
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	9207      	str	r2, [sp, #28]
 80009e0:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e76e      	b.n	80008ca <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80009ec:	6802      	ldr	r2, [r0, #0]
 80009ee:	6813      	ldr	r3, [r2, #0]
 80009f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009f6:	2300      	movs	r3, #0
 80009f8:	9306      	str	r3, [sp, #24]
 80009fa:	6803      	ldr	r3, [r0, #0]
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	9206      	str	r2, [sp, #24]
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	9306      	str	r3, [sp, #24]
 8000a04:	9b06      	ldr	r3, [sp, #24]
 8000a06:	e760      	b.n	80008ca <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8000a08:	2904      	cmp	r1, #4
 8000a0a:	d015      	beq.n	8000a38 <I2C_Master_ADDR+0x1ce>
 8000a0c:	2902      	cmp	r1, #2
 8000a0e:	d013      	beq.n	8000a38 <I2C_Master_ADDR+0x1ce>
 8000a10:	2910      	cmp	r1, #16
 8000a12:	d011      	beq.n	8000a38 <I2C_Master_ADDR+0x1ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a14:	6802      	ldr	r2, [r0, #0]
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a1c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9308      	str	r3, [sp, #32]
 8000a22:	6803      	ldr	r3, [r0, #0]
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	9208      	str	r2, [sp, #32]
 8000a28:	699a      	ldr	r2, [r3, #24]
 8000a2a:	9208      	str	r2, [sp, #32]
 8000a2c:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e00c      	b.n	8000a52 <I2C_Master_ADDR+0x1e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000a38:	6802      	ldr	r2, [r0, #0]
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a40:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a42:	2300      	movs	r3, #0
 8000a44:	9309      	str	r3, [sp, #36]	; 0x24
 8000a46:	6803      	ldr	r3, [r0, #0]
 8000a48:	695a      	ldr	r2, [r3, #20]
 8000a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8000a52:	6803      	ldr	r3, [r0, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8000a5a:	f43f af36 	beq.w	80008ca <I2C_Master_ADDR+0x60>
 8000a5e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8000a62:	d008      	beq.n	8000a76 <I2C_Master_ADDR+0x20c>
 8000a64:	2901      	cmp	r1, #1
 8000a66:	d006      	beq.n	8000a76 <I2C_Master_ADDR+0x20c>
 8000a68:	2908      	cmp	r1, #8
 8000a6a:	d004      	beq.n	8000a76 <I2C_Master_ADDR+0x20c>
 8000a6c:	2910      	cmp	r1, #16
 8000a6e:	d002      	beq.n	8000a76 <I2C_Master_ADDR+0x20c>
 8000a70:	2920      	cmp	r1, #32
 8000a72:	f47f af2a 	bne.w	80008ca <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	e724      	b.n	80008ca <I2C_Master_ADDR+0x60>

08000a80 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8000a80:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b15b      	cbz	r3, 8000a9e <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a86:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000a88:	6803      	ldr	r3, [r0, #0]
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8000a8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a90:	3301      	adds	r3, #1
 8000a92:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8000a94:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8000a9e:	4770      	bx	lr

08000aa0 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8000aa0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b15b      	cbz	r3, 8000abe <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000aa6:	6803      	ldr	r3, [r0, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8000aae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8000ab4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8000abe:	4770      	bx	lr

08000ac0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8000ac0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	08db      	lsrs	r3, r3, #3
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ad8:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8000ada:	9b01      	ldr	r3, [sp, #4]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8000ae0:	9b01      	ldr	r3, [sp, #4]
 8000ae2:	b133      	cbz	r3, 8000af2 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8000ae4:	6803      	ldr	r3, [r0, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000aec:	d1f5      	bne.n	8000ada <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8000aee:	2000      	movs	r0, #0
 8000af0:	e004      	b.n	8000afc <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000af2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
}
 8000afc:	b002      	add	sp, #8
 8000afe:	4770      	bx	lr
 8000b00:	20000014 	.word	0x20000014
 8000b04:	14f8b589 	.word	0x14f8b589

08000b08 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b08:	6803      	ldr	r3, [r0, #0]
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000b10:	d101      	bne.n	8000b16 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000b12:	2000      	movs	r0, #0
}
 8000b14:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000b1a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b20:	2220      	movs	r2, #32
 8000b22:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b26:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000b2c:	f042 0204 	orr.w	r2, r2, #4
 8000b30:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8000b32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000b36:	2001      	movs	r0, #1
 8000b38:	4770      	bx	lr

08000b3a <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8000b3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8000b40:	d004      	beq.n	8000b4c <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8000b42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8000b48:	d003      	beq.n	8000b52 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8000b4a:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000b50:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000b52:	2308      	movs	r3, #8
 8000b54:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000b56:	e7f8      	b.n	8000b4a <I2C_ConvertOtherXferOptions+0x10>

08000b58 <I2C_WaitOnFlagUntilTimeout>:
{
 8000b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5c:	4607      	mov	r7, r0
 8000b5e:	460d      	mov	r5, r1
 8000b60:	4690      	mov	r8, r2
 8000b62:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b64:	e022      	b.n	8000bac <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b66:	f7ff fb11 	bl	800018c <HAL_GetTick>
 8000b6a:	9b06      	ldr	r3, [sp, #24]
 8000b6c:	1ac0      	subs	r0, r0, r3
 8000b6e:	42b0      	cmp	r0, r6
 8000b70:	d800      	bhi.n	8000b74 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000b72:	b9de      	cbnz	r6, 8000bac <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000b78:	2220      	movs	r2, #32
 8000b7a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000b7e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b84:	f042 0220 	orr.w	r2, r2, #32
 8000b88:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000b8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
 8000b90:	e01a      	b.n	8000bc8 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	699c      	ldr	r4, [r3, #24]
 8000b96:	ea25 0404 	bic.w	r4, r5, r4
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fab4 f484 	clz	r4, r4
 8000ba0:	0964      	lsrs	r4, r4, #5
 8000ba2:	45a0      	cmp	r8, r4
 8000ba4:	d10f      	bne.n	8000bc6 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8000ba6:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000baa:	d1dc      	bne.n	8000b66 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000bac:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d1ee      	bne.n	8000b92 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	695c      	ldr	r4, [r3, #20]
 8000bb8:	ea25 0404 	bic.w	r4, r5, r4
 8000bbc:	b2a4      	uxth	r4, r4
 8000bbe:	fab4 f484 	clz	r4, r4
 8000bc2:	0964      	lsrs	r4, r4, #5
 8000bc4:	e7ed      	b.n	8000ba2 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8000bc6:	2000      	movs	r0, #0
}
 8000bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd0:	4605      	mov	r5, r0
 8000bd2:	460e      	mov	r6, r1
 8000bd4:	4617      	mov	r7, r2
 8000bd6:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000bd8:	e03d      	b.n	8000c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000be0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000be8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000bee:	2220      	movs	r2, #32
 8000bf0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000bf4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000bf8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000bfa:	f042 0204 	orr.w	r2, r2, #4
 8000bfe:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000c00:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000c04:	2001      	movs	r0, #1
 8000c06:	e034      	b.n	8000c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c08:	f7ff fac0 	bl	800018c <HAL_GetTick>
 8000c0c:	eba0 0008 	sub.w	r0, r0, r8
 8000c10:	42b8      	cmp	r0, r7
 8000c12:	d800      	bhi.n	8000c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000c14:	b9ff      	cbnz	r7, 8000c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c20:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c24:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c26:	f042 0220 	orr.w	r2, r2, #32
 8000c2a:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c2c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
 8000c32:	e01e      	b.n	8000c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	699c      	ldr	r4, [r3, #24]
 8000c38:	ea26 0404 	bic.w	r4, r6, r4
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	3c00      	subs	r4, #0
 8000c40:	bf18      	it	ne
 8000c42:	2401      	movne	r4, #1
 8000c44:	b1a4      	cbz	r4, 8000c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c46:	682b      	ldr	r3, [r5, #0]
 8000c48:	695a      	ldr	r2, [r3, #20]
 8000c4a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000c4e:	d1c4      	bne.n	8000bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8000c50:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000c54:	d1d8      	bne.n	8000c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000c56:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d1ea      	bne.n	8000c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8000c5e:	682b      	ldr	r3, [r5, #0]
 8000c60:	695c      	ldr	r4, [r3, #20]
 8000c62:	ea26 0404 	bic.w	r4, r6, r4
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	3c00      	subs	r4, #0
 8000c6a:	bf18      	it	ne
 8000c6c:	2401      	movne	r4, #1
 8000c6e:	e7e9      	b.n	8000c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8000c70:	2000      	movs	r0, #0
}
 8000c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000c78 <I2C_MasterRequestWrite>:
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4616      	mov	r6, r2
 8000c82:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000c84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d00d      	beq.n	8000ca6 <I2C_MasterRequestWrite+0x2e>
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d00b      	beq.n	8000ca6 <I2C_MasterRequestWrite+0x2e>
 8000c8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c92:	d008      	beq.n	8000ca6 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000c94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d10a      	bne.n	8000cb0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c9a:	6802      	ldr	r2, [r0, #0]
 8000c9c:	6813      	ldr	r3, [r2, #0]
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e004      	b.n	8000cb0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	6813      	ldr	r3, [r2, #0]
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000cb0:	9700      	str	r7, [sp, #0]
 8000cb2:	4633      	mov	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f7ff ff4c 	bl	8000b58 <I2C_WaitOnFlagUntilTimeout>
 8000cc0:	b980      	cbnz	r0, 8000ce4 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cc2:	6923      	ldr	r3, [r4, #16]
 8000cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cc8:	d116      	bne.n	8000cf8 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000cd0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4632      	mov	r2, r6
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <I2C_MasterRequestWrite+0xac>)
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff ff77 	bl	8000bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000cde:	b9f8      	cbnz	r0, 8000d20 <I2C_MasterRequestWrite+0xa8>
}
 8000ce0:	b003      	add	sp, #12
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cec:	d002      	beq.n	8000cf4 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	e7f3      	b.n	8000ce0 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000cf8:	11eb      	asrs	r3, r5, #7
 8000cfa:	6822      	ldr	r2, [r4, #0]
 8000cfc:	f003 0306 	and.w	r3, r3, #6
 8000d00:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000d04:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	4632      	mov	r2, r6
 8000d0a:	4907      	ldr	r1, [pc, #28]	; (8000d28 <I2C_MasterRequestWrite+0xb0>)
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff ff5d 	bl	8000bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d12:	b918      	cbnz	r0, 8000d1c <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	b2ed      	uxtb	r5, r5
 8000d18:	611d      	str	r5, [r3, #16]
 8000d1a:	e7da      	b.n	8000cd2 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	e7df      	b.n	8000ce0 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
 8000d22:	e7dd      	b.n	8000ce0 <I2C_MasterRequestWrite+0x68>
 8000d24:	00010002 	.word	0x00010002
 8000d28:	00010008 	.word	0x00010008

08000d2c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d3c:	d11c      	bne.n	8000d78 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fee2 	bl	8000b08 <I2C_IsAcknowledgeFailed>
 8000d44:	b9d0      	cbnz	r0, 8000d7c <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000d46:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000d4a:	d0f3      	beq.n	8000d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d4c:	f7ff fa1e 	bl	800018c <HAL_GetTick>
 8000d50:	1b80      	subs	r0, r0, r6
 8000d52:	42a8      	cmp	r0, r5
 8000d54:	d801      	bhi.n	8000d5a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d1ec      	bne.n	8000d34 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d6a:	f042 0220 	orr.w	r2, r2, #32
 8000d6e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
 8000d76:	e000      	b.n	8000d7a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000d78:	2000      	movs	r0, #0
}
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	e7fc      	b.n	8000d7a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08000d80 <I2C_RequestMemoryRead>:
{
 8000d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	4604      	mov	r4, r0
 8000d88:	460d      	mov	r5, r1
 8000d8a:	4616      	mov	r6, r2
 8000d8c:	4699      	mov	r9, r3
 8000d8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8000d90:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d94:	6802      	ldr	r2, [r0, #0]
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000d9e:	6803      	ldr	r3, [r0, #0]
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000da6:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000da8:	f8cd 8000 	str.w	r8, [sp]
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000db4:	f7ff fed0 	bl	8000b58 <I2C_WaitOnFlagUntilTimeout>
 8000db8:	b970      	cbnz	r0, 8000dd8 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000dba:	fa5f fa85 	uxtb.w	sl, r5
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000dc4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	463a      	mov	r2, r7
 8000dca:	4941      	ldr	r1, [pc, #260]	; (8000ed0 <I2C_RequestMemoryRead+0x150>)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff fefd 	bl	8000bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000dd2:	b168      	cbz	r0, 8000df0 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e008      	b.n	8000dea <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000de0:	d002      	beq.n	8000de8 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000de8:	2003      	movs	r0, #3
}
 8000dea:	b004      	add	sp, #16
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000df0:	2300      	movs	r3, #0
 8000df2:	9303      	str	r3, [sp, #12]
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	9203      	str	r2, [sp, #12]
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	9303      	str	r3, [sp, #12]
 8000dfe:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e00:	4642      	mov	r2, r8
 8000e02:	4639      	mov	r1, r7
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff ff91 	bl	8000d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8000e0a:	b980      	cbnz	r0, 8000e2e <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e0c:	f1b9 0f01 	cmp.w	r9, #1
 8000e10:	d118      	bne.n	8000e44 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	b2f6      	uxtb	r6, r6
 8000e16:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e18:	4642      	mov	r2, r8
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff ff85 	bl	8000d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8000e22:	b368      	cbz	r0, 8000e80 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d024      	beq.n	8000e74 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	e7dd      	b.n	8000dea <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d001      	beq.n	8000e38 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7d8      	b.n	8000dea <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e38:	6822      	ldr	r2, [r4, #0]
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e7f7      	b.n	8000e34 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	0a32      	lsrs	r2, r6, #8
 8000e48:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff ff6c 	bl	8000d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8000e54:	b918      	cbnz	r0, 8000e5e <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	b2f6      	uxtb	r6, r6
 8000e5a:	611e      	str	r6, [r3, #16]
 8000e5c:	e7dc      	b.n	8000e18 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d001      	beq.n	8000e68 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8000e64:	2001      	movs	r0, #1
 8000e66:	e7c0      	b.n	8000dea <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e7f7      	b.n	8000e64 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	6813      	ldr	r3, [r2, #0]
 8000e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e7d4      	b.n	8000e2a <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e80:	6822      	ldr	r2, [r4, #0]
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e8a:	f8cd 8000 	str.w	r8, [sp]
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fe5e 	bl	8000b58 <I2C_WaitOnFlagUntilTimeout>
 8000e9c:	b968      	cbnz	r0, 8000eba <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	f04a 0301 	orr.w	r3, sl, #1
 8000ea4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	463a      	mov	r2, r7
 8000eaa:	4909      	ldr	r1, [pc, #36]	; (8000ed0 <I2C_RequestMemoryRead+0x150>)
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff fe8d 	bl	8000bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d099      	beq.n	8000dea <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	e797      	b.n	8000dea <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ec2:	d002      	beq.n	8000eca <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000eca:	2003      	movs	r0, #3
 8000ecc:	e78d      	b.n	8000dea <I2C_RequestMemoryRead+0x6a>
 8000ece:	bf00      	nop
 8000ed0:	00010002 	.word	0x00010002

08000ed4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	460d      	mov	r5, r1
 8000eda:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f013 0f04 	tst.w	r3, #4
 8000ee4:	d11c      	bne.n	8000f20 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f7ff fe0e 	bl	8000b08 <I2C_IsAcknowledgeFailed>
 8000eec:	b9d0      	cbnz	r0, 8000f24 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000eee:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000ef2:	d0f3      	beq.n	8000edc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ef4:	f7ff f94a 	bl	800018c <HAL_GetTick>
 8000ef8:	1b80      	subs	r0, r0, r6
 8000efa:	42a8      	cmp	r0, r5
 8000efc:	d801      	bhi.n	8000f02 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d1ec      	bne.n	8000edc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f06:	2220      	movs	r2, #32
 8000f08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000f18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	e000      	b.n	8000f22 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000f20:	2000      	movs	r0, #0
}
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000f24:	2001      	movs	r0, #1
 8000f26:	e7fc      	b.n	8000f22 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08000f28 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	f000 80cc 	beq.w	80010c6 <HAL_I2C_Init+0x19e>
{
 8000f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f30:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d077      	beq.n	800102a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f3a:	2324      	movs	r3, #36	; 0x24
 8000f3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000f40:	6822      	ldr	r2, [r4, #0]
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	6813      	ldr	r3, [r2, #0]
 8000f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f52:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f5c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f5e:	f001 fba3 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f62:	6862      	ldr	r2, [r4, #4]
 8000f64:	4b5a      	ldr	r3, [pc, #360]	; (80010d0 <HAL_I2C_Init+0x1a8>)
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d864      	bhi.n	8001034 <HAL_I2C_Init+0x10c>
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <HAL_I2C_Init+0x1ac>)
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	bf8c      	ite	hi
 8000f70:	2300      	movhi	r3, #0
 8000f72:	2301      	movls	r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f040 80a8 	bne.w	80010ca <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8000f7a:	4d57      	ldr	r5, [pc, #348]	; (80010d8 <HAL_I2C_Init+0x1b0>)
 8000f7c:	fba5 3500 	umull	r3, r5, r5, r0
 8000f80:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f82:	6826      	ldr	r6, [r4, #0]
 8000f84:	6871      	ldr	r1, [r6, #4]
 8000f86:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000f8a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8000f8e:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f90:	6821      	ldr	r1, [r4, #0]
 8000f92:	6a0b      	ldr	r3, [r1, #32]
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	6865      	ldr	r5, [r4, #4]
 8000f9a:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <HAL_I2C_Init+0x1a8>)
 8000f9c:	4295      	cmp	r5, r2
 8000f9e:	d84f      	bhi.n	8001040 <HAL_I2C_Init+0x118>
 8000fa0:	1c7a      	adds	r2, r7, #1
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fa6:	6825      	ldr	r5, [r4, #0]
 8000fa8:	69e9      	ldr	r1, [r5, #28]
 8000faa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000fae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000fb2:	6863      	ldr	r3, [r4, #4]
 8000fb4:	4a46      	ldr	r2, [pc, #280]	; (80010d0 <HAL_I2C_Init+0x1a8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d84c      	bhi.n	8001054 <HAL_I2C_Init+0x12c>
 8000fba:	3801      	subs	r0, #1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc2:	3001      	adds	r0, #1
 8000fc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fc8:	4218      	tst	r0, r3
 8000fca:	d078      	beq.n	80010be <HAL_I2C_Init+0x196>
 8000fcc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fd4:	6821      	ldr	r1, [r4, #0]
 8000fd6:	680b      	ldr	r3, [r1, #0]
 8000fd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fdc:	69e2      	ldr	r2, [r4, #28]
 8000fde:	6a20      	ldr	r0, [r4, #32]
 8000fe0:	4302      	orrs	r2, r0
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fe6:	6821      	ldr	r1, [r4, #0]
 8000fe8:	688b      	ldr	r3, [r1, #8]
 8000fea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ff2:	6922      	ldr	r2, [r4, #16]
 8000ff4:	68e0      	ldr	r0, [r4, #12]
 8000ff6:	4302      	orrs	r2, r0
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ffc:	6821      	ldr	r1, [r4, #0]
 8000ffe:	68cb      	ldr	r3, [r1, #12]
 8001000:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001004:	6962      	ldr	r2, [r4, #20]
 8001006:	69a0      	ldr	r0, [r4, #24]
 8001008:	4302      	orrs	r2, r0
 800100a:	4313      	orrs	r3, r2
 800100c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001018:	2000      	movs	r0, #0
 800101a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800101c:	2320      	movs	r3, #32
 800101e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001022:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001024:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800102a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800102e:	f004 fd0f 	bl	8005a50 <HAL_I2C_MspInit>
 8001032:	e782      	b.n	8000f3a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_I2C_Init+0x1b4>)
 8001036:	4298      	cmp	r0, r3
 8001038:	bf8c      	ite	hi
 800103a:	2300      	movhi	r3, #0
 800103c:	2301      	movls	r3, #1
 800103e:	e799      	b.n	8000f74 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001040:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001044:	fb02 f207 	mul.w	r2, r2, r7
 8001048:	4d25      	ldr	r5, [pc, #148]	; (80010e0 <HAL_I2C_Init+0x1b8>)
 800104a:	fba5 5202 	umull	r5, r2, r5, r2
 800104e:	0992      	lsrs	r2, r2, #6
 8001050:	3201      	adds	r2, #1
 8001052:	e7a6      	b.n	8000fa2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001054:	68a2      	ldr	r2, [r4, #8]
 8001056:	b9ba      	cbnz	r2, 8001088 <HAL_I2C_Init+0x160>
 8001058:	1e46      	subs	r6, r0, #1
 800105a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800105e:	fbb6 f6f7 	udiv	r6, r6, r7
 8001062:	3601      	adds	r6, #1
 8001064:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001068:	fab6 f686 	clz	r6, r6
 800106c:	0976      	lsrs	r6, r6, #5
 800106e:	bb46      	cbnz	r6, 80010c2 <HAL_I2C_Init+0x19a>
 8001070:	b9c2      	cbnz	r2, 80010a4 <HAL_I2C_Init+0x17c>
 8001072:	1e42      	subs	r2, r0, #1
 8001074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001078:	fbb2 f2f3 	udiv	r2, r2, r3
 800107c:	3201      	adds	r2, #1
 800107e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001082:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001086:	e7a3      	b.n	8000fd0 <HAL_I2C_Init+0xa8>
 8001088:	1e46      	subs	r6, r0, #1
 800108a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800108e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001092:	fbb6 f6f7 	udiv	r6, r6, r7
 8001096:	3601      	adds	r6, #1
 8001098:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800109c:	fab6 f686 	clz	r6, r6
 80010a0:	0976      	lsrs	r6, r6, #5
 80010a2:	e7e4      	b.n	800106e <HAL_I2C_Init+0x146>
 80010a4:	1e42      	subs	r2, r0, #1
 80010a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80010b2:	3201      	adds	r2, #1
 80010b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80010b8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80010bc:	e788      	b.n	8000fd0 <HAL_I2C_Init+0xa8>
 80010be:	2304      	movs	r3, #4
 80010c0:	e786      	b.n	8000fd0 <HAL_I2C_Init+0xa8>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e784      	b.n	8000fd0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
}
 80010c8:	4770      	bx	lr
    return HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
 80010cc:	e7ac      	b.n	8001028 <HAL_I2C_Init+0x100>
 80010ce:	bf00      	nop
 80010d0:	000186a0 	.word	0x000186a0
 80010d4:	001e847f 	.word	0x001e847f
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	003d08ff 	.word	0x003d08ff
 80010e0:	10624dd3 	.word	0x10624dd3

080010e4 <HAL_I2C_Master_Transmit>:
{
 80010e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e8:	b085      	sub	sp, #20
 80010ea:	4604      	mov	r4, r0
 80010ec:	460f      	mov	r7, r1
 80010ee:	4691      	mov	r9, r2
 80010f0:	4698      	mov	r8, r3
 80010f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff f84a 	bl	800018c <HAL_GetTick>
 80010f8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80010fe:	b2c0      	uxtb	r0, r0
 8001100:	2820      	cmp	r0, #32
 8001102:	d004      	beq.n	800110e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001104:	2702      	movs	r7, #2
}
 8001106:	4638      	mov	r0, r7
 8001108:	b005      	add	sp, #20
 800110a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800110e:	9500      	str	r5, [sp, #0]
 8001110:	2319      	movs	r3, #25
 8001112:	2201      	movs	r2, #1
 8001114:	494f      	ldr	r1, [pc, #316]	; (8001254 <HAL_I2C_Master_Transmit+0x170>)
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fd1e 	bl	8000b58 <I2C_WaitOnFlagUntilTimeout>
 800111c:	2800      	cmp	r0, #0
 800111e:	f040 8092 	bne.w	8001246 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001122:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001126:	2b01      	cmp	r3, #1
 8001128:	f000 808f 	beq.w	800124a <HAL_I2C_Master_Transmit+0x166>
 800112c:	2301      	movs	r3, #1
 800112e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f012 0f01 	tst.w	r2, #1
 800113a:	d103      	bne.n	8001144 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001144:	6822      	ldr	r2, [r4, #0]
 8001146:	6813      	ldr	r3, [r2, #0]
 8001148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800114c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800114e:	2321      	movs	r3, #33	; 0x21
 8001150:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001154:	2310      	movs	r3, #16
 8001156:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800115e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001162:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001166:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001168:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_I2C_Master_Transmit+0x174>)
 800116c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800116e:	462b      	mov	r3, r5
 8001170:	4632      	mov	r2, r6
 8001172:	4639      	mov	r1, r7
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fd7f 	bl	8000c78 <I2C_MasterRequestWrite>
 800117a:	4607      	mov	r7, r0
 800117c:	2800      	cmp	r0, #0
 800117e:	d166      	bne.n	800124e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001180:	2300      	movs	r3, #0
 8001182:	9303      	str	r3, [sp, #12]
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	9203      	str	r2, [sp, #12]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	9303      	str	r3, [sp, #12]
 800118e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001190:	e011      	b.n	80011b6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001194:	2b04      	cmp	r3, #4
 8001196:	d001      	beq.n	800119c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001198:	2701      	movs	r7, #1
 800119a:	e7b4      	b.n	8001106 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800119c:	6822      	ldr	r2, [r4, #0]
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e7f7      	b.n	8001198 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a8:	462a      	mov	r2, r5
 80011aa:	4631      	mov	r1, r6
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fe91 	bl	8000ed4 <I2C_WaitOnBTFFlagUntilTimeout>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d12e      	bne.n	8001214 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80011b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d036      	beq.n	800122a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011bc:	462a      	mov	r2, r5
 80011be:	4631      	mov	r1, r6
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fdb3 	bl	8000d2c <I2C_WaitOnTXEFlagUntilTimeout>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d1e3      	bne.n	8001192 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80011d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011d4:	1c4b      	adds	r3, r1, #1
 80011d6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80011d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29b      	uxth	r3, r3
 80011e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	6950      	ldr	r0, [r2, #20]
 80011ee:	f010 0f04 	tst.w	r0, #4
 80011f2:	d0d9      	beq.n	80011a8 <HAL_I2C_Master_Transmit+0xc4>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0d7      	beq.n	80011a8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011f8:	784b      	ldrb	r3, [r1, #1]
 80011fa:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80011fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011fe:	3301      	adds	r3, #1
 8001200:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001202:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29b      	uxth	r3, r3
 800120a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800120c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800120e:	3b01      	subs	r3, #1
 8001210:	8523      	strh	r3, [r4, #40]	; 0x28
 8001212:	e7c9      	b.n	80011a8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001216:	2b04      	cmp	r3, #4
 8001218:	d001      	beq.n	800121e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800121a:	2701      	movs	r7, #1
 800121c:	e773      	b.n	8001106 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e7f7      	b.n	800121a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001234:	2320      	movs	r3, #32
 8001236:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800123a:	2300      	movs	r3, #0
 800123c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001240:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001244:	e75f      	b.n	8001106 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001246:	2702      	movs	r7, #2
 8001248:	e75d      	b.n	8001106 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800124a:	2702      	movs	r7, #2
 800124c:	e75b      	b.n	8001106 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800124e:	2701      	movs	r7, #1
 8001250:	e759      	b.n	8001106 <HAL_I2C_Master_Transmit+0x22>
 8001252:	bf00      	nop
 8001254:	00100002 	.word	0x00100002
 8001258:	ffff0000 	.word	0xffff0000

0800125c <HAL_I2C_Mem_Read_DMA>:
{
 800125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001260:	b087      	sub	sp, #28
 8001262:	4605      	mov	r5, r0
 8001264:	460e      	mov	r6, r1
 8001266:	4617      	mov	r7, r2
 8001268:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 800126a:	f7fe ff8f 	bl	800018c <HAL_GetTick>
  __IO uint32_t count = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001272:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b20      	cmp	r3, #32
 800127a:	f040 80e1 	bne.w	8001440 <HAL_I2C_Mem_Read_DMA+0x1e4>
 800127e:	4681      	mov	r9, r0
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	4a73      	ldr	r2, [pc, #460]	; (8001454 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001292:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001296:	9305      	str	r3, [sp, #20]
      count--;
 8001298:	9c05      	ldr	r4, [sp, #20]
 800129a:	3c01      	subs	r4, #1
 800129c:	9405      	str	r4, [sp, #20]
      if (count == 0U)
 800129e:	9c05      	ldr	r4, [sp, #20]
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d051      	beq.n	8001348 <HAL_I2C_Mem_Read_DMA+0xec>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	f012 0f02 	tst.w	r2, #2
 80012ac:	d1f4      	bne.n	8001298 <HAL_I2C_Mem_Read_DMA+0x3c>
    __HAL_LOCK(hi2c);
 80012ae:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80012b2:	2a01      	cmp	r2, #1
 80012b4:	f000 80c8 	beq.w	8001448 <HAL_I2C_Mem_Read_DMA+0x1ec>
 80012b8:	2201      	movs	r2, #1
 80012ba:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f012 0f01 	tst.w	r2, #1
 80012c4:	d103      	bne.n	80012ce <HAL_I2C_Mem_Read_DMA+0x72>
      __HAL_I2C_ENABLE(hi2c);
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012ce:	682a      	ldr	r2, [r5, #0]
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012d6:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012d8:	2322      	movs	r3, #34	; 0x22
 80012da:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80012e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80012ea:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012ec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80012f0:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012f2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 80012fa:	62ea      	str	r2, [r5, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8081 	beq.w	8001404 <HAL_I2C_Mem_Read_DMA+0x1a8>
      if (hi2c->hdmarx != NULL)
 8001302:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001304:	2b00      	cmp	r3, #0
 8001306:	d02e      	beq.n	8001366 <HAL_I2C_Mem_Read_DMA+0x10a>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001308:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_I2C_Mem_Read_DMA+0x200>)
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800130c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800130e:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_I2C_Mem_Read_DMA+0x204>)
 8001310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001312:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001314:	2300      	movs	r3, #0
 8001316:	62d3      	str	r3, [r2, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001318:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800131a:	6353      	str	r3, [r2, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800131c:	6829      	ldr	r1, [r5, #0]
 800131e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8001320:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001322:	3110      	adds	r1, #16
 8001324:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001326:	f7fe ffd7 	bl	80002d8 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800132a:	b350      	cbz	r0, 8001382 <HAL_I2C_Mem_Read_DMA+0x126>
        hi2c->State     = HAL_I2C_STATE_READY;
 800132c:	2320      	movs	r3, #32
 800132e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001332:	2200      	movs	r2, #0
 8001334:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001338:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001340:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8001344:	2001      	movs	r0, #1
 8001346:	e07c      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800134c:	2220      	movs	r2, #32
 800134e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001352:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001356:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001358:	f042 0220 	orr.w	r2, r2, #32
 800135c:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800135e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8001362:	2001      	movs	r0, #1
 8001364:	e06d      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001366:	2320      	movs	r3, #32
 8001368:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800136c:	2200      	movs	r2, #0
 800136e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001372:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800137a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
 8001380:	e05f      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001382:	f8cd 9004 	str.w	r9, [sp, #4]
 8001386:	2323      	movs	r3, #35	; 0x23
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4643      	mov	r3, r8
 800138c:	463a      	mov	r2, r7
 800138e:	4631      	mov	r1, r6
 8001390:	4628      	mov	r0, r5
 8001392:	f7ff fcf5 	bl	8000d80 <I2C_RequestMemoryRead>
 8001396:	b9d8      	cbnz	r0, 80013d0 <HAL_I2C_Mem_Read_DMA+0x174>
        if (hi2c->XferSize == 1U)
 8001398:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800139a:	2b01      	cmp	r3, #1
 800139c:	d02c      	beq.n	80013f8 <HAL_I2C_Mem_Read_DMA+0x19c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800139e:	682a      	ldr	r2, [r5, #0]
 80013a0:	6853      	ldr	r3, [r2, #4]
 80013a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a6:	6053      	str	r3, [r2, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a8:	2200      	movs	r2, #0
 80013aa:	9203      	str	r2, [sp, #12]
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	6959      	ldr	r1, [r3, #20]
 80013b0:	9103      	str	r1, [sp, #12]
 80013b2:	6999      	ldr	r1, [r3, #24]
 80013b4:	9103      	str	r1, [sp, #12]
 80013b6:	9903      	ldr	r1, [sp, #12]
        __HAL_UNLOCK(hi2c);
 80013b8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c2:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80013c4:	682a      	ldr	r2, [r5, #0]
 80013c6:	6853      	ldr	r3, [r2, #4]
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013cc:	6053      	str	r3, [r2, #4]
 80013ce:	e035      	b.n	800143c <HAL_I2C_Mem_Read_DMA+0x1e0>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80013d0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80013d2:	f7fe ffbb 	bl	800034c <HAL_DMA_Abort_IT>
          hi2c->hdmarx->XferCpltCallback = NULL;
 80013d6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80013d8:	2300      	movs	r3, #0
 80013da:	6293      	str	r3, [r2, #40]	; 0x28
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013dc:	6829      	ldr	r1, [r5, #0]
 80013de:	680a      	ldr	r2, [r1, #0]
 80013e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013e4:	600a      	str	r2, [r1, #0]
          hi2c->XferSize = 0U;
 80013e6:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount = 0U;
 80013e8:	856b      	strh	r3, [r5, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 80013ea:	682a      	ldr	r2, [r5, #0]
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
 80013f6:	e024      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f8:	682a      	ldr	r2, [r5, #0]
 80013fa:	6813      	ldr	r3, [r2, #0]
 80013fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e7d1      	b.n	80013a8 <HAL_I2C_Mem_Read_DMA+0x14c>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001404:	f8cd 9004 	str.w	r9, [sp, #4]
 8001408:	2323      	movs	r3, #35	; 0x23
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	463a      	mov	r2, r7
 8001410:	4631      	mov	r1, r6
 8001412:	4628      	mov	r0, r5
 8001414:	f7ff fcb4 	bl	8000d80 <I2C_RequestMemoryRead>
 8001418:	b9c0      	cbnz	r0, 800144c <HAL_I2C_Mem_Read_DMA+0x1f0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800141a:	2100      	movs	r1, #0
 800141c:	9104      	str	r1, [sp, #16]
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	9204      	str	r2, [sp, #16]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	9204      	str	r2, [sp, #16]
 8001428:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001430:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001432:	2320      	movs	r3, #32
 8001434:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001438:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    return HAL_OK;
 800143c:	2000      	movs	r0, #0
 800143e:	e000      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
    return HAL_BUSY;
 8001440:	2002      	movs	r0, #2
}
 8001442:	b007      	add	sp, #28
 8001444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001448:	2002      	movs	r0, #2
 800144a:	e7fa      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
        return HAL_ERROR;
 800144c:	2001      	movs	r0, #1
 800144e:	e7f8      	b.n	8001442 <HAL_I2C_Mem_Read_DMA+0x1e6>
 8001450:	20000014 	.word	0x20000014
 8001454:	14f8b589 	.word	0x14f8b589
 8001458:	ffff0000 	.word	0xffff0000
 800145c:	080018f5 	.word	0x080018f5
 8001460:	080018bb 	.word	0x080018bb

08001464 <HAL_I2C_MasterTxCpltCallback>:
}
 8001464:	4770      	bx	lr

08001466 <HAL_I2C_MasterRxCpltCallback>:
}
 8001466:	4770      	bx	lr

08001468 <HAL_I2C_SlaveTxCpltCallback>:
}
 8001468:	4770      	bx	lr

0800146a <I2C_SlaveTransmit_TXE>:
{
 800146a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800146c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001470:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8001472:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	b183      	cbz	r3, 800149a <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001478:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	7809      	ldrb	r1, [r1, #0]
 800147e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001482:	3301      	adds	r3, #1
 8001484:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8001486:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001490:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001492:	b29b      	uxth	r3, r3
 8001494:	b90b      	cbnz	r3, 800149a <I2C_SlaveTransmit_TXE+0x30>
 8001496:	2a29      	cmp	r2, #41	; 0x29
 8001498:	d000      	beq.n	800149c <I2C_SlaveTransmit_TXE+0x32>
}
 800149a:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800149c:	6802      	ldr	r2, [r0, #0]
 800149e:	6853      	ldr	r3, [r2, #4]
 80014a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014a4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80014a6:	2321      	movs	r3, #33	; 0x21
 80014a8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80014aa:	2328      	movs	r3, #40	; 0x28
 80014ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80014b0:	f7ff ffda 	bl	8001468 <HAL_I2C_SlaveTxCpltCallback>
}
 80014b4:	e7f1      	b.n	800149a <I2C_SlaveTransmit_TXE+0x30>

080014b6 <HAL_I2C_SlaveRxCpltCallback>:
}
 80014b6:	4770      	bx	lr

080014b8 <I2C_SlaveReceive_RXNE>:
{
 80014b8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014be:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80014c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b183      	cbz	r3, 80014e8 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c6:	6803      	ldr	r3, [r0, #0]
 80014c8:	6919      	ldr	r1, [r3, #16]
 80014ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014cc:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80014ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80014d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3b01      	subs	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80014de:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b90b      	cbnz	r3, 80014e8 <I2C_SlaveReceive_RXNE+0x30>
 80014e4:	2a2a      	cmp	r2, #42	; 0x2a
 80014e6:	d000      	beq.n	80014ea <I2C_SlaveReceive_RXNE+0x32>
}
 80014e8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80014ea:	6802      	ldr	r2, [r0, #0]
 80014ec:	6853      	ldr	r3, [r2, #4]
 80014ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014f2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80014f4:	2322      	movs	r3, #34	; 0x22
 80014f6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80014f8:	2328      	movs	r3, #40	; 0x28
 80014fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80014fe:	f7ff ffda 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001502:	e7f1      	b.n	80014e8 <I2C_SlaveReceive_RXNE+0x30>

08001504 <HAL_I2C_AddrCallback>:
}
 8001504:	4770      	bx	lr

08001506 <I2C_Slave_ADDR>:
{
 8001506:	b500      	push	{lr}
 8001508:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800150a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800150e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001512:	2b28      	cmp	r3, #40	; 0x28
 8001514:	d00c      	beq.n	8001530 <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	6802      	ldr	r2, [r0, #0]
 800151c:	6951      	ldr	r1, [r2, #20]
 800151e:	9101      	str	r1, [sp, #4]
 8001520:	6992      	ldr	r2, [r2, #24]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8001526:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800152a:	b003      	add	sp, #12
 800152c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6853      	ldr	r3, [r2, #4]
 8001534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001538:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800153a:	f011 0f04 	tst.w	r1, #4
 800153e:	d00b      	beq.n	8001558 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001540:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001542:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001546:	d109      	bne.n	800155c <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001548:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800154a:	2100      	movs	r1, #0
 800154c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff ffd7 	bl	8001504 <HAL_I2C_AddrCallback>
 8001556:	e7e8      	b.n	800152a <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001558:	2301      	movs	r3, #1
 800155a:	e7f2      	b.n	8001542 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800155c:	8b02      	ldrh	r2, [r0, #24]
 800155e:	e7f4      	b.n	800154a <I2C_Slave_ADDR+0x44>

08001560 <HAL_I2C_ListenCpltCallback>:
}
 8001560:	4770      	bx	lr

08001562 <HAL_I2C_MemTxCpltCallback>:
}
 8001562:	4770      	bx	lr

08001564 <I2C_MasterTransmit_BTF>:
{
 8001564:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001566:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001568:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b21      	cmp	r3, #33	; 0x21
 8001570:	d000      	beq.n	8001574 <I2C_MasterTransmit_BTF+0x10>
}
 8001572:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8001574:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	b163      	cbz	r3, 8001594 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800157a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800157c:	6803      	ldr	r3, [r0, #0]
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001582:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8001588:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800158a:	b29b      	uxth	r3, r3
 800158c:	3b01      	subs	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001592:	e7ee      	b.n	8001572 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001594:	2a08      	cmp	r2, #8
 8001596:	d004      	beq.n	80015a2 <I2C_MasterTransmit_BTF+0x3e>
 8001598:	2a20      	cmp	r2, #32
 800159a:	d002      	beq.n	80015a2 <I2C_MasterTransmit_BTF+0x3e>
 800159c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015a0:	d119      	bne.n	80015d6 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015a2:	6802      	ldr	r2, [r0, #0]
 80015a4:	6853      	ldr	r3, [r2, #4]
 80015a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015aa:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	6802      	ldr	r2, [r0, #0]
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b4:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	2320      	movs	r3, #32
 80015bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80015c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b40      	cmp	r3, #64	; 0x40
 80015c8:	d015      	beq.n	80015f6 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80015d0:	f7ff ff48 	bl	8001464 <HAL_I2C_MasterTxCpltCallback>
}
 80015d4:	e7cd      	b.n	8001572 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015d6:	6802      	ldr	r2, [r0, #0]
 80015d8:	6853      	ldr	r3, [r2, #4]
 80015da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015de:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80015e0:	2311      	movs	r3, #17
 80015e2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	2320      	movs	r3, #32
 80015ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80015f0:	f7ff ff38 	bl	8001464 <HAL_I2C_MasterTxCpltCallback>
 80015f4:	e7bd      	b.n	8001572 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80015fc:	f7ff ffb1 	bl	8001562 <HAL_I2C_MemTxCpltCallback>
 8001600:	e7b7      	b.n	8001572 <I2C_MasterTransmit_BTF+0xe>

08001602 <I2C_MemoryTransmit_TXE_BTF>:
{
 8001602:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001604:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8001608:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800160a:	b99a      	cbnz	r2, 8001634 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800160c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800160e:	2b01      	cmp	r3, #1
 8001610:	d008      	beq.n	8001624 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001612:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001614:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800161c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800161e:	3301      	adds	r3, #1
 8001620:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001622:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001624:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001626:	6802      	ldr	r2, [r0, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 800162c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800162e:	3302      	adds	r3, #2
 8001630:	6503      	str	r3, [r0, #80]	; 0x50
 8001632:	e7f6      	b.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8001634:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8001636:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001638:	2a01      	cmp	r2, #1
 800163a:	d023      	beq.n	8001684 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 800163c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800163e:	2a02      	cmp	r2, #2
 8001640:	d1ef      	bne.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001642:	2b22      	cmp	r3, #34	; 0x22
 8001644:	d026      	beq.n	8001694 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001646:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001648:	b292      	uxth	r2, r2
 800164a:	b10a      	cbz	r2, 8001650 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 800164c:	2b21      	cmp	r3, #33	; 0x21
 800164e:	d02a      	beq.n	80016a6 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001650:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001652:	b292      	uxth	r2, r2
 8001654:	2a00      	cmp	r2, #0
 8001656:	d1e4      	bne.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8001658:	2b21      	cmp	r3, #33	; 0x21
 800165a:	d1e2      	bne.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800165c:	6802      	ldr	r2, [r0, #0]
 800165e:	6853      	ldr	r3, [r2, #4]
 8001660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001664:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001666:	6802      	ldr	r2, [r0, #0]
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001670:	2300      	movs	r3, #0
 8001672:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001674:	2220      	movs	r2, #32
 8001676:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800167a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800167e:	f7ff ff70 	bl	8001562 <HAL_I2C_MemTxCpltCallback>
}
 8001682:	e7ce      	b.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001684:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 800168c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800168e:	3301      	adds	r3, #1
 8001690:	6503      	str	r3, [r0, #80]	; 0x50
 8001692:	e7c6      	b.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001694:	6802      	ldr	r2, [r0, #0]
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 800169e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80016a0:	3301      	adds	r3, #1
 80016a2:	6503      	str	r3, [r0, #80]	; 0x50
 80016a4:	e7bd      	b.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80016a8:	6803      	ldr	r3, [r0, #0]
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80016ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016b0:	3301      	adds	r3, #1
 80016b2:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80016b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	8543      	strh	r3, [r0, #42]	; 0x2a
 80016be:	e7b0      	b.n	8001622 <I2C_MemoryTransmit_TXE_BTF+0x20>

080016c0 <I2C_MasterTransmit_TXE>:
{
 80016c0:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016c6:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016c8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80016cc:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80016ce:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80016d0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80016d2:	b909      	cbnz	r1, 80016d8 <I2C_MasterTransmit_TXE+0x18>
 80016d4:	2b21      	cmp	r3, #33	; 0x21
 80016d6:	d004      	beq.n	80016e2 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80016d8:	2b21      	cmp	r3, #33	; 0x21
 80016da:	d03b      	beq.n	8001754 <I2C_MasterTransmit_TXE+0x94>
 80016dc:	2a40      	cmp	r2, #64	; 0x40
 80016de:	d037      	beq.n	8001750 <I2C_MasterTransmit_TXE+0x90>
}
 80016e0:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80016e2:	2c08      	cmp	r4, #8
 80016e4:	d004      	beq.n	80016f0 <I2C_MasterTransmit_TXE+0x30>
 80016e6:	2c20      	cmp	r4, #32
 80016e8:	d002      	beq.n	80016f0 <I2C_MasterTransmit_TXE+0x30>
 80016ea:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80016ee:	d119      	bne.n	8001724 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	6853      	ldr	r3, [r2, #4]
 80016f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016f8:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016fa:	6802      	ldr	r2, [r0, #0]
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001702:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001708:	2320      	movs	r3, #32
 800170a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800170e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b40      	cmp	r3, #64	; 0x40
 8001716:	d015      	beq.n	8001744 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800171e:	f7ff fea1 	bl	8001464 <HAL_I2C_MasterTxCpltCallback>
 8001722:	e7dd      	b.n	80016e0 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001724:	6802      	ldr	r2, [r0, #0]
 8001726:	6853      	ldr	r3, [r2, #4]
 8001728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800172c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800172e:	2311      	movs	r3, #17
 8001730:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001738:	2320      	movs	r3, #32
 800173a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800173e:	f7ff fe91 	bl	8001464 <HAL_I2C_MasterTxCpltCallback>
 8001742:	e7cd      	b.n	80016e0 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	2300      	movs	r3, #0
 8001746:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800174a:	f7ff ff0a 	bl	8001562 <HAL_I2C_MemTxCpltCallback>
 800174e:	e7c7      	b.n	80016e0 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001750:	2b22      	cmp	r3, #34	; 0x22
 8001752:	d1c5      	bne.n	80016e0 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8001754:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	b92b      	cbnz	r3, 8001766 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800175a:	6802      	ldr	r2, [r0, #0]
 800175c:	6853      	ldr	r3, [r2, #4]
 800175e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001762:	6053      	str	r3, [r2, #4]
 8001764:	e7bc      	b.n	80016e0 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001766:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d00c      	beq.n	800178a <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001770:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001778:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800177a:	3301      	adds	r3, #1
 800177c:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 800177e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8001788:	e7aa      	b.n	80016e0 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800178a:	f7ff ff3a 	bl	8001602 <I2C_MemoryTransmit_TXE_BTF>
 800178e:	e7a7      	b.n	80016e0 <I2C_MasterTransmit_TXE+0x20>

08001790 <I2C_MasterReceive_BTF>:
{
 8001790:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001792:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001794:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	2b04      	cmp	r3, #4
 800179a:	d014      	beq.n	80017c6 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 800179c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d022      	beq.n	80017ea <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 80017a4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d039      	beq.n	8001820 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ac:	6803      	ldr	r3, [r0, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80017b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017b6:	3301      	adds	r3, #1
 80017b8:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80017ba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80017c4:	e010      	b.n	80017e8 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	6853      	ldr	r3, [r2, #4]
 80017ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017ce:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d0:	6803      	ldr	r3, [r0, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80017d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017da:	3301      	adds	r3, #1
 80017dc:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80017de:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80017e8:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017ea:	6801      	ldr	r1, [r0, #0]
 80017ec:	684b      	ldr	r3, [r1, #4]
 80017ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f2:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80017f4:	2a04      	cmp	r2, #4
 80017f6:	d006      	beq.n	8001806 <I2C_MasterReceive_BTF+0x76>
 80017f8:	2a02      	cmp	r2, #2
 80017fa:	d004      	beq.n	8001806 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017fc:	6802      	ldr	r2, [r0, #0]
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001804:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001806:	6803      	ldr	r3, [r0, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800180c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800180e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8001814:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	3b01      	subs	r3, #1
 800181a:	b29b      	uxth	r3, r3
 800181c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800181e:	e7e3      	b.n	80017e8 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001820:	2a01      	cmp	r2, #1
 8001822:	d00b      	beq.n	800183c <I2C_MasterReceive_BTF+0xac>
 8001824:	2a10      	cmp	r2, #16
 8001826:	d009      	beq.n	800183c <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001828:	2a04      	cmp	r2, #4
 800182a:	d038      	beq.n	800189e <I2C_MasterReceive_BTF+0x10e>
 800182c:	2a02      	cmp	r2, #2
 800182e:	d036      	beq.n	800189e <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	6802      	ldr	r2, [r0, #0]
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e004      	b.n	8001846 <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183c:	6802      	ldr	r2, [r0, #0]
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001844:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001846:	6803      	ldr	r3, [r0, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800184c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800184e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001850:	1c53      	adds	r3, r2, #1
 8001852:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8001854:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29b      	uxth	r3, r3
 800185c:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8001864:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001866:	3301      	adds	r3, #1
 8001868:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800186a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29b      	uxth	r3, r3
 8001872:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001874:	6802      	ldr	r2, [r0, #0]
 8001876:	6853      	ldr	r3, [r2, #4]
 8001878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800187c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800187e:	2320      	movs	r3, #32
 8001880:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001884:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d00d      	beq.n	80018aa <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001894:	2312      	movs	r3, #18
 8001896:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001898:	f7ff fde5 	bl	8001466 <HAL_I2C_MasterRxCpltCallback>
 800189c:	e7a4      	b.n	80017e8 <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	6813      	ldr	r3, [r2, #0]
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e7cd      	b.n	8001846 <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80018b0:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80018b2:	f003 fbed 	bl	8005090 <HAL_I2C_MemRxCpltCallback>
 80018b6:	e797      	b.n	80017e8 <I2C_MasterReceive_BTF+0x58>

080018b8 <HAL_I2C_ErrorCallback>:
}
 80018b8:	4770      	bx	lr

080018ba <I2C_DMAError>:
{
 80018ba:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80018bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hi2c->hdmatx != NULL)
 80018be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018c0:	b10b      	cbz	r3, 80018c6 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80018c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018c8:	b10b      	cbz	r3, 80018ce <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ce:	6802      	ldr	r2, [r0, #0]
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018d6:	6013      	str	r3, [r2, #0]
  hi2c->XferCount       = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80018dc:	2220      	movs	r2, #32
 80018de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80018e2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80018e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 80018ee:	f7ff ffe3 	bl	80018b8 <HAL_I2C_ErrorCallback>
}
 80018f2:	bd08      	pop	{r3, pc}

080018f4 <I2C_DMAXferCplt>:
{
 80018f4:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80018f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018fe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001902:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001904:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	6842      	ldr	r2, [r0, #4]
 800190a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800190e:	6042      	str	r2, [r0, #4]
  if (hi2c->hdmatx != NULL)
 8001910:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001912:	b10a      	cbz	r2, 8001918 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8001914:	2000      	movs	r0, #0
 8001916:	6290      	str	r0, [r2, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8001918:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800191a:	b10a      	cbz	r2, 8001920 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800191c:	2000      	movs	r0, #0
 800191e:	6290      	str	r0, [r2, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8001920:	f003 0221 	and.w	r2, r3, #33	; 0x21
 8001924:	2a21      	cmp	r2, #33	; 0x21
 8001926:	d041      	beq.n	80019ac <I2C_DMAXferCplt+0xb8>
 8001928:	f003 0222 	and.w	r2, r3, #34	; 0x22
 800192c:	2a22      	cmp	r2, #34	; 0x22
 800192e:	d03b      	beq.n	80019a8 <I2C_DMAXferCplt+0xb4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8001930:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001934:	2b00      	cmp	r3, #0
 8001936:	d049      	beq.n	80019cc <I2C_DMAXferCplt+0xd8>
    if (hi2c->XferCount == (uint16_t)1)
 8001938:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d058      	beq.n	80019f2 <I2C_DMAXferCplt+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001948:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800194a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800194e:	d006      	beq.n	800195e <I2C_DMAXferCplt+0x6a>
 8001950:	2d08      	cmp	r5, #8
 8001952:	d004      	beq.n	800195e <I2C_DMAXferCplt+0x6a>
 8001954:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001958:	d001      	beq.n	800195e <I2C_DMAXferCplt+0x6a>
 800195a:	2d20      	cmp	r5, #32
 800195c:	d104      	bne.n	8001968 <I2C_DMAXferCplt+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	6813      	ldr	r3, [r2, #0]
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	6853      	ldr	r3, [r2, #4]
 800196c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001970:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	6853      	ldr	r3, [r2, #4]
 8001976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800197a:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d13b      	bne.n	80019fe <I2C_DMAXferCplt+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001986:	2320      	movs	r3, #32
 8001988:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800198c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	d037      	beq.n	8001a06 <I2C_DMAXferCplt+0x112>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001996:	2300      	movs	r3, #0
 8001998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800199c:	2312      	movs	r3, #18
 800199e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fd60 	bl	8001466 <HAL_I2C_MasterRxCpltCallback>
}
 80019a6:	e011      	b.n	80019cc <I2C_DMAXferCplt+0xd8>
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80019a8:	2920      	cmp	r1, #32
 80019aa:	d1c1      	bne.n	8001930 <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80019ac:	6821      	ldr	r1, [r4, #0]
 80019ae:	684a      	ldr	r2, [r1, #4]
 80019b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b4:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 80019b6:	2200      	movs	r2, #0
 80019b8:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80019ba:	2b29      	cmp	r3, #41	; 0x29
 80019bc:	d007      	beq.n	80019ce <I2C_DMAXferCplt+0xda>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80019be:	2b2a      	cmp	r3, #42	; 0x2a
 80019c0:	d00e      	beq.n	80019e0 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80019c2:	6822      	ldr	r2, [r4, #0]
 80019c4:	6853      	ldr	r3, [r2, #4]
 80019c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019ca:	6053      	str	r3, [r2, #4]
}
 80019cc:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019ce:	2321      	movs	r3, #33	; 0x21
 80019d0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80019d2:	2328      	movs	r3, #40	; 0x28
 80019d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff fd45 	bl	8001468 <HAL_I2C_SlaveTxCpltCallback>
 80019de:	e7f0      	b.n	80019c2 <I2C_DMAXferCplt+0xce>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019e0:	2322      	movs	r3, #34	; 0x22
 80019e2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80019e4:	2328      	movs	r3, #40	; 0x28
 80019e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fd63 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
 80019f0:	e7e7      	b.n	80019c2 <I2C_DMAXferCplt+0xce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f2:	6822      	ldr	r2, [r4, #0]
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e7a0      	b.n	8001940 <I2C_DMAXferCplt+0x4c>
      HAL_I2C_ErrorCallback(hi2c);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ff5a 	bl	80018b8 <HAL_I2C_ErrorCallback>
 8001a04:	e7e2      	b.n	80019cc <I2C_DMAXferCplt+0xd8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a0c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f003 fb3e 	bl	8005090 <HAL_I2C_MemRxCpltCallback>
 8001a14:	e7da      	b.n	80019cc <I2C_DMAXferCplt+0xd8>

08001a16 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b22      	cmp	r3, #34	; 0x22
 8001a1e:	d000      	beq.n	8001a22 <I2C_MasterReceive_RXNE+0xc>
 8001a20:	4770      	bx	lr
{
 8001a22:	b510      	push	{r4, lr}
 8001a24:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 8001a26:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a28:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d916      	bls.n	8001a5c <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a34:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001a36:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a38:	3301      	adds	r3, #1
 8001a3a:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8001a3c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001a46:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d000      	beq.n	8001a50 <I2C_MasterReceive_RXNE+0x3a>
}
 8001a4e:	bd10      	pop	{r4, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a50:	6802      	ldr	r2, [r0, #0]
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a58:	6053      	str	r3, [r2, #4]
 8001a5a:	e7f8      	b.n	8001a4e <I2C_MasterReceive_RXNE+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001a5c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001a5e:	2a02      	cmp	r2, #2
 8001a60:	d0f5      	beq.n	8001a4e <I2C_MasterReceive_RXNE+0x38>
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d8f3      	bhi.n	8001a4e <I2C_MasterReceive_RXNE+0x38>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001a66:	f7ff f82b 	bl	8000ac0 <I2C_WaitOnSTOPRequestThroughIT>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d12e      	bne.n	8001acc <I2C_MasterReceive_RXNE+0xb6>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	6822      	ldr	r2, [r4, #0]
 8001a70:	6813      	ldr	r3, [r2, #0]
 8001a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	6853      	ldr	r3, [r2, #4]
 8001a7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a80:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001a90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001aa0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b40      	cmp	r3, #64	; 0x40
 8001aa8:	d008      	beq.n	8001abc <I2C_MasterReceive_RXNE+0xa6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ab0:	2312      	movs	r3, #18
 8001ab2:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff fcd6 	bl	8001466 <HAL_I2C_MasterRxCpltCallback>
 8001aba:	e7c8      	b.n	8001a4e <I2C_MasterReceive_RXNE+0x38>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f003 fae3 	bl	8005090 <HAL_I2C_MemRxCpltCallback>
 8001aca:	e7c0      	b.n	8001a4e <I2C_MasterReceive_RXNE+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	6853      	ldr	r3, [r2, #4]
 8001ad0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad4:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001adc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001ae4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	2320      	movs	r3, #32
 8001af0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff fedc 	bl	80018b8 <HAL_I2C_ErrorCallback>
}
 8001b00:	e7a5      	b.n	8001a4e <I2C_MasterReceive_RXNE+0x38>

08001b02 <HAL_I2C_AbortCpltCallback>:
}
 8001b02:	4770      	bx	lr

08001b04 <I2C_DMAAbort>:
{
 8001b04:	b500      	push	{lr}
 8001b06:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001b0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b0e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001b12:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b14:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <I2C_DMAAbort+0xdc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	4932      	ldr	r1, [pc, #200]	; (8001be4 <I2C_DMAAbort+0xe0>)
 8001b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001b2a:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8001b2c:	9b01      	ldr	r3, [sp, #4]
 8001b2e:	b143      	cbz	r3, 8001b42 <I2C_DMAAbort+0x3e>
    count--;
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8001b36:	6803      	ldr	r3, [r0, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b3e:	d1f5      	bne.n	8001b2c <I2C_DMAAbort+0x28>
 8001b40:	e003      	b.n	8001b4a <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8001b4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b4c:	b10b      	cbz	r3, 8001b52 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8001b52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b54:	b10b      	cbz	r3, 8001b5a <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001b56:	2100      	movs	r1, #0
 8001b58:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b5a:	6801      	ldr	r1, [r0, #0]
 8001b5c:	680b      	ldr	r3, [r1, #0]
 8001b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b62:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8001b68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b6a:	b10b      	cbz	r3, 8001b70 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8001b70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b72:	b10b      	cbz	r3, 8001b78 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001b74:	2100      	movs	r1, #0
 8001b76:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8001b78:	6801      	ldr	r1, [r0, #0]
 8001b7a:	680b      	ldr	r3, [r1, #0]
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b60      	cmp	r3, #96	; 0x60
 8001b8a:	d00e      	beq.n	8001baa <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b8c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001b90:	2a28      	cmp	r2, #40	; 0x28
 8001b92:	d014      	beq.n	8001bbe <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	2320      	movs	r3, #32
 8001b96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8001ba0:	f7ff fe8a 	bl	80018b8 <HAL_I2C_ErrorCallback>
}
 8001ba4:	b003      	add	sp, #12
 8001ba6:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001baa:	2320      	movs	r3, #32
 8001bac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001bb6:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001bb8:	f7ff ffa3 	bl	8001b02 <HAL_I2C_AbortCpltCallback>
 8001bbc:	e7f2      	b.n	8001ba4 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8001bbe:	6802      	ldr	r2, [r0, #0]
 8001bc0:	6813      	ldr	r3, [r2, #0]
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc8:	6802      	ldr	r2, [r0, #0]
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd0:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001bd6:	2328      	movs	r3, #40	; 0x28
 8001bd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001bdc:	e7e0      	b.n	8001ba0 <I2C_DMAAbort+0x9c>
 8001bde:	bf00      	nop
 8001be0:	20000014 	.word	0x20000014
 8001be4:	14f8b589 	.word	0x14f8b589

08001be8 <I2C_ITError>:
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8001bf2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001bf6:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001bf8:	2a10      	cmp	r2, #16
 8001bfa:	d035      	beq.n	8001c68 <I2C_ITError+0x80>
 8001bfc:	2a40      	cmp	r2, #64	; 0x40
 8001bfe:	d033      	beq.n	8001c68 <I2C_ITError+0x80>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c00:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8001c04:	2a28      	cmp	r2, #40	; 0x28
 8001c06:	d037      	beq.n	8001c78 <I2C_ITError+0x90>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	6852      	ldr	r2, [r2, #4]
 8001c0c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001c10:	d107      	bne.n	8001c22 <I2C_ITError+0x3a>
 8001c12:	2b60      	cmp	r3, #96	; 0x60
 8001c14:	d005      	beq.n	8001c22 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	2320      	movs	r3, #32
 8001c18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001c2e:	d047      	beq.n	8001cc0 <I2C_ITError+0xd8>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001c3e:	2a01      	cmp	r2, #1
 8001c40:	d020      	beq.n	8001c84 <I2C_ITError+0x9c>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001c42:	4a44      	ldr	r2, [pc, #272]	; (8001d54 <I2C_ITError+0x16c>)
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001c46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c48:	f7fe fb80 	bl	800034c <HAL_DMA_Abort_IT>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d049      	beq.n	8001ce4 <I2C_ITError+0xfc>
        __HAL_I2C_DISABLE(hi2c);
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	6813      	ldr	r3, [r2, #0]
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c60:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c64:	4798      	blx	r3
 8001c66:	e03d      	b.n	8001ce4 <I2C_ITError+0xfc>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001c68:	2b22      	cmp	r3, #34	; 0x22
 8001c6a:	d1c9      	bne.n	8001c00 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c6c:	6821      	ldr	r1, [r4, #0]
 8001c6e:	680a      	ldr	r2, [r1, #0]
 8001c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c74:	600a      	str	r2, [r1, #0]
 8001c76:	e7c3      	b.n	8001c00 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c7c:	2328      	movs	r3, #40	; 0x28
 8001c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001c82:	e7d0      	b.n	8001c26 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c86:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <I2C_ITError+0x16c>)
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001c8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c8c:	f7fe fb5e 	bl	800034c <HAL_DMA_Abort_IT>
 8001c90:	b340      	cbz	r0, 8001ce4 <I2C_ITError+0xfc>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c9a:	d005      	beq.n	8001ca8 <I2C_ITError+0xc0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ca0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8001ca8:	6822      	ldr	r2, [r4, #0]
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001cb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001cbc:	4798      	blx	r3
 8001cbe:	e011      	b.n	8001ce4 <I2C_ITError+0xfc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001cc0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	2a60      	cmp	r2, #96	; 0x60
 8001cc8:	d01f      	beq.n	8001d0a <I2C_ITError+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001cd0:	d005      	beq.n	8001cde <I2C_ITError+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cda:	3301      	adds	r3, #1
 8001cdc:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fdea 	bl	80018b8 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8001ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8001ce6:	f013 0f0f 	tst.w	r3, #15
 8001cea:	d004      	beq.n	8001cf6 <I2C_ITError+0x10e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	6853      	ldr	r3, [r2, #4]
 8001cf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf4:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8001cf6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001cfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cfe:	f012 0f04 	tst.w	r2, #4
 8001d02:	d001      	beq.n	8001d08 <I2C_ITError+0x120>
 8001d04:	2b28      	cmp	r3, #40	; 0x28
 8001d06:	d018      	beq.n	8001d3a <I2C_ITError+0x152>
}
 8001d08:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d10:	2200      	movs	r2, #0
 8001d12:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d1a:	d005      	beq.n	8001d28 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d20:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff fee5 	bl	8001b02 <HAL_I2C_AbortCpltCallback>
 8001d38:	e7d4      	b.n	8001ce4 <I2C_ITError+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <I2C_ITError+0x170>)
 8001d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001d42:	2220      	movs	r2, #32
 8001d44:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff fc07 	bl	8001560 <HAL_I2C_ListenCpltCallback>
}
 8001d52:	e7d9      	b.n	8001d08 <I2C_ITError+0x120>
 8001d54:	08001b05 	.word	0x08001b05
 8001d58:	ffff0000 	.word	0xffff0000

08001d5c <I2C_Slave_STOPF>:
{
 8001d5c:	b530      	push	{r4, r5, lr}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d62:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8001d66:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d68:	6802      	ldr	r2, [r0, #0]
 8001d6a:	6853      	ldr	r3, [r2, #4]
 8001d6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d70:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001d72:	2300      	movs	r3, #0
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	6803      	ldr	r3, [r0, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	9201      	str	r2, [sp, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d86:	6802      	ldr	r2, [r0, #0]
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d90:	6803      	ldr	r3, [r0, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001d98:	d038      	beq.n	8001e0c <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d9a:	2d22      	cmp	r5, #34	; 0x22
 8001d9c:	d021      	beq.n	8001de2 <I2C_Slave_STOPF+0x86>
 8001d9e:	2d2a      	cmp	r5, #42	; 0x2a
 8001da0:	d01f      	beq.n	8001de2 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001da2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	6852      	ldr	r2, [r2, #4]
 8001da8:	b292      	uxth	r2, r2
 8001daa:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001dac:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001dae:	b292      	uxth	r2, r2
 8001db0:	b11a      	cbz	r2, 8001dba <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001db2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001db4:	f042 0204 	orr.w	r2, r2, #4
 8001db8:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001dc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dc4:	f7fe fbb0 	bl	8000528 <HAL_DMA_GetState>
 8001dc8:	2801      	cmp	r0, #1
 8001dca:	d01f      	beq.n	8001e0c <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dce:	4a44      	ldr	r2, [pc, #272]	; (8001ee0 <I2C_Slave_STOPF+0x184>)
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001dd2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dd4:	f7fe faba 	bl	800034c <HAL_DMA_Abort_IT>
 8001dd8:	b1c0      	cbz	r0, 8001e0c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001dda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001ddc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001dde:	4798      	blx	r3
 8001de0:	e014      	b.n	8001e0c <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001de2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	6852      	ldr	r2, [r2, #4]
 8001de8:	b292      	uxth	r2, r2
 8001dea:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001dec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dee:	b292      	uxth	r2, r2
 8001df0:	b11a      	cbz	r2, 8001dfa <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001df2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001df4:	f042 0204 	orr.w	r2, r2, #4
 8001df8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e00:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001e02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e04:	f7fe fb90 	bl	8000528 <HAL_DMA_GetState>
 8001e08:	2801      	cmp	r0, #1
 8001e0a:	d142      	bne.n	8001e92 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8001e0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b333      	cbz	r3, 8001e60 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	f012 0f04 	tst.w	r2, #4
 8001e1a:	d00a      	beq.n	8001e32 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e20:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e24:	3301      	adds	r3, #1
 8001e26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e3a:	d00a      	beq.n	8001e52 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e40:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8001e52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b11b      	cbz	r3, 8001e60 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e62:	bb13      	cbnz	r3, 8001eaa <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e64:	2d2a      	cmp	r5, #42	; 0x2a
 8001e66:	d025      	beq.n	8001eb4 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b28      	cmp	r3, #40	; 0x28
 8001e70:	d029      	beq.n	8001ec6 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e74:	2b22      	cmp	r3, #34	; 0x22
 8001e76:	d001      	beq.n	8001e7c <I2C_Slave_STOPF+0x120>
 8001e78:	2d22      	cmp	r5, #34	; 0x22
 8001e7a:	d119      	bne.n	8001eb0 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	2220      	movs	r2, #32
 8001e82:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fb13 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e90:	e00e      	b.n	8001eb0 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <I2C_Slave_STOPF+0x184>)
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001e98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e9a:	f7fe fa57 	bl	800034c <HAL_DMA_Abort_IT>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d0b4      	beq.n	8001e0c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ea2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ea4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ea6:	4798      	blx	r3
 8001ea8:	e7b0      	b.n	8001e0c <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff fe9c 	bl	8001be8 <I2C_ITError>
}
 8001eb0:	b003      	add	sp, #12
 8001eb2:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001eb8:	2328      	movs	r3, #40	; 0x28
 8001eba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff faf9 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
 8001ec4:	e7d0      	b.n	8001e68 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <I2C_Slave_STOPF+0x188>)
 8001ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff fb41 	bl	8001560 <HAL_I2C_ListenCpltCallback>
 8001ede:	e7e7      	b.n	8001eb0 <I2C_Slave_STOPF+0x154>
 8001ee0:	08001b05 	.word	0x08001b05
 8001ee4:	ffff0000 	.word	0xffff0000

08001ee8 <HAL_I2C_EV_IRQHandler>:
{
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ef0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ef2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001ef6:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ef8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001efc:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d013      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x42>
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d011      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07a      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f0c:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8001f0e:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f10:	f013 0f02 	tst.w	r3, #2
 8001f14:	d078      	beq.n	8002008 <HAL_I2C_EV_IRQHandler+0x120>
 8001f16:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001f1a:	d075      	beq.n	8002008 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f1e:	b103      	cbz	r3, 8001f22 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f20:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff faef 	bl	8001506 <I2C_Slave_ADDR>
}
 8001f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f2a:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f2e:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f30:	f011 0701 	ands.w	r7, r1, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_I2C_EV_IRQHandler+0x5a>
 8001f36:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8001f3a:	d0f5      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
 8001f3c:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8001f40:	d0f2      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f42:	b117      	cbz	r7, 8001f4a <HAL_I2C_EV_IRQHandler+0x62>
 8001f44:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001f48:	d129      	bne.n	8001f9e <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f4a:	f011 0f08 	tst.w	r1, #8
 8001f4e:	d002      	beq.n	8001f56 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f50:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001f54:	d12a      	bne.n	8001fac <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f56:	f011 0f02 	tst.w	r1, #2
 8001f5a:	d002      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0x7a>
 8001f5c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001f60:	d128      	bne.n	8001fb4 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f62:	f01c 0f04 	tst.w	ip, #4
 8001f66:	d031      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f68:	6852      	ldr	r2, [r2, #4]
 8001f6a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001f6e:	d1db      	bne.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f70:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f74:	d005      	beq.n	8001f82 <HAL_I2C_EV_IRQHandler+0x9a>
 8001f76:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001f7a:	d002      	beq.n	8001f82 <HAL_I2C_EV_IRQHandler+0x9a>
 8001f7c:	f011 0f04 	tst.w	r1, #4
 8001f80:	d01c      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f82:	f011 0f04 	tst.w	r1, #4
 8001f86:	d0cf      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
 8001f88:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001f8c:	d0cc      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f8e:	2821      	cmp	r0, #33	; 0x21
 8001f90:	d018      	beq.n	8001fc4 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d1c8      	bne.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff fb33 	bl	8001602 <I2C_MemoryTransmit_TXE_BTF>
 8001f9c:	e7c4      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7fe fdcb 	bl	8000b3a <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7fe fbf7 	bl	8000798 <I2C_Master_SB>
 8001faa:	e7bd      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7fe fc47 	bl	8000840 <I2C_Master_ADD10>
 8001fb2:	e7b9      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7fe fc58 	bl	800086a <I2C_Master_ADDR>
 8001fba:	e7b5      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fb7f 	bl	80016c0 <I2C_MasterTransmit_TXE>
 8001fc2:	e7b1      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff facd 	bl	8001564 <I2C_MasterTransmit_BTF>
 8001fca:	e7ad      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fcc:	6853      	ldr	r3, [r2, #4]
 8001fce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001fd2:	d1a9      	bne.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fd4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001fd8:	d005      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0xfe>
 8001fda:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001fde:	d002      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0xfe>
 8001fe0:	f011 0f04 	tst.w	r1, #4
 8001fe4:	d009      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe6:	f011 0f04 	tst.w	r1, #4
 8001fea:	d09d      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
 8001fec:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001ff0:	d09a      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff fbcc 	bl	8001790 <I2C_MasterReceive_BTF>
 8001ff8:	e796      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff fd0b 	bl	8001a16 <I2C_MasterReceive_RXNE>
 8002000:	e792      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002002:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002004:	6953      	ldr	r3, [r2, #20]
 8002006:	e783      	b.n	8001f10 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002008:	f013 0f10 	tst.w	r3, #16
 800200c:	d002      	beq.n	8002014 <HAL_I2C_EV_IRQHandler+0x12c>
 800200e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002012:	d118      	bne.n	8002046 <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002014:	2821      	cmp	r0, #33	; 0x21
 8002016:	d01a      	beq.n	800204e <HAL_I2C_EV_IRQHandler+0x166>
 8002018:	2829      	cmp	r0, #41	; 0x29
 800201a:	d018      	beq.n	800204e <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800201c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002020:	d005      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0x146>
 8002022:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002026:	d002      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0x146>
 8002028:	f013 0f04 	tst.w	r3, #4
 800202c:	d028      	beq.n	8002080 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202e:	f013 0f04 	tst.w	r3, #4
 8002032:	f43f af79 	beq.w	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
 8002036:	f415 7f00 	tst.w	r5, #512	; 0x200
 800203a:	f43f af75 	beq.w	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 800203e:	4620      	mov	r0, r4
 8002040:	f7fe fd2e 	bl	8000aa0 <I2C_SlaveReceive_BTF>
      }
 8002044:	e770      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8002046:	4620      	mov	r0, r4
 8002048:	f7ff fe88 	bl	8001d5c <I2C_Slave_STOPF>
 800204c:	e76c      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800204e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002052:	d005      	beq.n	8002060 <HAL_I2C_EV_IRQHandler+0x178>
 8002054:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002058:	d002      	beq.n	8002060 <HAL_I2C_EV_IRQHandler+0x178>
 800205a:	f013 0f04 	tst.w	r3, #4
 800205e:	d00b      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002060:	f013 0f04 	tst.w	r3, #4
 8002064:	f43f af60 	beq.w	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
 8002068:	f415 7f00 	tst.w	r5, #512	; 0x200
 800206c:	f43f af5c 	beq.w	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8002070:	4620      	mov	r0, r4
 8002072:	f7fe fd05 	bl	8000a80 <I2C_SlaveTransmit_BTF>
 8002076:	e757      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8002078:	4620      	mov	r0, r4
 800207a:	f7ff f9f6 	bl	800146a <I2C_SlaveTransmit_TXE>
 800207e:	e753      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff fa19 	bl	80014b8 <I2C_SlaveReceive_RXNE>
 8002086:	e74f      	b.n	8001f28 <HAL_I2C_EV_IRQHandler+0x40>

08002088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002088:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <RCC_Delay+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <RCC_Delay+0x28>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0a5b      	lsrs	r3, r3, #9
 8002096:	fb00 f303 	mul.w	r3, r0, r3
 800209a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800209c:	bf00      	nop
  }
  while (Delay --);
 800209e:	9b01      	ldr	r3, [sp, #4]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	9201      	str	r2, [sp, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f9      	bne.n	800209c <RCC_Delay+0x14>
}
 80020a8:	b002      	add	sp, #8
 80020aa:	4770      	bx	lr
 80020ac:	20000014 	.word	0x20000014
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80020b4:	2800      	cmp	r0, #0
 80020b6:	f000 81f1 	beq.w	800249c <HAL_RCC_OscConfig+0x3e8>
{
 80020ba:	b570      	push	{r4, r5, r6, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c0:	6803      	ldr	r3, [r0, #0]
 80020c2:	f013 0f01 	tst.w	r3, #1
 80020c6:	d02c      	beq.n	8002122 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4baa      	ldr	r3, [pc, #680]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d01d      	beq.n	8002110 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d4:	4ba7      	ldr	r3, [pc, #668]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d012      	beq.n	8002106 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	6863      	ldr	r3, [r4, #4]
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e6:	d041      	beq.n	800216c <HAL_RCC_OscConfig+0xb8>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d155      	bne.n	8002198 <HAL_RCC_OscConfig+0xe4>
 80020ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e037      	b.n	8002176 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002106:	4b9b      	ldr	r3, [pc, #620]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800210e:	d0e7      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4b98      	ldr	r3, [pc, #608]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002118:	d003      	beq.n	8002122 <HAL_RCC_OscConfig+0x6e>
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 81bf 	beq.w	80024a0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	f013 0f02 	tst.w	r3, #2
 8002128:	d075      	beq.n	8002216 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f013 0f0c 	tst.w	r3, #12
 8002132:	d05f      	beq.n	80021f4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002134:	4b8f      	ldr	r3, [pc, #572]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d054      	beq.n	80021ea <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	6923      	ldr	r3, [r4, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8089 	beq.w	800225a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8002148:	4b8b      	ldr	r3, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x2c4>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800214e:	f7fe f81d 	bl	800018c <HAL_GetTick>
 8002152:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	4b87      	ldr	r3, [pc, #540]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f013 0f02 	tst.w	r3, #2
 800215c:	d174      	bne.n	8002248 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215e:	f7fe f815 	bl	800018c <HAL_GetTick>
 8002162:	1b40      	subs	r0, r0, r5
 8002164:	2802      	cmp	r0, #2
 8002166:	d9f5      	bls.n	8002154 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002168:	2003      	movs	r0, #3
 800216a:	e19e      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216c:	4a81      	ldr	r2, [pc, #516]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	b343      	cbz	r3, 80021cc <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800217a:	f7fe f807 	bl	800018c <HAL_GetTick>
 800217e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002180:	4b7c      	ldr	r3, [pc, #496]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002188:	d1cb      	bne.n	8002122 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218a:	f7fd ffff 	bl	800018c <HAL_GetTick>
 800218e:	1b40      	subs	r0, r0, r5
 8002190:	2864      	cmp	r0, #100	; 0x64
 8002192:	d9f5      	bls.n	8002180 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002194:	2003      	movs	r0, #3
 8002196:	e188      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_OscConfig+0xfe>
 800219e:	4b75      	ldr	r3, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e7e1      	b.n	8002176 <HAL_RCC_OscConfig+0xc2>
 80021b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021b6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e7d4      	b.n	8002176 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80021cc:	f7fd ffde 	bl	800018c <HAL_GetTick>
 80021d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021da:	d0a2      	beq.n	8002122 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fd ffd6 	bl	800018c <HAL_GetTick>
 80021e0:	1b40      	subs	r0, r0, r5
 80021e2:	2864      	cmp	r0, #100	; 0x64
 80021e4:	d9f5      	bls.n	80021d2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80021e6:	2003      	movs	r0, #3
 80021e8:	e15f      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ea:	4b62      	ldr	r3, [pc, #392]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021f2:	d1a5      	bne.n	8002140 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f4:	4b5f      	ldr	r3, [pc, #380]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f013 0f02 	tst.w	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_OscConfig+0x152>
 80021fe:	6923      	ldr	r3, [r4, #16]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 814f 	bne.w	80024a4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002208:	6813      	ldr	r3, [r2, #0]
 800220a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800220e:	6961      	ldr	r1, [r4, #20]
 8002210:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002214:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f013 0f08 	tst.w	r3, #8
 800221c:	d032      	beq.n	8002284 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221e:	69a3      	ldr	r3, [r4, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d045      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <HAL_RCC_OscConfig+0x2c8>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800222a:	f7fd ffaf 	bl	800018c <HAL_GetTick>
 800222e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f013 0f02 	tst.w	r3, #2
 8002238:	d121      	bne.n	800227e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7fd ffa7 	bl	800018c <HAL_GetTick>
 800223e:	1b40      	subs	r0, r0, r5
 8002240:	2802      	cmp	r0, #2
 8002242:	d9f5      	bls.n	8002230 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8002244:	2003      	movs	r0, #3
 8002246:	e130      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002250:	6961      	ldr	r1, [r4, #20]
 8002252:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e7dd      	b.n	8002216 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_OscConfig+0x2c4>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002260:	f7fd ff94 	bl	800018c <HAL_GetTick>
 8002264:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f013 0f02 	tst.w	r3, #2
 800226e:	d0d2      	beq.n	8002216 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fd ff8c 	bl	800018c <HAL_GetTick>
 8002274:	1b40      	subs	r0, r0, r5
 8002276:	2802      	cmp	r0, #2
 8002278:	d9f5      	bls.n	8002266 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800227a:	2003      	movs	r0, #3
 800227c:	e115      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff ff02 	bl	8002088 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	f013 0f04 	tst.w	r3, #4
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002296:	d11d      	bne.n	80022d4 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a0:	61da      	str	r2, [r3, #28]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022ac:	2501      	movs	r5, #1
 80022ae:	e012      	b.n	80022d6 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_RCC_OscConfig+0x2c8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022b6:	f7fd ff69 	bl	800018c <HAL_GetTick>
 80022ba:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f013 0f02 	tst.w	r3, #2
 80022c4:	d0de      	beq.n	8002284 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c6:	f7fd ff61 	bl	800018c <HAL_GetTick>
 80022ca:	1b40      	subs	r0, r0, r5
 80022cc:	2802      	cmp	r0, #2
 80022ce:	d9f5      	bls.n	80022bc <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80022d0:	2003      	movs	r0, #3
 80022d2:	e0ea      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80022d4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x2cc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022de:	d011      	beq.n	8002304 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	68e3      	ldr	r3, [r4, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d022      	beq.n	800232c <HAL_RCC_OscConfig+0x278>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d138      	bne.n	800235c <HAL_RCC_OscConfig+0x2a8>
 80022ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	621a      	str	r2, [r3, #32]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	f022 0204 	bic.w	r2, r2, #4
 8002300:	621a      	str	r2, [r3, #32]
 8002302:	e018      	b.n	8002336 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002304:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x2cc>)
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800230e:	f7fd ff3d 	bl	800018c <HAL_GetTick>
 8002312:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x2cc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800231c:	d1e0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fd ff35 	bl	800018c <HAL_GetTick>
 8002322:	1b80      	subs	r0, r0, r6
 8002324:	2864      	cmp	r0, #100	; 0x64
 8002326:	d9f5      	bls.n	8002314 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8002328:	2003      	movs	r0, #3
 800232a:	e0be      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 800232e:	6a13      	ldr	r3, [r2, #32]
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	68e3      	ldr	r3, [r4, #12]
 8002338:	b373      	cbz	r3, 8002398 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800233a:	f7fd ff27 	bl	800018c <HAL_GetTick>
 800233e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f013 0f02 	tst.w	r3, #2
 8002348:	d137      	bne.n	80023ba <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fd ff1f 	bl	800018c <HAL_GetTick>
 800234e:	1b80      	subs	r0, r0, r6
 8002350:	f241 3388 	movw	r3, #5000	; 0x1388
 8002354:	4298      	cmp	r0, r3
 8002356:	d9f3      	bls.n	8002340 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8002358:	2003      	movs	r0, #3
 800235a:	e0a6      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	2b05      	cmp	r3, #5
 800235e:	d011      	beq.n	8002384 <HAL_RCC_OscConfig+0x2d0>
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_RCC_OscConfig+0x2c0>)
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	621a      	str	r2, [r3, #32]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	f022 0204 	bic.w	r2, r2, #4
 8002370:	621a      	str	r2, [r3, #32]
 8002372:	e7e0      	b.n	8002336 <HAL_RCC_OscConfig+0x282>
 8002374:	40021000 	.word	0x40021000
 8002378:	42420000 	.word	0x42420000
 800237c:	42420480 	.word	0x42420480
 8002380:	40007000 	.word	0x40007000
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	f042 0204 	orr.w	r2, r2, #4
 800238c:	621a      	str	r2, [r3, #32]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	e7ce      	b.n	8002336 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8002398:	f7fd fef8 	bl	800018c <HAL_GetTick>
 800239c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f013 0f02 	tst.w	r3, #2
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7fd fef0 	bl	800018c <HAL_GetTick>
 80023ac:	1b80      	subs	r0, r0, r6
 80023ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80023b2:	4298      	cmp	r0, r3
 80023b4:	d9f3      	bls.n	800239e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
 80023b8:	e077      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80023ba:	b9e5      	cbnz	r5, 80023f6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023bc:	69e3      	ldr	r3, [r4, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d072      	beq.n	80024a8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c2:	4a3e      	ldr	r2, [pc, #248]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 80023c4:	6852      	ldr	r2, [r2, #4]
 80023c6:	f002 020c 	and.w	r2, r2, #12
 80023ca:	2a08      	cmp	r2, #8
 80023cc:	d056      	beq.n	800247c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d017      	beq.n	8002402 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_OscConfig+0x40c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023d8:	f7fd fed8 	bl	800018c <HAL_GetTick>
 80023dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023e6:	d047      	beq.n	8002478 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fd fed0 	bl	800018c <HAL_GetTick>
 80023ec:	1b00      	subs	r0, r0, r4
 80023ee:	2802      	cmp	r0, #2
 80023f0:	d9f5      	bls.n	80023de <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
 80023f4:	e059      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4a31      	ldr	r2, [pc, #196]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 80023f8:	69d3      	ldr	r3, [r2, #28]
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fe:	61d3      	str	r3, [r2, #28]
 8002400:	e7dc      	b.n	80023bc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_RCC_OscConfig+0x40c>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002408:	f7fd fec0 	bl	800018c <HAL_GetTick>
 800240c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002416:	d006      	beq.n	8002426 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fd feb8 	bl	800018c <HAL_GetTick>
 800241c:	1b40      	subs	r0, r0, r5
 800241e:	2802      	cmp	r0, #2
 8002420:	d9f5      	bls.n	800240e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002422:	2003      	movs	r0, #3
 8002424:	e041      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002426:	6a23      	ldr	r3, [r4, #32]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d01a      	beq.n	8002464 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242e:	4923      	ldr	r1, [pc, #140]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 8002430:	684b      	ldr	r3, [r1, #4]
 8002432:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002436:	6a22      	ldr	r2, [r4, #32]
 8002438:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800243a:	4302      	orrs	r2, r0
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <HAL_RCC_OscConfig+0x40c>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002446:	f7fd fea1 	bl	800018c <HAL_GetTick>
 800244a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002454:	d10e      	bne.n	8002474 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fd fe99 	bl	800018c <HAL_GetTick>
 800245a:	1b00      	subs	r0, r0, r4
 800245c:	2802      	cmp	r0, #2
 800245e:	d9f5      	bls.n	800244c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002460:	2003      	movs	r0, #3
 8002462:	e022      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002464:	4a15      	ldr	r2, [pc, #84]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 8002466:	6853      	ldr	r3, [r2, #4]
 8002468:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800246c:	68a1      	ldr	r1, [r4, #8]
 800246e:	430b      	orrs	r3, r1
 8002470:	6053      	str	r3, [r2, #4]
 8002472:	e7dc      	b.n	800242e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002474:	2000      	movs	r0, #0
 8002476:	e018      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
 8002478:	2000      	movs	r0, #0
 800247a:	e016      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	2b01      	cmp	r3, #1
 800247e:	d016      	beq.n	80024ae <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x408>)
 8002482:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002484:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002488:	6a22      	ldr	r2, [r4, #32]
 800248a:	4291      	cmp	r1, r2
 800248c:	d111      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800248e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002492:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002494:	4293      	cmp	r3, r2
 8002496:	d10e      	bne.n	80024b6 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002498:	2000      	movs	r0, #0
 800249a:	e006      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800249c:	2001      	movs	r0, #1
}
 800249e:	4770      	bx	lr
        return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
 80024a2:	e002      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80024a8:	2000      	movs	r0, #0
}
 80024aa:	b002      	add	sp, #8
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
 80024b0:	e7fb      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	e7f9      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
 80024b6:	2001      	movs	r0, #1
 80024b8:	e7f7      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	42420060 	.word	0x42420060

080024c4 <HAL_RCC_GetSysClockFreq>:
{
 80024c4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCC_GetSysClockFreq+0x5c>)
 80024c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ca:	f10d 0c18 	add.w	ip, sp, #24
 80024ce:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024d2:	f240 2301 	movw	r3, #513	; 0x201
 80024d6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_GetSysClockFreq+0x60>)
 80024dc:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	2a08      	cmp	r2, #8
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80024e6:	4810      	ldr	r0, [pc, #64]	; (8002528 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80024e8:	b006      	add	sp, #24
 80024ea:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ec:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80024f0:	4462      	add	r2, ip
 80024f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_GetSysClockFreq+0x60>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002504:	4463      	add	r3, ip
 8002506:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <HAL_RCC_GetSysClockFreq+0x64>)
 800250c:	fb00 f002 	mul.w	r0, r0, r2
 8002510:	fbb0 f0f3 	udiv	r0, r0, r3
 8002514:	e7e8      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <HAL_RCC_GetSysClockFreq+0x68>)
 8002518:	fb00 f002 	mul.w	r0, r0, r2
 800251c:	e7e4      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x24>
 800251e:	bf00      	nop
 8002520:	08006b18 	.word	0x08006b18
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	003d0900 	.word	0x003d0900

08002530 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002530:	2800      	cmp	r0, #0
 8002532:	f000 80a0 	beq.w	8002676 <HAL_RCC_ClockConfig+0x146>
{
 8002536:	b570      	push	{r4, r5, r6, lr}
 8002538:	460d      	mov	r5, r1
 800253a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x158>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	428b      	cmp	r3, r1
 8002546:	d20b      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_RCC_ClockConfig+0x158>)
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	f023 0307 	bic.w	r3, r3, #7
 8002550:	430b      	orrs	r3, r1
 8002552:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	428b      	cmp	r3, r1
 800255c:	f040 808d 	bne.w	800267a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f013 0f02 	tst.w	r3, #2
 8002566:	d017      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	f013 0f04 	tst.w	r3, #4
 800256c:	d004      	beq.n	8002578 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256e:	4a47      	ldr	r2, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 8002570:	6853      	ldr	r3, [r2, #4]
 8002572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002576:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	f013 0f08 	tst.w	r3, #8
 800257e:	d004      	beq.n	800258a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4a42      	ldr	r2, [pc, #264]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 8002582:	6853      	ldr	r3, [r2, #4]
 8002584:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002588:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 800258c:	6853      	ldr	r3, [r2, #4]
 800258e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002592:	68a1      	ldr	r1, [r4, #8]
 8002594:	430b      	orrs	r3, r1
 8002596:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f013 0f01 	tst.w	r3, #1
 800259e:	d031      	beq.n	8002604 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d020      	beq.n	80025e8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d025      	beq.n	80025f6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	f012 0f02 	tst.w	r2, #2
 80025b2:	d064      	beq.n	800267e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b4:	4935      	ldr	r1, [pc, #212]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 80025b6:	684a      	ldr	r2, [r1, #4]
 80025b8:	f022 0203 	bic.w	r2, r2, #3
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80025c0:	f7fd fde4 	bl	800018c <HAL_GetTick>
 80025c4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	6862      	ldr	r2, [r4, #4]
 80025d0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fd fdd9 	bl	800018c <HAL_GetTick>
 80025da:	1b80      	subs	r0, r0, r6
 80025dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80025e0:	4298      	cmp	r0, r3
 80025e2:	d9f0      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80025e4:	2003      	movs	r0, #3
 80025e6:	e045      	b.n	8002674 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e8:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80025f0:	d1e0      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	e03e      	b.n	8002674 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80025fe:	d1d9      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002600:	2001      	movs	r0, #1
 8002602:	e037      	b.n	8002674 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x158>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	42ab      	cmp	r3, r5
 800260e:	d90a      	bls.n	8002626 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_RCC_ClockConfig+0x158>)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	f023 0307 	bic.w	r3, r3, #7
 8002618:	432b      	orrs	r3, r5
 800261a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	42ab      	cmp	r3, r5
 8002624:	d12d      	bne.n	8002682 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	f013 0f04 	tst.w	r3, #4
 800262c:	d006      	beq.n	800263c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 8002630:	6853      	ldr	r3, [r2, #4]
 8002632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002636:	68e1      	ldr	r1, [r4, #12]
 8002638:	430b      	orrs	r3, r1
 800263a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f013 0f08 	tst.w	r3, #8
 8002642:	d007      	beq.n	8002654 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 8002646:	6853      	ldr	r3, [r2, #4]
 8002648:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800264c:	6921      	ldr	r1, [r4, #16]
 800264e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002652:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002654:	f7ff ff36 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_RCC_ClockConfig+0x15c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x160>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	40d8      	lsrs	r0, r3
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x164>)
 8002668:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x168>)
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	f003 fa95 	bl	8005b9c <HAL_InitTick>
  return HAL_OK;
 8002672:	2000      	movs	r0, #0
}
 8002674:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
}
 8002678:	4770      	bx	lr
    return HAL_ERROR;
 800267a:	2001      	movs	r0, #1
 800267c:	e7fa      	b.n	8002674 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
 8002680:	e7f8      	b.n	8002674 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002682:	2001      	movs	r0, #1
 8002684:	e7f6      	b.n	8002674 <HAL_RCC_ClockConfig+0x144>
 8002686:	bf00      	nop
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	08006b00 	.word	0x08006b00
 8002694:	20000014 	.word	0x20000014
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_RCC_GetHCLKFreq>:
}
 800269c:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000014 	.word	0x20000014

080026a8 <HAL_RCC_GetPCLK1Freq>:
{
 80026a8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026aa:	f7ff fff7 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80026ba:	40d8      	lsrs	r0, r3
 80026bc:	bd08      	pop	{r3, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08006b10 	.word	0x08006b10

080026c8 <HAL_RCC_GetPCLK2Freq>:
{
 80026c8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ca:	f7ff ffe7 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026d6:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80026da:	40d8      	lsrs	r0, r3
 80026dc:	bd08      	pop	{r3, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08006b10 	.word	0x08006b10

080026e8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026e8:	230f      	movs	r3, #15
 80026ea:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_GetClockConfig+0x34>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	f002 0203 	and.w	r2, r2, #3
 80026f4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80026fc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002704:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800270e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_RCC_GetClockConfig+0x38>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	600b      	str	r3, [r1, #0]
}
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000
 8002720:	40022000 	.word	0x40022000

08002724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002724:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002726:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002728:	6a05      	ldr	r5, [r0, #32]
 800272a:	f025 0501 	bic.w	r5, r5, #1
 800272e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002730:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002732:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002736:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800273e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002740:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002742:	6203      	str	r3, [r0, #32]
}
 8002744:	bc30      	pop	{r4, r5}
 8002746:	4770      	bx	lr

08002748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002748:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274a:	6a05      	ldr	r5, [r0, #32]
 800274c:	f025 0510 	bic.w	r5, r5, #16
 8002750:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002752:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002754:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002756:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800275a:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800275e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002762:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002766:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002768:	6203      	str	r3, [r0, #32]
}
 800276a:	bc30      	pop	{r4, r5}
 800276c:	4770      	bx	lr

0800276e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800276e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002774:	430b      	orrs	r3, r1
 8002776:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277a:	6083      	str	r3, [r0, #8]
}
 800277c:	4770      	bx	lr
	...

08002780 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002780:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d127      	bne.n	80027da <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002790:	6802      	ldr	r2, [r0, #0]
 8002792:	68d3      	ldr	r3, [r2, #12]
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279a:	6803      	ldr	r3, [r0, #0]
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_TIM_Base_Start_IT+0x64>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d010      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x44>
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d00d      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x44>
 80027a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x44>
 80027b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d005      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80027c0:	2000      	movs	r0, #0
 80027c2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	2a06      	cmp	r2, #6
 80027cc:	d007      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80027d6:	2000      	movs	r0, #0
 80027d8:	4770      	bx	lr
    return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
 80027dc:	4770      	bx	lr
  return HAL_OK;
 80027de:	2000      	movs	r0, #0
}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80027e8:	4770      	bx	lr

080027ea <HAL_TIM_IC_CaptureCallback>:
}
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_TriggerCallback>:
}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_IRQHandler>:
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f4:	6803      	ldr	r3, [r0, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	f012 0f02 	tst.w	r2, #2
 80027fc:	d011      	beq.n	8002822 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	f012 0f02 	tst.w	r2, #2
 8002804:	d00d      	beq.n	8002822 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002806:	f06f 0202 	mvn.w	r2, #2
 800280a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280c:	2301      	movs	r3, #1
 800280e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	6803      	ldr	r3, [r0, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f013 0f03 	tst.w	r3, #3
 8002818:	d070      	beq.n	80028fc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800281a:	f7ff ffe6 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	2300      	movs	r3, #0
 8002820:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	f012 0f04 	tst.w	r2, #4
 800282a:	d012      	beq.n	8002852 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	f012 0f04 	tst.w	r2, #4
 8002832:	d00e      	beq.n	8002852 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002834:	f06f 0204 	mvn.w	r2, #4
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283a:	2302      	movs	r3, #2
 800283c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002846:	d05f      	beq.n	8002908 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff ffce 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	2300      	movs	r3, #0
 8002850:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	f012 0f08 	tst.w	r2, #8
 800285a:	d012      	beq.n	8002882 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	f012 0f08 	tst.w	r2, #8
 8002862:	d00e      	beq.n	8002882 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002864:	f06f 0208 	mvn.w	r2, #8
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286a:	2304      	movs	r3, #4
 800286c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f013 0f03 	tst.w	r3, #3
 8002876:	d04e      	beq.n	8002916 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff ffb6 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	2300      	movs	r3, #0
 8002880:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	f012 0f10 	tst.w	r2, #16
 800288a:	d012      	beq.n	80028b2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	f012 0f10 	tst.w	r2, #16
 8002892:	d00e      	beq.n	80028b2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002894:	f06f 0210 	mvn.w	r2, #16
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289a:	2308      	movs	r3, #8
 800289c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80028a6:	d03d      	beq.n	8002924 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7ff ff9e 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	2300      	movs	r3, #0
 80028b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	f012 0f01 	tst.w	r2, #1
 80028ba:	d003      	beq.n	80028c4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	f012 0f01 	tst.w	r2, #1
 80028c2:	d136      	bne.n	8002932 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028d4:	d134      	bne.n	8002940 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028de:	d003      	beq.n	80028e8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028e6:	d132      	bne.n	800294e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	f012 0f20 	tst.w	r2, #32
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	f012 0f20 	tst.w	r2, #32
 80028f8:	d130      	bne.n	800295c <HAL_TIM_IRQHandler+0x16c>
}
 80028fa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fc:	f7ff ff74 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff ff73 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002906:	e78a      	b.n	800281e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff ff6d 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff ff6c 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002914:	e79b      	b.n	800284e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff ff66 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff ff65 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002922:	e7ac      	b.n	800287e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff ff5f 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff ff5e 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002930:	e7bd      	b.n	80028ae <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002932:	f06f 0201 	mvn.w	r2, #1
 8002936:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002938:	4620      	mov	r0, r4
 800293a:	f002 fbb5 	bl	80050a8 <HAL_TIM_PeriodElapsedCallback>
 800293e:	e7c1      	b.n	80028c4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002944:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002946:	4620      	mov	r0, r4
 8002948:	f000 f923 	bl	8002b92 <HAL_TIMEx_BreakCallback>
 800294c:	e7c3      	b.n	80028d6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800294e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002952:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff ff4a 	bl	80027ee <HAL_TIM_TriggerCallback>
 800295a:	e7c5      	b.n	80028e8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295c:	f06f 0220 	mvn.w	r2, #32
 8002960:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002962:	4620      	mov	r0, r4
 8002964:	f000 f914 	bl	8002b90 <HAL_TIMEx_CommutCallback>
}
 8002968:	e7c7      	b.n	80028fa <HAL_TIM_IRQHandler+0x10a>
	...

0800296c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800296c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <TIM_Base_SetConfig+0x70>)
 8002970:	4290      	cmp	r0, r2
 8002972:	d00a      	beq.n	800298a <TIM_Base_SetConfig+0x1e>
 8002974:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x1e>
 800297a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800297e:	4290      	cmp	r0, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x1e>
 8002982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002986:	4290      	cmp	r0, r2
 8002988:	d103      	bne.n	8002992 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800298e:	684a      	ldr	r2, [r1, #4]
 8002990:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <TIM_Base_SetConfig+0x70>)
 8002994:	4290      	cmp	r0, r2
 8002996:	d00a      	beq.n	80029ae <TIM_Base_SetConfig+0x42>
 8002998:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x42>
 800299e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029a2:	4290      	cmp	r0, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x42>
 80029a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029aa:	4290      	cmp	r0, r2
 80029ac:	d103      	bne.n	80029b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	68ca      	ldr	r2, [r1, #12]
 80029b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ba:	694a      	ldr	r2, [r1, #20]
 80029bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c0:	688b      	ldr	r3, [r1, #8]
 80029c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029c4:	680b      	ldr	r3, [r1, #0]
 80029c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <TIM_Base_SetConfig+0x70>)
 80029ca:	4298      	cmp	r0, r3
 80029cc:	d002      	beq.n	80029d4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80029ce:	2301      	movs	r3, #1
 80029d0:	6143      	str	r3, [r0, #20]
}
 80029d2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	690b      	ldr	r3, [r1, #16]
 80029d6:	6303      	str	r3, [r0, #48]	; 0x30
 80029d8:	e7f9      	b.n	80029ce <TIM_Base_SetConfig+0x62>
 80029da:	bf00      	nop
 80029dc:	40012c00 	.word	0x40012c00

080029e0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80029e0:	b340      	cbz	r0, 8002a34 <HAL_TIM_Base_Init+0x54>
{
 80029e2:	b510      	push	{r4, lr}
 80029e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029ea:	b1f3      	cbz	r3, 8002a2a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f2:	4621      	mov	r1, r4
 80029f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80029f8:	f7ff ffb8 	bl	800296c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a06:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a26:	2000      	movs	r0, #0
}
 8002a28:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	f003 f865 	bl	8005afc <HAL_TIM_Base_MspInit>
 8002a32:	e7db      	b.n	80029ec <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	4770      	bx	lr

08002a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a38:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a40:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a48:	6082      	str	r2, [r0, #8]
}
 8002a4a:	bc10      	pop	{r4}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a4e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d066      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0xd6>
{
 8002a56:	b510      	push	{r4, lr}
 8002a58:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002a66:	6802      	ldr	r2, [r0, #0]
 8002a68:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002a72:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a74:	680b      	ldr	r3, [r1, #0]
 8002a76:	2b60      	cmp	r3, #96	; 0x60
 8002a78:	d040      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0xae>
 8002a7a:	d822      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x74>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d047      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0xc2>
 8002a80:	d90b      	bls.n	8002a9a <HAL_TIM_ConfigClockSource+0x4c>
 8002a82:	2b50      	cmp	r3, #80	; 0x50
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a86:	68ca      	ldr	r2, [r1, #12]
 8002a88:	6849      	ldr	r1, [r1, #4]
 8002a8a:	6800      	ldr	r0, [r0, #0]
 8002a8c:	f7ff fe4a 	bl	8002724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a90:	2150      	movs	r1, #80	; 0x50
 8002a92:	6820      	ldr	r0, [r4, #0]
 8002a94:	f7ff fe6b 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002a98:	e004      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0x6a>
 8002a9e:	d908      	bls.n	8002ab2 <HAL_TIM_ConfigClockSource+0x64>
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	d009      	beq.n	8002ab8 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ab0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002ab2:	b10b      	cbz	r3, 8002ab8 <HAL_TIM_ConfigClockSource+0x6a>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d1f5      	bne.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6820      	ldr	r0, [r4, #0]
 8002abc:	f7ff fe57 	bl	800276e <TIM_ITRx_SetConfig>
        break;
 8002ac0:	e7f0      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002ac2:	2b70      	cmp	r3, #112	; 0x70
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0x96>
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002acc:	68cb      	ldr	r3, [r1, #12]
 8002ace:	684a      	ldr	r2, [r1, #4]
 8002ad0:	6889      	ldr	r1, [r1, #8]
 8002ad2:	6800      	ldr	r0, [r0, #0]
 8002ad4:	f7ff ffb0 	bl	8002a38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	6893      	ldr	r3, [r2, #8]
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6093      	str	r3, [r2, #8]
      break;
 8002ae2:	e7df      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	68cb      	ldr	r3, [r1, #12]
 8002ae6:	684a      	ldr	r2, [r1, #4]
 8002ae8:	6889      	ldr	r1, [r1, #8]
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	f7ff ffa4 	bl	8002a38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002af8:	6093      	str	r3, [r2, #8]
      break;
 8002afa:	e7d3      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afc:	68ca      	ldr	r2, [r1, #12]
 8002afe:	6849      	ldr	r1, [r1, #4]
 8002b00:	6800      	ldr	r0, [r0, #0]
 8002b02:	f7ff fe21 	bl	8002748 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b06:	2160      	movs	r1, #96	; 0x60
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	f7ff fe30 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002b0e:	e7c9      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b10:	68ca      	ldr	r2, [r1, #12]
 8002b12:	6849      	ldr	r1, [r1, #4]
 8002b14:	6800      	ldr	r0, [r0, #0]
 8002b16:	f7ff fe05 	bl	8002724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	6820      	ldr	r0, [r4, #0]
 8002b1e:	f7ff fe26 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002b22:	e7bf      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002b24:	2002      	movs	r0, #2
}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d02b      	beq.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8002b30:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002b32:	2301      	movs	r3, #1
 8002b34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b3e:	6803      	ldr	r3, [r0, #0]
 8002b40:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b42:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b44:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b48:	680a      	ldr	r2, [r1, #0]
 8002b4a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00a      	beq.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5a:	d007      	beq.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002b5c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b6c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b70:	684a      	ldr	r2, [r1, #4]
 8002b72:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b74:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002b82:	4618      	mov	r0, r3
}
 8002b84:	bc30      	pop	{r4, r5}
 8002b86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002b88:	2002      	movs	r0, #2
}
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b90:	4770      	bx	lr

08002b92 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b92:	4770      	bx	lr

08002b94 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002b94:	2884      	cmp	r0, #132	; 0x84
 8002b96:	d001      	beq.n	8002b9c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002b98:	3003      	adds	r0, #3
 8002b9a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b9c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002b9e:	4770      	bx	lr

08002ba0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ba0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002ba2:	f000 fe9b 	bl	80038dc <vTaskStartScheduler>
  
  return osOK;
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bd08      	pop	{r3, pc}

08002baa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bb4:	6945      	ldr	r5, [r0, #20]
 8002bb6:	b1bd      	cbz	r5, 8002be8 <osThreadCreate+0x3e>
 8002bb8:	6986      	ldr	r6, [r0, #24]
 8002bba:	b1ae      	cbz	r6, 8002be8 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bbc:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002bc0:	f8d0 9000 	ldr.w	r9, [r0]
 8002bc4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002bc8:	f7ff ffe4 	bl	8002b94 <makeFreeRtosPriority>
 8002bcc:	9602      	str	r6, [sp, #8]
 8002bce:	9501      	str	r5, [sp, #4]
 8002bd0:	9000      	str	r0, [sp, #0]
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	6922      	ldr	r2, [r4, #16]
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	4640      	mov	r0, r8
 8002bda:	f000 fe11 	bl	8003800 <xTaskCreateStatic>
 8002bde:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002be0:	9805      	ldr	r0, [sp, #20]
}
 8002be2:	b007      	add	sp, #28
 8002be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002be8:	6865      	ldr	r5, [r4, #4]
 8002bea:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bec:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bf0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8002bf4:	f7ff ffce 	bl	8002b94 <makeFreeRtosPriority>
 8002bf8:	ab05      	add	r3, sp, #20
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	9000      	str	r0, [sp, #0]
 8002bfe:	463b      	mov	r3, r7
 8002c00:	fa1f f288 	uxth.w	r2, r8
 8002c04:	4631      	mov	r1, r6
 8002c06:	4628      	mov	r0, r5
 8002c08:	f000 fe33 	bl	8003872 <xTaskCreate>
 8002c0c:	2801      	cmp	r0, #1
 8002c0e:	d0e7      	beq.n	8002be0 <osThreadCreate+0x36>
      return NULL;
 8002c10:	2000      	movs	r0, #0
 8002c12:	e7e6      	b.n	8002be2 <osThreadCreate+0x38>

08002c14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c14:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c16:	b900      	cbnz	r0, 8002c1a <osDelay+0x6>
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f000 ff99 	bl	8003b50 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c1e:	2000      	movs	r0, #0
 8002c20:	bd08      	pop	{r3, pc}

08002c22 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002c22:	b510      	push	{r4, lr}
 8002c24:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002c26:	6844      	ldr	r4, [r0, #4]
 8002c28:	b17c      	cbz	r4, 8002c4a <osSemaphoreCreate+0x28>
    if (count == 1) {
 8002c2a:	2901      	cmp	r1, #1
 8002c2c:	d003      	beq.n	8002c36 <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002c2e:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002c30:	4620      	mov	r0, r4
 8002c32:	b002      	add	sp, #8
 8002c34:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002c36:	2303      	movs	r3, #3
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4611      	mov	r1, r2
 8002c40:	2001      	movs	r0, #1
 8002c42:	f000 f965 	bl	8002f10 <xQueueGenericCreateStatic>
 8002c46:	4604      	mov	r4, r0
 8002c48:	e7f2      	b.n	8002c30 <osSemaphoreCreate+0xe>
    if (count == 1) {
 8002c4a:	2901      	cmp	r1, #1
 8002c4c:	d1f0      	bne.n	8002c30 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8002c4e:	2203      	movs	r2, #3
 8002c50:	2100      	movs	r1, #0
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 f9a5 	bl	8002fa2 <xQueueGenericCreate>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d0e8      	beq.n	8002c30 <osSemaphoreCreate+0xe>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	461a      	mov	r2, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	f000 f9c4 	bl	8002ff0 <xQueueGenericSend>
      return sema;
 8002c68:	e7e2      	b.n	8002c30 <osSemaphoreCreate+0xe>

08002c6a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002c6a:	b500      	push	{lr}
 8002c6c:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002c6e:	6882      	ldr	r2, [r0, #8]
 8002c70:	b142      	cbz	r2, 8002c84 <osMessageCreate+0x1a>
 8002c72:	68c3      	ldr	r3, [r0, #12]
 8002c74:	b133      	cbz	r3, 8002c84 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002c76:	2100      	movs	r1, #0
 8002c78:	9100      	str	r1, [sp, #0]
 8002c7a:	6841      	ldr	r1, [r0, #4]
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f000 f947 	bl	8002f10 <xQueueGenericCreateStatic>
 8002c82:	e004      	b.n	8002c8e <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6841      	ldr	r1, [r0, #4]
 8002c88:	6800      	ldr	r0, [r0, #0]
 8002c8a:	f000 f98a 	bl	8002fa2 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002c8e:	b003      	add	sp, #12
 8002c90:	f85d fb04 	ldr.w	pc, [sp], #4

08002c94 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c94:	f100 0308 	add.w	r3, r0, #8
 8002c98:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ca8:	4770      	bx	lr

08002caa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cae:	4770      	bx	lr

08002cb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cb0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cb2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cb8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cbc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002cbe:	6803      	ldr	r3, [r0, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	6003      	str	r3, [r0, #0]
}
 8002cc4:	4770      	bx	lr

08002cc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cc6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cc8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cce:	d011      	beq.n	8002cf4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd0:	f100 0308 	add.w	r3, r0, #8
 8002cd4:	461c      	mov	r4, r3
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	42aa      	cmp	r2, r5
 8002cdc:	d9fa      	bls.n	8002cd4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ce2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ce4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ce6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ce8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	6003      	str	r3, [r0, #0]
}
 8002cf0:	bc30      	pop	{r4, r5}
 8002cf2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cf4:	6904      	ldr	r4, [r0, #16]
 8002cf6:	e7f2      	b.n	8002cde <vListInsert+0x18>

08002cf8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cf8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cfa:	6841      	ldr	r1, [r0, #4]
 8002cfc:	6882      	ldr	r2, [r0, #8]
 8002cfe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d00:	6841      	ldr	r1, [r0, #4]
 8002d02:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4282      	cmp	r2, r0
 8002d08:	d006      	beq.n	8002d18 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	3a01      	subs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d14:	6818      	ldr	r0, [r3, #0]
}
 8002d16:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d18:	6882      	ldr	r2, [r0, #8]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	e7f5      	b.n	8002d0a <uxListRemove+0x12>

08002d1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d1e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002d20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002d22:	b118      	cbz	r0, 8002d2c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8002d2c:	4770      	bx	lr

08002d2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d2e:	b510      	push	{r4, lr}
 8002d30:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d32:	f001 f9c7 	bl	80040c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d004      	beq.n	8002d48 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002d3e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002d40:	f001 f9e2 	bl	8004108 <vPortExitCritical>

	return xReturn;
}
 8002d44:	4620      	mov	r0, r4
 8002d46:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002d48:	2401      	movs	r4, #1
 8002d4a:	e7f9      	b.n	8002d40 <prvIsQueueFull+0x12>

08002d4c <prvIsQueueEmpty>:
{
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002d50:	f001 f9b8 	bl	80040c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d56:	b923      	cbnz	r3, 8002d62 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8002d58:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8002d5a:	f001 f9d5 	bl	8004108 <vPortExitCritical>
}
 8002d5e:	4620      	mov	r0, r4
 8002d60:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8002d62:	2400      	movs	r4, #0
 8002d64:	e7f9      	b.n	8002d5a <prvIsQueueEmpty+0xe>

08002d66 <prvCopyDataToQueue>:
{
 8002d66:	b570      	push	{r4, r5, r6, lr}
 8002d68:	4604      	mov	r4, r0
 8002d6a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d6c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002d70:	b95a      	cbnz	r2, 8002d8a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d72:	6803      	ldr	r3, [r0, #0]
 8002d74:	b11b      	cbz	r3, 8002d7e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8002d76:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d78:	3601      	adds	r6, #1
 8002d7a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d7e:	6840      	ldr	r0, [r0, #4]
 8002d80:	f001 f87a 	bl	8003e78 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	6063      	str	r3, [r4, #4]
 8002d88:	e7f6      	b.n	8002d78 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8002d8a:	b96d      	cbnz	r5, 8002da8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d8c:	6880      	ldr	r0, [r0, #8]
 8002d8e:	f003 fe6b 	bl	8006a68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d94:	68a3      	ldr	r3, [r4, #8]
 8002d96:	4413      	add	r3, r2
 8002d98:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d9a:	6862      	ldr	r2, [r4, #4]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d319      	bcc.n	8002dd4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002da4:	4628      	mov	r0, r5
 8002da6:	e7e7      	b.n	8002d78 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da8:	68c0      	ldr	r0, [r0, #12]
 8002daa:	f003 fe5d 	bl	8006a68 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002dae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002db0:	4251      	negs	r1, r2
 8002db2:	68e3      	ldr	r3, [r4, #12]
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d202      	bcs.n	8002dc4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002dbe:	6863      	ldr	r3, [r4, #4]
 8002dc0:	440b      	add	r3, r1
 8002dc2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002dc4:	2d02      	cmp	r5, #2
 8002dc6:	d001      	beq.n	8002dcc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002dc8:	2000      	movs	r0, #0
 8002dca:	e7d5      	b.n	8002d78 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dcc:	b126      	cbz	r6, 8002dd8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002dce:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	e7d1      	b.n	8002d78 <prvCopyDataToQueue+0x12>
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	e7cf      	b.n	8002d78 <prvCopyDataToQueue+0x12>
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e7cd      	b.n	8002d78 <prvCopyDataToQueue+0x12>

08002ddc <prvCopyDataFromQueue>:
{
 8002ddc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dde:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002de0:	b16a      	cbz	r2, 8002dfe <prvCopyDataFromQueue+0x22>
{
 8002de2:	b510      	push	{r4, lr}
 8002de4:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	4411      	add	r1, r2
 8002dea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dec:	685c      	ldr	r4, [r3, #4]
 8002dee:	42a1      	cmp	r1, r4
 8002df0:	d301      	bcc.n	8002df6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	f003 fe36 	bl	8006a68 <memcpy>
}
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	4770      	bx	lr

08002e00 <prvUnlockQueue>:
{
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002e04:	f001 f95e 	bl	80040c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002e08:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002e0c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e0e:	e003      	b.n	8002e18 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8002e10:	f000 ffb4 	bl	8003d7c <vTaskMissedYield>
			--cTxLock;
 8002e14:	3c01      	subs	r4, #1
 8002e16:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	dd08      	ble.n	8002e2e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e1e:	b133      	cbz	r3, 8002e2e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e20:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002e24:	f000 ff1c 	bl	8003c60 <xTaskRemoveFromEventList>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d0f3      	beq.n	8002e14 <prvUnlockQueue+0x14>
 8002e2c:	e7f0      	b.n	8002e10 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002e2e:	23ff      	movs	r3, #255	; 0xff
 8002e30:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002e34:	f001 f968 	bl	8004108 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002e38:	f001 f944 	bl	80040c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002e3c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002e40:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e42:	e003      	b.n	8002e4c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8002e44:	f000 ff9a 	bl	8003d7c <vTaskMissedYield>
				--cRxLock;
 8002e48:	3c01      	subs	r4, #1
 8002e4a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e4c:	2c00      	cmp	r4, #0
 8002e4e:	dd08      	ble.n	8002e62 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e50:	692b      	ldr	r3, [r5, #16]
 8002e52:	b133      	cbz	r3, 8002e62 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e54:	f105 0010 	add.w	r0, r5, #16
 8002e58:	f000 ff02 	bl	8003c60 <xTaskRemoveFromEventList>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d0f3      	beq.n	8002e48 <prvUnlockQueue+0x48>
 8002e60:	e7f0      	b.n	8002e44 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002e62:	23ff      	movs	r3, #255	; 0xff
 8002e64:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002e68:	f001 f94e 	bl	8004108 <vPortExitCritical>
}
 8002e6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e70 <xQueueGenericReset>:
{
 8002e70:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002e72:	b1e0      	cbz	r0, 8002eae <xQueueGenericReset+0x3e>
 8002e74:	460d      	mov	r5, r1
 8002e76:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002e78:	f001 f924 	bl	80040c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e7c:	6821      	ldr	r1, [r4, #0]
 8002e7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e82:	fb03 1002 	mla	r0, r3, r2, r1
 8002e86:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e88:	2000      	movs	r0, #0
 8002e8a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e8c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	fb02 1303 	mla	r3, r2, r3, r1
 8002e94:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e96:	23ff      	movs	r3, #255	; 0xff
 8002e98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002ea0:	b9ed      	cbnz	r5, 8002ede <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	b963      	cbnz	r3, 8002ec0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002ea6:	f001 f92f 	bl	8004108 <vPortExitCritical>
}
 8002eaa:	2001      	movs	r0, #1
 8002eac:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002ebe:	e7fe      	b.n	8002ebe <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec0:	f104 0010 	add.w	r0, r4, #16
 8002ec4:	f000 fecc 	bl	8003c60 <xTaskRemoveFromEventList>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d0ec      	beq.n	8002ea6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <xQueueGenericReset+0x80>)
 8002ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	e7e3      	b.n	8002ea6 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ede:	f104 0010 	add.w	r0, r4, #16
 8002ee2:	f7ff fed7 	bl	8002c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ee6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002eea:	f7ff fed3 	bl	8002c94 <vListInitialise>
 8002eee:	e7da      	b.n	8002ea6 <xQueueGenericReset+0x36>
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <prvInitialiseNewQueue>:
{
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002efa:	460c      	mov	r4, r1
 8002efc:	b931      	cbnz	r1, 8002f0c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002efe:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002f00:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f02:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f04:	2101      	movs	r1, #1
 8002f06:	f7ff ffb3 	bl	8002e70 <xQueueGenericReset>
}
 8002f0a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f0c:	6002      	str	r2, [r0, #0]
 8002f0e:	e7f7      	b.n	8002f00 <prvInitialiseNewQueue+0xc>

08002f10 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f10:	b940      	cbnz	r0, 8002f24 <xQueueGenericCreateStatic+0x14>
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	e7fe      	b.n	8002f22 <xQueueGenericCreateStatic+0x12>
	{
 8002f24:	b530      	push	{r4, r5, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	461c      	mov	r4, r3
 8002f2a:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8002f2c:	b153      	cbz	r3, 8002f44 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f2e:	b192      	cbz	r2, 8002f56 <xQueueGenericCreateStatic+0x46>
 8002f30:	b989      	cbnz	r1, 8002f56 <xQueueGenericCreateStatic+0x46>
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericCreateStatic+0x32>
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f56:	b16a      	cbz	r2, 8002f74 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f58:	2348      	movs	r3, #72	; 0x48
 8002f5a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f5c:	9b03      	ldr	r3, [sp, #12]
 8002f5e:	2b48      	cmp	r3, #72	; 0x48
 8002f60:	d013      	beq.n	8002f8a <xQueueGenericCreateStatic+0x7a>
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d0ef      	beq.n	8002f58 <xQueueGenericCreateStatic+0x48>
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	e7fe      	b.n	8002f88 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f90:	9400      	str	r4, [sp, #0]
 8002f92:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002f96:	4628      	mov	r0, r5
 8002f98:	f7ff ffac 	bl	8002ef4 <prvInitialiseNewQueue>
	}
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	b005      	add	sp, #20
 8002fa0:	bd30      	pop	{r4, r5, pc}

08002fa2 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fa2:	b940      	cbnz	r0, 8002fb6 <xQueueGenericCreate+0x14>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	e7fe      	b.n	8002fb4 <xQueueGenericCreate+0x12>
	{
 8002fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	460c      	mov	r4, r1
 8002fbc:	4616      	mov	r6, r2
 8002fbe:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002fc0:	b1a1      	cbz	r1, 8002fec <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fc6:	3048      	adds	r0, #72	; 0x48
 8002fc8:	f001 f9e2 	bl	8004390 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002fcc:	4605      	mov	r5, r0
 8002fce:	b150      	cbz	r0, 8002fe6 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fd6:	9000      	str	r0, [sp, #0]
 8002fd8:	4633      	mov	r3, r6
 8002fda:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	f7ff ff87 	bl	8002ef4 <prvInitialiseNewQueue>
	}
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	b003      	add	sp, #12
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8002fec:	4608      	mov	r0, r1
 8002fee:	e7ea      	b.n	8002fc6 <xQueueGenericCreate+0x24>

08002ff0 <xQueueGenericSend>:
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002ff6:	b188      	cbz	r0, 800301c <xQueueGenericSend+0x2c>
 8002ff8:	460e      	mov	r6, r1
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ffe:	b1b1      	cbz	r1, 800302e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003000:	2d02      	cmp	r5, #2
 8003002:	d120      	bne.n	8003046 <xQueueGenericSend+0x56>
 8003004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d01d      	beq.n	8003046 <xQueueGenericSend+0x56>
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	e7fe      	b.n	800301a <xQueueGenericSend+0x2a>
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800302c:	e7fe      	b.n	800302c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800302e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0e5      	beq.n	8003000 <xQueueGenericSend+0x10>
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	e7fe      	b.n	8003044 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003046:	f000 fea1 	bl	8003d8c <xTaskGetSchedulerState>
 800304a:	4607      	mov	r7, r0
 800304c:	b958      	cbnz	r0, 8003066 <xQueueGenericSend+0x76>
 800304e:	9b01      	ldr	r3, [sp, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d044      	beq.n	80030de <xQueueGenericSend+0xee>
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	e7fe      	b.n	8003064 <xQueueGenericSend+0x74>
 8003066:	2700      	movs	r7, #0
 8003068:	e039      	b.n	80030de <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800306a:	462a      	mov	r2, r5
 800306c:	4631      	mov	r1, r6
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff fe79 	bl	8002d66 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003074:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003076:	b96a      	cbnz	r2, 8003094 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8003078:	b138      	cbz	r0, 800308a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800307a:	4b3c      	ldr	r3, [pc, #240]	; (800316c <xQueueGenericSend+0x17c>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800308a:	f001 f83d 	bl	8004108 <vPortExitCritical>
				return pdPASS;
 800308e:	2001      	movs	r0, #1
}
 8003090:	b005      	add	sp, #20
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003094:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003098:	f000 fde2 	bl	8003c60 <xTaskRemoveFromEventList>
 800309c:	2800      	cmp	r0, #0
 800309e:	d0f4      	beq.n	800308a <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <xQueueGenericSend+0x17c>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	e7eb      	b.n	800308a <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 80030b2:	f001 f829 	bl	8004108 <vPortExitCritical>
					return errQUEUE_FULL;
 80030b6:	2000      	movs	r0, #0
 80030b8:	e7ea      	b.n	8003090 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ba:	a802      	add	r0, sp, #8
 80030bc:	f000 fe12 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030c0:	2701      	movs	r7, #1
 80030c2:	e019      	b.n	80030f8 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 80030c4:	2300      	movs	r3, #0
 80030c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80030ca:	e021      	b.n	8003110 <xQueueGenericSend+0x120>
 80030cc:	2300      	movs	r3, #0
 80030ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030d2:	e023      	b.n	800311c <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7ff fe93 	bl	8002e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030da:	f000 fcc1 	bl	8003a60 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80030de:	f000 fff1 	bl	80040c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3bf      	bcc.n	800306a <xQueueGenericSend+0x7a>
 80030ea:	2d02      	cmp	r5, #2
 80030ec:	d0bd      	beq.n	800306a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80030ee:	9b01      	ldr	r3, [sp, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0de      	beq.n	80030b2 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 80030f4:	2f00      	cmp	r7, #0
 80030f6:	d0e0      	beq.n	80030ba <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80030f8:	f001 f806 	bl	8004108 <vPortExitCritical>
		vTaskSuspendAll();
 80030fc:	f000 fc20 	bl	8003940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003100:	f000 ffe0 	bl	80040c4 <vPortEnterCritical>
 8003104:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003108:	b25b      	sxtb	r3, r3
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d0d9      	beq.n	80030c4 <xQueueGenericSend+0xd4>
 8003110:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003114:	b25b      	sxtb	r3, r3
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d0d7      	beq.n	80030cc <xQueueGenericSend+0xdc>
 800311c:	f000 fff4 	bl	8004108 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003120:	a901      	add	r1, sp, #4
 8003122:	a802      	add	r0, sp, #8
 8003124:	f000 fde8 	bl	8003cf8 <xTaskCheckForTimeOut>
 8003128:	b9c8      	cbnz	r0, 800315e <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800312a:	4620      	mov	r0, r4
 800312c:	f7ff fdff 	bl	8002d2e <prvIsQueueFull>
 8003130:	2800      	cmp	r0, #0
 8003132:	d0cf      	beq.n	80030d4 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003134:	9901      	ldr	r1, [sp, #4]
 8003136:	f104 0010 	add.w	r0, r4, #16
 800313a:	f000 fd77 	bl	8003c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff fe5e 	bl	8002e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003144:	f000 fc8c 	bl	8003a60 <xTaskResumeAll>
 8003148:	2800      	cmp	r0, #0
 800314a:	d1c8      	bne.n	80030de <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <xQueueGenericSend+0x17c>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	e7bf      	b.n	80030de <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff fe4e 	bl	8002e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003164:	f000 fc7c 	bl	8003a60 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003168:	2000      	movs	r0, #0
 800316a:	e791      	b.n	8003090 <xQueueGenericSend+0xa0>
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8003170:	b168      	cbz	r0, 800318e <xQueueGiveFromISR+0x1e>
{
 8003172:	b570      	push	{r4, r5, r6, lr}
 8003174:	460e      	mov	r6, r1
 8003176:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003178:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800317a:	b18b      	cbz	r3, 80031a0 <xQueueGiveFromISR+0x30>
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	e7fe      	b.n	800318c <xQueueGiveFromISR+0x1c>
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800319e:	e7fe      	b.n	800319e <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031a0:	6803      	ldr	r3, [r0, #0]
 80031a2:	b1eb      	cbz	r3, 80031e0 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031a4:	f001 f87a 	bl	800429c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031a8:	f3ef 8511 	mrs	r5, BASEPRI
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d926      	bls.n	8003212 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80031c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80031c8:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ca:	3201      	adds	r2, #1
 80031cc:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d011      	beq.n	80031f8 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031d4:	3301      	adds	r3, #1
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80031dc:	2001      	movs	r0, #1
 80031de:	e019      	b.n	8003214 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031e0:	6843      	ldr	r3, [r0, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0de      	beq.n	80031a4 <xQueueGiveFromISR+0x34>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	e7fe      	b.n	80031f6 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031fa:	b90b      	cbnz	r3, 8003200 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80031fc:	2001      	movs	r0, #1
 80031fe:	e009      	b.n	8003214 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003200:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003204:	f000 fd2c 	bl	8003c60 <xTaskRemoveFromEventList>
 8003208:	b138      	cbz	r0, 800321a <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800320a:	b146      	cbz	r6, 800321e <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800320c:	2001      	movs	r0, #1
 800320e:	6030      	str	r0, [r6, #0]
 8003210:	e000      	b.n	8003214 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8003212:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003214:	f385 8811 	msr	BASEPRI, r5
}
 8003218:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800321a:	2001      	movs	r0, #1
 800321c:	e7fa      	b.n	8003214 <xQueueGiveFromISR+0xa4>
 800321e:	2001      	movs	r0, #1
 8003220:	e7f8      	b.n	8003214 <xQueueGiveFromISR+0xa4>
	...

08003224 <xQueueReceive>:
{
 8003224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003226:	b085      	sub	sp, #20
 8003228:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800322a:	b190      	cbz	r0, 8003252 <xQueueReceive+0x2e>
 800322c:	460e      	mov	r6, r1
 800322e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003230:	b1c1      	cbz	r1, 8003264 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003232:	f000 fdab 	bl	8003d8c <xTaskGetSchedulerState>
 8003236:	4607      	mov	r7, r0
 8003238:	bb00      	cbnz	r0, 800327c <xQueueReceive+0x58>
 800323a:	9b01      	ldr	r3, [sp, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d05c      	beq.n	80032fa <xQueueReceive+0xd6>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	e7fe      	b.n	8003250 <xQueueReceive+0x2c>
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003262:	e7fe      	b.n	8003262 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003264:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0e3      	beq.n	8003232 <xQueueReceive+0xe>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	e7fe      	b.n	800327a <xQueueReceive+0x56>
 800327c:	2700      	movs	r7, #0
 800327e:	e03c      	b.n	80032fa <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003280:	4631      	mov	r1, r6
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff fdaa 	bl	8002ddc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003288:	3d01      	subs	r5, #1
 800328a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328c:	6923      	ldr	r3, [r4, #16]
 800328e:	b923      	cbnz	r3, 800329a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8003290:	f000 ff3a 	bl	8004108 <vPortExitCritical>
				return pdPASS;
 8003294:	2001      	movs	r0, #1
}
 8003296:	b005      	add	sp, #20
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329a:	f104 0010 	add.w	r0, r4, #16
 800329e:	f000 fcdf 	bl	8003c60 <xTaskRemoveFromEventList>
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d0f4      	beq.n	8003290 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <xQueueReceive+0x158>)
 80032a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	e7eb      	b.n	8003290 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80032b8:	f000 ff26 	bl	8004108 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80032bc:	2000      	movs	r0, #0
 80032be:	e7ea      	b.n	8003296 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032c0:	a802      	add	r0, sp, #8
 80032c2:	f000 fd0f 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032c6:	2701      	movs	r7, #1
 80032c8:	e021      	b.n	800330e <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 80032ca:	2300      	movs	r3, #0
 80032cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80032d0:	e029      	b.n	8003326 <xQueueReceive+0x102>
 80032d2:	2300      	movs	r3, #0
 80032d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032d8:	e02b      	b.n	8003332 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff fd90 	bl	8002e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032e0:	f000 fbbe 	bl	8003a60 <xTaskResumeAll>
 80032e4:	e009      	b.n	80032fa <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff fd8a 	bl	8002e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ec:	f000 fbb8 	bl	8003a60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff fd2b 	bl	8002d4c <prvIsQueueEmpty>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d13d      	bne.n	8003376 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 80032fa:	f000 fee3 	bl	80040c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003300:	2d00      	cmp	r5, #0
 8003302:	d1bd      	bne.n	8003280 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003304:	9b01      	ldr	r3, [sp, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0d6      	beq.n	80032b8 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 800330a:	2f00      	cmp	r7, #0
 800330c:	d0d8      	beq.n	80032c0 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 800330e:	f000 fefb 	bl	8004108 <vPortExitCritical>
		vTaskSuspendAll();
 8003312:	f000 fb15 	bl	8003940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003316:	f000 fed5 	bl	80040c4 <vPortEnterCritical>
 800331a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800331e:	b25b      	sxtb	r3, r3
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d0d1      	beq.n	80032ca <xQueueReceive+0xa6>
 8003326:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800332a:	b25b      	sxtb	r3, r3
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d0cf      	beq.n	80032d2 <xQueueReceive+0xae>
 8003332:	f000 fee9 	bl	8004108 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003336:	a901      	add	r1, sp, #4
 8003338:	a802      	add	r0, sp, #8
 800333a:	f000 fcdd 	bl	8003cf8 <xTaskCheckForTimeOut>
 800333e:	2800      	cmp	r0, #0
 8003340:	d1d1      	bne.n	80032e6 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff fd02 	bl	8002d4c <prvIsQueueEmpty>
 8003348:	2800      	cmp	r0, #0
 800334a:	d0c6      	beq.n	80032da <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800334c:	9901      	ldr	r1, [sp, #4]
 800334e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003352:	f000 fc6b 	bl	8003c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fd52 	bl	8002e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800335c:	f000 fb80 	bl	8003a60 <xTaskResumeAll>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1ca      	bne.n	80032fa <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <xQueueReceive+0x158>)
 8003366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	e7c1      	b.n	80032fa <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 8003376:	2000      	movs	r0, #0
 8003378:	e78d      	b.n	8003296 <xQueueReceive+0x72>
 800337a:	bf00      	nop
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <xQueueSemaphoreTake>:
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003386:	b158      	cbz	r0, 80033a0 <xQueueSemaphoreTake+0x20>
 8003388:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800338a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800338c:	b18b      	cbz	r3, 80033b2 <xQueueSemaphoreTake+0x32>
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	e7fe      	b.n	800339e <xQueueSemaphoreTake+0x1e>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80033b0:	e7fe      	b.n	80033b0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033b2:	f000 fceb 	bl	8003d8c <xTaskGetSchedulerState>
 80033b6:	4606      	mov	r6, r0
 80033b8:	b950      	cbnz	r0, 80033d0 <xQueueSemaphoreTake+0x50>
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	b15b      	cbz	r3, 80033d6 <xQueueSemaphoreTake+0x56>
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	e7fe      	b.n	80033ce <xQueueSemaphoreTake+0x4e>
 80033d0:	2500      	movs	r5, #0
 80033d2:	462e      	mov	r6, r5
 80033d4:	e053      	b.n	800347e <xQueueSemaphoreTake+0xfe>
 80033d6:	4605      	mov	r5, r0
 80033d8:	e051      	b.n	800347e <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033da:	3b01      	subs	r3, #1
 80033dc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	b13b      	cbz	r3, 80033f2 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e2:	6923      	ldr	r3, [r4, #16]
 80033e4:	b94b      	cbnz	r3, 80033fa <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80033e6:	f000 fe8f 	bl	8004108 <vPortExitCritical>
				return pdPASS;
 80033ea:	2501      	movs	r5, #1
}
 80033ec:	4628      	mov	r0, r5
 80033ee:	b004      	add	sp, #16
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80033f2:	f000 fe03 	bl	8003ffc <pvTaskIncrementMutexHeldCount>
 80033f6:	6060      	str	r0, [r4, #4]
 80033f8:	e7f3      	b.n	80033e2 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033fa:	f104 0010 	add.w	r0, r4, #16
 80033fe:	f000 fc2f 	bl	8003c60 <xTaskRemoveFromEventList>
 8003402:	2800      	cmp	r0, #0
 8003404:	d0ef      	beq.n	80033e6 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8003406:	4b46      	ldr	r3, [pc, #280]	; (8003520 <xQueueSemaphoreTake+0x1a0>)
 8003408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	e7e6      	b.n	80033e6 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003418:	b145      	cbz	r5, 800342c <xQueueSemaphoreTake+0xac>
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	e7fe      	b.n	800342a <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 800342c:	f000 fe6c 	bl	8004108 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003430:	e7dc      	b.n	80033ec <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003432:	a802      	add	r0, sp, #8
 8003434:	f000 fc56 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003438:	2601      	movs	r6, #1
 800343a:	e02a      	b.n	8003492 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 800343c:	2300      	movs	r3, #0
 800343e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003442:	e032      	b.n	80034aa <xQueueSemaphoreTake+0x12a>
 8003444:	2300      	movs	r3, #0
 8003446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800344a:	e034      	b.n	80034b6 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 800344c:	f000 fe3a 	bl	80040c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003450:	6860      	ldr	r0, [r4, #4]
 8003452:	f000 fcab 	bl	8003dac <xTaskPriorityInherit>
 8003456:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003458:	f000 fe56 	bl	8004108 <vPortExitCritical>
 800345c:	e03b      	b.n	80034d6 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 800345e:	4620      	mov	r0, r4
 8003460:	f7ff fcce 	bl	8002e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003464:	f000 fafc 	bl	8003a60 <xTaskResumeAll>
 8003468:	e009      	b.n	800347e <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fcc8 	bl	8002e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003470:	f000 faf6 	bl	8003a60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff fc69 	bl	8002d4c <prvIsQueueEmpty>
 800347a:	2800      	cmp	r0, #0
 800347c:	d140      	bne.n	8003500 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 800347e:	f000 fe21 	bl	80040c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1a8      	bne.n	80033da <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003488:	9b01      	ldr	r3, [sp, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0c4      	beq.n	8003418 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800348e:	2e00      	cmp	r6, #0
 8003490:	d0cf      	beq.n	8003432 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 8003492:	f000 fe39 	bl	8004108 <vPortExitCritical>
		vTaskSuspendAll();
 8003496:	f000 fa53 	bl	8003940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349a:	f000 fe13 	bl	80040c4 <vPortEnterCritical>
 800349e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d0c8      	beq.n	800343c <xQueueSemaphoreTake+0xbc>
 80034aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d0c6      	beq.n	8003444 <xQueueSemaphoreTake+0xc4>
 80034b6:	f000 fe27 	bl	8004108 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ba:	a901      	add	r1, sp, #4
 80034bc:	a802      	add	r0, sp, #8
 80034be:	f000 fc1b 	bl	8003cf8 <xTaskCheckForTimeOut>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d1d1      	bne.n	800346a <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff fc40 	bl	8002d4c <prvIsQueueEmpty>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d0c6      	beq.n	800345e <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ba      	beq.n	800344c <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d6:	9901      	ldr	r1, [sp, #4]
 80034d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034dc:	f000 fba6 	bl	8003c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff fc8d 	bl	8002e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e6:	f000 fabb 	bl	8003a60 <xTaskResumeAll>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d1c7      	bne.n	800347e <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <xQueueSemaphoreTake+0x1a0>)
 80034f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	e7be      	b.n	800347e <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8003500:	b90d      	cbnz	r5, 8003506 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8003502:	2500      	movs	r5, #0
 8003504:	e772      	b.n	80033ec <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8003506:	f000 fddd 	bl	80040c4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fc07 	bl	8002d1e <prvGetDisinheritPriorityAfterTimeout>
 8003510:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003512:	6860      	ldr	r0, [r4, #4]
 8003514:	f000 fd0c 	bl	8003f30 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003518:	f000 fdf6 	bl	8004108 <vPortExitCritical>
 800351c:	e7f1      	b.n	8003502 <xQueueSemaphoreTake+0x182>
 800351e:	bf00      	nop
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <prvResetNextTaskUnblockTime+0x20>)
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	b923      	cbnz	r3, 8003536 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <prvResetNextTaskUnblockTime+0x20>)
 800352e:	f04f 32ff 	mov.w	r2, #4294967295
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
 8003534:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003536:	4b03      	ldr	r3, [pc, #12]	; (8003544 <prvResetNextTaskUnblockTime+0x20>)
 8003538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353a:	68d2      	ldr	r2, [r2, #12]
 800353c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800353e:	6852      	ldr	r2, [r2, #4]
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8003542:	4770      	bx	lr
 8003544:	20000034 	.word	0x20000034

08003548 <prvInitialiseNewTask>:
{
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	4607      	mov	r7, r0
 800354e:	4698      	mov	r8, r3
 8003550:	9d08      	ldr	r5, [sp, #32]
 8003552:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003556:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003558:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800355a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800355e:	3a01      	subs	r2, #1
 8003560:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003564:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003568:	2200      	movs	r2, #0
 800356a:	2a0f      	cmp	r2, #15
 800356c:	d807      	bhi.n	800357e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800356e:	5c88      	ldrb	r0, [r1, r2]
 8003570:	18a3      	adds	r3, r4, r2
 8003572:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8003576:	5c8b      	ldrb	r3, [r1, r2]
 8003578:	b10b      	cbz	r3, 800357e <prvInitialiseNewTask+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800357a:	3201      	adds	r2, #1
 800357c:	e7f5      	b.n	800356a <prvInitialiseNewTask+0x22>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800357e:	2300      	movs	r3, #0
 8003580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003584:	2d06      	cmp	r5, #6
 8003586:	d900      	bls.n	800358a <prvInitialiseNewTask+0x42>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003588:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800358a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800358c:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800358e:	f04f 0a00 	mov.w	sl, #0
 8003592:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003596:	1d20      	adds	r0, r4, #4
 8003598:	f7ff fb87 	bl	8002caa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800359c:	f104 0018 	add.w	r0, r4, #24
 80035a0:	f7ff fb83 	bl	8002caa <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a6:	f1c5 0507 	rsb	r5, r5, #7
 80035aa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80035ae:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035b2:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035b6:	4642      	mov	r2, r8
 80035b8:	4639      	mov	r1, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 fd5e 	bl	800407c <pxPortInitialiseStack>
 80035c0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80035c2:	f1b9 0f00 	cmp.w	r9, #0
 80035c6:	d001      	beq.n	80035cc <prvInitialiseNewTask+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c8:	f8c9 4000 	str.w	r4, [r9]
}
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080035d0 <prvInitialiseTaskLists>:
{
 80035d0:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035d2:	2400      	movs	r4, #0
 80035d4:	e007      	b.n	80035e6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80035da:	0093      	lsls	r3, r2, #2
 80035dc:	4810      	ldr	r0, [pc, #64]	; (8003620 <prvInitialiseTaskLists+0x50>)
 80035de:	4418      	add	r0, r3
 80035e0:	f7ff fb58 	bl	8002c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035e4:	3401      	adds	r4, #1
 80035e6:	2c06      	cmp	r4, #6
 80035e8:	d9f5      	bls.n	80035d6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80035ea:	4c0e      	ldr	r4, [pc, #56]	; (8003624 <prvInitialiseTaskLists+0x54>)
 80035ec:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 80035f0:	4630      	mov	r0, r6
 80035f2:	f7ff fb4f 	bl	8002c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035f6:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 80035fa:	4628      	mov	r0, r5
 80035fc:	f7ff fb4a 	bl	8002c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003600:	f104 0014 	add.w	r0, r4, #20
 8003604:	f7ff fb46 	bl	8002c94 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003608:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800360c:	f7ff fb42 	bl	8002c94 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003610:	4620      	mov	r0, r4
 8003612:	f7ff fb3f 	bl	8002c94 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003616:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003618:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 800361c:	bd70      	pop	{r4, r5, r6, pc}
 800361e:	bf00      	nop
 8003620:	20000064 	.word	0x20000064
 8003624:	20000034 	.word	0x20000034

08003628 <prvAddNewTaskToReadyList>:
{
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800362c:	f000 fd4a 	bl	80040c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <prvAddNewTaskToReadyList+0xa4>)
 8003632:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003636:	3201      	adds	r2, #1
 8003638:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 800363c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003640:	b173      	cbz	r3, 8003660 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <prvAddNewTaskToReadyList+0xa4>)
 8003644:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003648:	b98b      	cbnz	r3, 800366e <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <prvAddNewTaskToReadyList+0xa4>)
 800364c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d80a      	bhi.n	800366e <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <prvAddNewTaskToReadyList+0xa4>)
 800365a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 800365e:	e006      	b.n	800366e <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <prvAddNewTaskToReadyList+0xa4>)
 8003662:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003666:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800366a:	2b01      	cmp	r3, #1
 800366c:	d02a      	beq.n	80036c4 <prvAddNewTaskToReadyList+0x9c>
		uxTaskNumber++;
 800366e:	4c17      	ldr	r4, [pc, #92]	; (80036cc <prvAddNewTaskToReadyList+0xa4>)
 8003670:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003674:	3301      	adds	r3, #1
 8003676:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 800367a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8003684:	430a      	orrs	r2, r1
 8003686:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800368a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800368e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003692:	1d29      	adds	r1, r5, #4
 8003694:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003698:	f7ff fb0a 	bl	8002cb0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800369c:	f000 fd34 	bl	8004108 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80036a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80036a4:	b16b      	cbz	r3, 80036c2 <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d207      	bcs.n	80036c2 <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <prvAddNewTaskToReadyList+0xa8>)
 80036b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	f3bf 8f6f 	isb	sy
}
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 80036c4:	f7ff ff84 	bl	80035d0 <prvInitialiseTaskLists>
 80036c8:	e7d1      	b.n	800366e <prvAddNewTaskToReadyList+0x46>
 80036ca:	bf00      	nop
 80036cc:	20000034 	.word	0x20000034
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <prvDeleteTCB>:
	{
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036d8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80036dc:	b163      	cbz	r3, 80036f8 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d011      	beq.n	8003706 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d00e      	beq.n	8003704 <prvDeleteTCB+0x30>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	e7fe      	b.n	80036f6 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80036f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80036fa:	f000 feb7 	bl	800446c <vPortFree>
				vPortFree( pxTCB );
 80036fe:	4620      	mov	r0, r4
 8003700:	f000 feb4 	bl	800446c <vPortFree>
	}
 8003704:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8003706:	f000 feb1 	bl	800446c <vPortFree>
 800370a:	e7fb      	b.n	8003704 <prvDeleteTCB+0x30>

0800370c <prvCheckTasksWaitingTermination>:
{
 800370c:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <prvCheckTasksWaitingTermination+0x40>)
 8003710:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003714:	b1c3      	cbz	r3, 8003748 <prvCheckTasksWaitingTermination+0x3c>
			taskENTER_CRITICAL();
 8003716:	f000 fcd5 	bl	80040c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800371a:	4c0c      	ldr	r4, [pc, #48]	; (800374c <prvCheckTasksWaitingTermination+0x40>)
 800371c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8003720:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003722:	1d28      	adds	r0, r5, #4
 8003724:	f7ff fae8 	bl	8002cf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003728:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800372c:	3b01      	subs	r3, #1
 800372e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 8003732:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003736:	3b01      	subs	r3, #1
 8003738:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 800373c:	f000 fce4 	bl	8004108 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003740:	4628      	mov	r0, r5
 8003742:	f7ff ffc7 	bl	80036d4 <prvDeleteTCB>
 8003746:	e7e2      	b.n	800370e <prvCheckTasksWaitingTermination+0x2>
}
 8003748:	bd38      	pop	{r3, r4, r5, pc}
 800374a:	bf00      	nop
 800374c:	20000034 	.word	0x20000034

08003750 <prvIdleTask>:
{
 8003750:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003752:	f7ff ffdb 	bl	800370c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <prvIdleTask+0x20>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	2b01      	cmp	r3, #1
 800375c:	d9f9      	bls.n	8003752 <prvIdleTask+0x2>
				taskYIELD();
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <prvIdleTask+0x24>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e7f0      	b.n	8003752 <prvIdleTask+0x2>
 8003770:	20000034 	.word	0x20000034
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	4604      	mov	r4, r0
 800377c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800377e:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <prvAddCurrentTaskToDelayedList+0x84>)
 8003780:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003784:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8003788:	3004      	adds	r0, #4
 800378a:	f7ff fab5 	bl	8002cf8 <uxListRemove>
 800378e:	b960      	cbnz	r0, 80037aa <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <prvAddCurrentTaskToDelayedList+0x84>)
 8003792:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003796:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003798:	2201      	movs	r2, #1
 800379a:	fa02 f101 	lsl.w	r1, r2, r1
 800379e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80037a2:	ea22 0201 	bic.w	r2, r2, r1
 80037a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037ae:	d00f      	beq.n	80037d0 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037b0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <prvAddCurrentTaskToDelayedList+0x84>)
 80037b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80037b8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80037ba:	42a6      	cmp	r6, r4
 80037bc:	d911      	bls.n	80037e2 <prvAddCurrentTaskToDelayedList+0x6a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <prvAddCurrentTaskToDelayedList+0x84>)
 80037c0:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80037c4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80037c8:	3104      	adds	r1, #4
 80037ca:	f7ff fa7c 	bl	8002cc6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037d0:	2d00      	cmp	r5, #0
 80037d2:	d0ed      	beq.n	80037b0 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <prvAddCurrentTaskToDelayedList+0x84>)
 80037d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80037da:	3104      	adds	r1, #4
 80037dc:	f7ff fa68 	bl	8002cb0 <vListInsertEnd>
 80037e0:	e7f5      	b.n	80037ce <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e2:	4d06      	ldr	r5, [pc, #24]	; (80037fc <prvAddCurrentTaskToDelayedList+0x84>)
 80037e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80037e6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80037ea:	3104      	adds	r1, #4
 80037ec:	f7ff fa6b 	bl	8002cc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037f2:	42a3      	cmp	r3, r4
 80037f4:	d9eb      	bls.n	80037ce <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80037f6:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 80037f8:	e7e9      	b.n	80037ce <prvAddCurrentTaskToDelayedList+0x56>
 80037fa:	bf00      	nop
 80037fc:	20000034 	.word	0x20000034

08003800 <xTaskCreateStatic>:
	{
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003806:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003808:	b175      	cbz	r5, 8003828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800380a:	b1b4      	cbz	r4, 800383a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800380c:	2654      	movs	r6, #84	; 0x54
 800380e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003810:	9e04      	ldr	r6, [sp, #16]
 8003812:	2e54      	cmp	r6, #84	; 0x54
 8003814:	d01a      	beq.n	800384c <xTaskCreateStatic+0x4c>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	e7fe      	b.n	8003826 <xTaskCreateStatic+0x26>
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003838:	e7fe      	b.n	8003838 <xTaskCreateStatic+0x38>
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800384a:	e7fe      	b.n	800384a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800384c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800384e:	2502      	movs	r5, #2
 8003850:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003854:	2500      	movs	r5, #0
 8003856:	9503      	str	r5, [sp, #12]
 8003858:	9402      	str	r4, [sp, #8]
 800385a:	ad05      	add	r5, sp, #20
 800385c:	9501      	str	r5, [sp, #4]
 800385e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003860:	9500      	str	r5, [sp, #0]
 8003862:	f7ff fe71 	bl	8003548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003866:	4620      	mov	r0, r4
 8003868:	f7ff fede 	bl	8003628 <prvAddNewTaskToReadyList>
	}
 800386c:	9805      	ldr	r0, [sp, #20]
 800386e:	b006      	add	sp, #24
 8003870:	bd70      	pop	{r4, r5, r6, pc}

08003872 <xTaskCreate>:
	{
 8003872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	4607      	mov	r7, r0
 800387a:	4688      	mov	r8, r1
 800387c:	4614      	mov	r4, r2
 800387e:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003880:	0090      	lsls	r0, r2, #2
 8003882:	f000 fd85 	bl	8004390 <pvPortMalloc>
			if( pxStack != NULL )
 8003886:	b300      	cbz	r0, 80038ca <xTaskCreate+0x58>
 8003888:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800388a:	2054      	movs	r0, #84	; 0x54
 800388c:	f000 fd80 	bl	8004390 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003890:	4605      	mov	r5, r0
 8003892:	b1b0      	cbz	r0, 80038c2 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8003894:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8003898:	b1e5      	cbz	r5, 80038d4 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800389a:	2300      	movs	r3, #0
 800389c:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	9502      	str	r5, [sp, #8]
 80038a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	4633      	mov	r3, r6
 80038ae:	4622      	mov	r2, r4
 80038b0:	4641      	mov	r1, r8
 80038b2:	4638      	mov	r0, r7
 80038b4:	f7ff fe48 	bl	8003548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b8:	4628      	mov	r0, r5
 80038ba:	f7ff feb5 	bl	8003628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038be:	2001      	movs	r0, #1
 80038c0:	e005      	b.n	80038ce <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80038c2:	4648      	mov	r0, r9
 80038c4:	f000 fdd2 	bl	800446c <vPortFree>
 80038c8:	e7e6      	b.n	8003898 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ca:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80038ce:	b005      	add	sp, #20
 80038d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80038d8:	e7f9      	b.n	80038ce <xTaskCreate+0x5c>
	...

080038dc <vTaskStartScheduler>:
{
 80038dc:	b510      	push	{r4, lr}
 80038de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038e0:	2400      	movs	r4, #0
 80038e2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038e4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038e6:	aa07      	add	r2, sp, #28
 80038e8:	a906      	add	r1, sp, #24
 80038ea:	a805      	add	r0, sp, #20
 80038ec:	f001 f916 	bl	8004b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038f0:	9b05      	ldr	r3, [sp, #20]
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	9b06      	ldr	r3, [sp, #24]
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	9400      	str	r4, [sp, #0]
 80038fa:	4623      	mov	r3, r4
 80038fc:	9a07      	ldr	r2, [sp, #28]
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <vTaskStartScheduler+0x58>)
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <vTaskStartScheduler+0x5c>)
 8003902:	f7ff ff7d 	bl	8003800 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003906:	b190      	cbz	r0, 800392e <vTaskStartScheduler+0x52>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <vTaskStartScheduler+0x60>)
 800391a:	f04f 32ff 	mov.w	r2, #4294967295
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8003920:	2201      	movs	r2, #1
 8003922:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 8003926:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		if( xPortStartScheduler() != pdFALSE )
 800392a:	f000 fc5d 	bl	80041e8 <xPortStartScheduler>
}
 800392e:	b008      	add	sp, #32
 8003930:	bd10      	pop	{r4, pc}
 8003932:	bf00      	nop
 8003934:	08006b2c 	.word	0x08006b2c
 8003938:	08003751 	.word	0x08003751
 800393c:	20000034 	.word	0x20000034

08003940 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003940:	4a03      	ldr	r2, [pc, #12]	; (8003950 <vTaskSuspendAll+0x10>)
 8003942:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8003946:	3301      	adds	r3, #1
 8003948:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000034 	.word	0x20000034

08003954 <xTaskIncrementTick>:
{
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003958:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <xTaskIncrementTick+0x108>)
 800395a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800395e:	2b00      	cmp	r3, #0
 8003960:	d16c      	bne.n	8003a3c <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003962:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <xTaskIncrementTick+0x108>)
 8003964:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
 8003968:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800396a:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800396e:	b9cd      	cbnz	r5, 80039a4 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b143      	cbz	r3, 8003988 <xTaskIncrementTick+0x34>
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	e7fe      	b.n	8003986 <xTaskIncrementTick+0x32>
 8003988:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <xTaskIncrementTick+0x108>)
 800398a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800398c:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8003990:	6299      	str	r1, [r3, #40]	; 0x28
 8003992:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003996:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800399a:	3201      	adds	r2, #1
 800399c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80039a0:	f7ff fdc0 	bl	8003524 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <xTaskIncrementTick+0x108>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	d93d      	bls.n	8003a28 <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 80039ac:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <xTaskIncrementTick+0x108>)
 80039b0:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440a      	add	r2, r1
 80039be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d942      	bls.n	8003a4a <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 80039c4:	2401      	movs	r4, #1
 80039c6:	e040      	b.n	8003a4a <xTaskIncrementTick+0xf6>
							xSwitchRequired = pdTRUE;
 80039c8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <xTaskIncrementTick+0x108>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	b363      	cbz	r3, 8003a2c <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <xTaskIncrementTick+0x108>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039da:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80039dc:	429d      	cmp	r5, r3
 80039de:	d32a      	bcc.n	8003a36 <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e0:	f106 0804 	add.w	r8, r6, #4
 80039e4:	4640      	mov	r0, r8
 80039e6:	f7ff f987 	bl	8002cf8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80039ec:	b11b      	cbz	r3, 80039f6 <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ee:	f106 0018 	add.w	r0, r6, #24
 80039f2:	f7ff f981 	bl	8002cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039f6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	4f17      	ldr	r7, [pc, #92]	; (8003a5c <xTaskIncrementTick+0x108>)
 80039fe:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003a02:	430a      	orrs	r2, r1
 8003a04:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a08:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003a0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	4641      	mov	r1, r8
 8003a14:	4410      	add	r0, r2
 8003a16:	f7ff f94b 	bl	8002cb0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003a1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d2d0      	bcs.n	80039c8 <xTaskIncrementTick+0x74>
 8003a26:	e7d0      	b.n	80039ca <xTaskIncrementTick+0x76>
BaseType_t xSwitchRequired = pdFALSE;
 8003a28:	2400      	movs	r4, #0
 8003a2a:	e7ce      	b.n	80039ca <xTaskIncrementTick+0x76>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <xTaskIncrementTick+0x108>)
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8003a34:	e7bb      	b.n	80039ae <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <xTaskIncrementTick+0x108>)
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 8003a3a:	e7b8      	b.n	80039ae <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 8003a3c:	4a07      	ldr	r2, [pc, #28]	; (8003a5c <xTaskIncrementTick+0x108>)
 8003a3e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
 8003a42:	3301      	adds	r3, #1
 8003a44:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
BaseType_t xSwitchRequired = pdFALSE;
 8003a48:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <xTaskIncrementTick+0x108>)
 8003a4c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a50:	b103      	cbz	r3, 8003a54 <xTaskIncrementTick+0x100>
			xSwitchRequired = pdTRUE;
 8003a52:	2401      	movs	r4, #1
}
 8003a54:	4620      	mov	r0, r4
 8003a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000034 	.word	0x20000034

08003a60 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003a62:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003a66:	b943      	cbnz	r3, 8003a7a <xTaskResumeAll+0x1a>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	e7fe      	b.n	8003a78 <xTaskResumeAll+0x18>
{
 8003a7a:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8003a7c:	f000 fb22 	bl	80040c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003a80:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003a82:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8003a86:	3a01      	subs	r2, #1
 8003a88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d154      	bne.n	8003b3e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003a96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003a9a:	b90b      	cbnz	r3, 8003aa0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8003a9c:	2400      	movs	r4, #0
 8003a9e:	e04f      	b.n	8003b40 <xTaskResumeAll+0xe0>
TCB_t *pxTCB = NULL;
 8003aa0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa2:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	b32b      	cbz	r3, 8003af4 <xTaskResumeAll+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003aa8:	4d27      	ldr	r5, [pc, #156]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003aaa:	6a2b      	ldr	r3, [r5, #32]
 8003aac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aae:	f104 0018 	add.w	r0, r4, #24
 8003ab2:	f7ff f921 	bl	8002cf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab6:	1d26      	adds	r6, r4, #4
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f7ff f91d 	bl	8002cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 8003ace:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003adc:	f7ff f8e8 	bl	8002cb0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ae2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3da      	bcc.n	8003aa2 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8003aec:	2201      	movs	r2, #1
 8003aee:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8003af2:	e7d6      	b.n	8003aa2 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8003af4:	b10c      	cbz	r4, 8003afa <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 8003af6:	f7ff fd15 	bl	8003524 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003afc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b00:	b97c      	cbnz	r4, 8003b22 <xTaskResumeAll+0xc2>
				if( xYieldPending != pdFALSE )
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003b04:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8003b08:	b1d4      	cbz	r4, 8003b40 <xTaskResumeAll+0xe0>
					taskYIELD_IF_USING_PREEMPTION();
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <xTaskResumeAll+0xec>)
 8003b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003b1a:	2401      	movs	r4, #1
 8003b1c:	e010      	b.n	8003b40 <xTaskResumeAll+0xe0>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b1e:	3c01      	subs	r4, #1
 8003b20:	d008      	beq.n	8003b34 <xTaskResumeAll+0xd4>
							if( xTaskIncrementTick() != pdFALSE )
 8003b22:	f7ff ff17 	bl	8003954 <xTaskIncrementTick>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d0f9      	beq.n	8003b1e <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8003b32:	e7f4      	b.n	8003b1e <xTaskResumeAll+0xbe>
						uxPendedTicks = 0;
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <xTaskResumeAll+0xe8>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8003b3c:	e7e1      	b.n	8003b02 <xTaskResumeAll+0xa2>
BaseType_t xAlreadyYielded = pdFALSE;
 8003b3e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003b40:	f000 fae2 	bl	8004108 <vPortExitCritical>
}
 8003b44:	4620      	mov	r0, r4
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	20000034 	.word	0x20000034
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <vTaskDelay>:
	{
 8003b50:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b52:	b1b0      	cbz	r0, 8003b82 <vTaskDelay+0x32>
 8003b54:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <vTaskDelay+0x44>)
 8003b58:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003b5c:	b143      	cbz	r3, 8003b70 <vTaskDelay+0x20>
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	e7fe      	b.n	8003b6e <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8003b70:	f7ff fee6 	bl	8003940 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b74:	2100      	movs	r1, #0
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7ff fdfe 	bl	8003778 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003b7c:	f7ff ff70 	bl	8003a60 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003b80:	b938      	cbnz	r0, 8003b92 <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <vTaskDelay+0x48>)
 8003b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	f3bf 8f6f 	isb	sy
	}
 8003b92:	bd10      	pop	{r4, pc}
 8003b94:	20000034 	.word	0x20000034
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <vTaskSwitchContext+0x8c>)
 8003b9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003ba2:	b123      	cbz	r3, 8003bae <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <vTaskSwitchContext+0x8c>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8003bac:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <vTaskSwitchContext+0x8c>)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bb6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f1c3 031f 	rsb	r3, r3, #31
 8003bc4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003bc8:	0081      	lsls	r1, r0, #2
 8003bca:	440a      	add	r2, r1
 8003bcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bce:	b942      	cbnz	r2, 8003be2 <vTaskSwitchContext+0x46>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	e7fe      	b.n	8003be0 <vTaskSwitchContext+0x44>
{
 8003be2:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003be4:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <vTaskSwitchContext+0x8c>)
 8003be6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003bea:	0081      	lsls	r1, r0, #2
 8003bec:	4411      	add	r1, r2
 8003bee:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003bf0:	6840      	ldr	r0, [r0, #4]
 8003bf2:	6348      	str	r0, [r1, #52]	; 0x34
 8003bf4:	3230      	adds	r2, #48	; 0x30
 8003bf6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8003bfa:	00a1      	lsls	r1, r4, #2
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	3108      	adds	r1, #8
 8003c00:	440a      	add	r2, r1
 8003c02:	4290      	cmp	r0, r2
 8003c04:	d00a      	beq.n	8003c1c <vTaskSwitchContext+0x80>
 8003c06:	4908      	ldr	r1, [pc, #32]	; (8003c28 <vTaskSwitchContext+0x8c>)
 8003c08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c0c:	009a      	lsls	r2, r3, #2
 8003c0e:	440a      	add	r2, r1
 8003c10:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8003c18:	bc10      	pop	{r4}
 8003c1a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c1c:	6840      	ldr	r0, [r0, #4]
 8003c1e:	4a02      	ldr	r2, [pc, #8]	; (8003c28 <vTaskSwitchContext+0x8c>)
 8003c20:	4422      	add	r2, r4
 8003c22:	6350      	str	r0, [r2, #52]	; 0x34
 8003c24:	e7ef      	b.n	8003c06 <vTaskSwitchContext+0x6a>
 8003c26:	bf00      	nop
 8003c28:	20000034 	.word	0x20000034

08003c2c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003c2c:	b160      	cbz	r0, 8003c48 <vTaskPlaceOnEventList+0x1c>
{
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <vTaskPlaceOnEventList+0x30>)
 8003c34:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003c38:	3118      	adds	r1, #24
 8003c3a:	f7ff f844 	bl	8002cc6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7ff fd99 	bl	8003778 <prvAddCurrentTaskToDelayedList>
}
 8003c46:	bd10      	pop	{r4, pc}
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003c58:	e7fe      	b.n	8003c58 <vTaskPlaceOnEventList+0x2c>
 8003c5a:	bf00      	nop
 8003c5c:	20000034 	.word	0x20000034

08003c60 <xTaskRemoveFromEventList>:
{
 8003c60:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c62:	68c3      	ldr	r3, [r0, #12]
 8003c64:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003c66:	b34c      	cbz	r4, 8003cbc <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c68:	f104 0518 	add.w	r5, r4, #24
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f7ff f843 	bl	8002cf8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <xTaskRemoveFromEventList+0x7c>)
 8003c74:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003c78:	bb4b      	cbnz	r3, 8003cce <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c7a:	1d25      	adds	r5, r4, #4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff f83b 	bl	8002cf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c84:	2201      	movs	r2, #1
 8003c86:	4082      	lsls	r2, r0
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <xTaskRemoveFromEventList+0x7c>)
 8003c8a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8003c94:	3330      	adds	r3, #48	; 0x30
 8003c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003ca0:	f7ff f806 	bl	8002cb0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <xTaskRemoveFromEventList+0x7c>)
 8003ca8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d912      	bls.n	8003cd8 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <xTaskRemoveFromEventList+0x7c>)
 8003cb6:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
 8003cba:	e00e      	b.n	8003cda <xTaskRemoveFromEventList+0x7a>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003ccc:	e7fe      	b.n	8003ccc <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <xTaskRemoveFromEventList+0x80>)
 8003cd2:	f7fe ffed 	bl	8002cb0 <vListInsertEnd>
 8003cd6:	e7e5      	b.n	8003ca4 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8003cd8:	2000      	movs	r0, #0
}
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000034 	.word	0x20000034
 8003ce0:	20000048 	.word	0x20000048

08003ce4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <vTaskInternalSetTimeOutState+0x10>)
 8003ce6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8003cea:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003cf0:	6043      	str	r3, [r0, #4]
}
 8003cf2:	4770      	bx	lr
 8003cf4:	20000034 	.word	0x20000034

08003cf8 <xTaskCheckForTimeOut>:
{
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003cfa:	b1d8      	cbz	r0, 8003d34 <xTaskCheckForTimeOut+0x3c>
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8003d00:	b309      	cbz	r1, 8003d46 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8003d02:	f000 f9df 	bl	80040c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <xTaskCheckForTimeOut+0x80>)
 8003d08:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d0c:	686b      	ldr	r3, [r5, #4]
 8003d0e:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003d16:	d027      	beq.n	8003d68 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d18:	682f      	ldr	r7, [r5, #0]
 8003d1a:	4e17      	ldr	r6, [pc, #92]	; (8003d78 <xTaskCheckForTimeOut+0x80>)
 8003d1c:	f8d6 611c 	ldr.w	r6, [r6, #284]	; 0x11c
 8003d20:	42b7      	cmp	r7, r6
 8003d22:	d001      	beq.n	8003d28 <xTaskCheckForTimeOut+0x30>
 8003d24:	428b      	cmp	r3, r1
 8003d26:	d924      	bls.n	8003d72 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d28:	4282      	cmp	r2, r0
 8003d2a:	d815      	bhi.n	8003d58 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003d30:	2401      	movs	r4, #1
 8003d32:	e01a      	b.n	8003d6a <xTaskCheckForTimeOut+0x72>
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8003d44:	e7fe      	b.n	8003d44 <xTaskCheckForTimeOut+0x4c>
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003d56:	e7fe      	b.n	8003d56 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8003d58:	1a5b      	subs	r3, r3, r1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f7ff ffc0 	bl	8003ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d64:	2400      	movs	r4, #0
 8003d66:	e000      	b.n	8003d6a <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8003d68:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003d6a:	f000 f9cd 	bl	8004108 <vPortExitCritical>
}
 8003d6e:	4620      	mov	r0, r4
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8003d72:	2401      	movs	r4, #1
 8003d74:	e7f9      	b.n	8003d6a <xTaskCheckForTimeOut+0x72>
 8003d76:	bf00      	nop
 8003d78:	20000034 	.word	0x20000034

08003d7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003d7c:	4b02      	ldr	r3, [pc, #8]	; (8003d88 <vTaskMissedYield+0xc>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000034 	.word	0x20000034

08003d8c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <xTaskGetSchedulerState+0x1c>)
 8003d8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003d92:	b13b      	cbz	r3, 8003da4 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <xTaskGetSchedulerState+0x1c>)
 8003d96:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003d9a:	b10b      	cbz	r3, 8003da0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d9c:	2000      	movs	r0, #0
	}
 8003d9e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8003da0:	2002      	movs	r0, #2
 8003da2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003da4:	2001      	movs	r0, #1
 8003da6:	4770      	bx	lr
 8003da8:	20000034 	.word	0x20000034

08003dac <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d05a      	beq.n	8003e66 <xTaskPriorityInherit+0xba>
	{
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003db4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003db6:	4a2e      	ldr	r2, [pc, #184]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003db8:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8003dbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d248      	bcs.n	8003e54 <xTaskPriorityInherit+0xa8>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dc2:	6982      	ldr	r2, [r0, #24]
 8003dc4:	2a00      	cmp	r2, #0
 8003dc6:	db06      	blt.n	8003dd6 <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc8:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003dca:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8003dce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dd0:	f1c2 0207 	rsb	r2, r2, #7
 8003dd4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003dd6:	6961      	ldr	r1, [r4, #20]
 8003dd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <xTaskPriorityInherit+0xc8>)
 8003dde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003de2:	4299      	cmp	r1, r3
 8003de4:	d006      	beq.n	8003df4 <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003de8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003df0:	2001      	movs	r0, #1
	}
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df4:	1d25      	adds	r5, r4, #4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f7fe ff7e 	bl	8002cf8 <uxListRemove>
 8003dfc:	b1b0      	cbz	r0, 8003e2c <xTaskPriorityInherit+0x80>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003dfe:	481c      	ldr	r0, [pc, #112]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003e00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003e08:	2401      	movs	r4, #1
 8003e0a:	fa04 f203 	lsl.w	r2, r4, r3
 8003e0e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8003e12:	430a      	orrs	r2, r1
 8003e14:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8003e18:	3030      	adds	r0, #48	; 0x30
 8003e1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e1e:	4629      	mov	r1, r5
 8003e20:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003e24:	f7fe ff44 	bl	8002cb0 <vListInsertEnd>
				xReturn = pdTRUE;
 8003e28:	4620      	mov	r0, r4
 8003e2a:	e7e2      	b.n	8003df2 <xTaskPriorityInherit+0x46>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003e2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e2e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003e34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1df      	bne.n	8003dfe <xTaskPriorityInherit+0x52>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	fa03 f202 	lsl.w	r2, r3, r2
 8003e44:	490a      	ldr	r1, [pc, #40]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003e46:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8003e4a:	ea23 0302 	bic.w	r3, r3, r2
 8003e4e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
 8003e52:	e7d4      	b.n	8003dfe <xTaskPriorityInherit+0x52>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <xTaskPriorityInherit+0xc4>)
 8003e58:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d303      	bcc.n	8003e6a <xTaskPriorityInherit+0xbe>
	BaseType_t xReturn = pdFALSE;
 8003e62:	2000      	movs	r0, #0
 8003e64:	e7c5      	b.n	8003df2 <xTaskPriorityInherit+0x46>
 8003e66:	2000      	movs	r0, #0
	}
 8003e68:	4770      	bx	lr
					xReturn = pdTRUE;
 8003e6a:	2001      	movs	r0, #1
		return xReturn;
 8003e6c:	e7c1      	b.n	8003df2 <xTaskPriorityInherit+0x46>
 8003e6e:	bf00      	nop
 8003e70:	20000034 	.word	0x20000034
 8003e74:	20000064 	.word	0x20000064

08003e78 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d052      	beq.n	8003f22 <xTaskPriorityDisinherit+0xaa>
	{
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003e80:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <xTaskPriorityDisinherit+0xb4>)
 8003e82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e86:	4283      	cmp	r3, r0
 8003e88:	d008      	beq.n	8003e9c <xTaskPriorityDisinherit+0x24>
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	e7fe      	b.n	8003e9a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003e9e:	b943      	cbnz	r3, 8003eb2 <xTaskPriorityDisinherit+0x3a>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	e7fe      	b.n	8003eb0 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003eb6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003eb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	d033      	beq.n	8003f26 <xTaskPriorityDisinherit+0xae>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ebe:	b10b      	cbz	r3, 8003ec4 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 8003ec0:	2000      	movs	r0, #0
	}
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ec4:	1d05      	adds	r5, r0, #4
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f7fe ff16 	bl	8002cf8 <uxListRemove>
 8003ecc:	b988      	cbnz	r0, 8003ef2 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ece:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ed0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003ed4:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <xTaskPriorityDisinherit+0xb4>)
 8003ed6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	b94b      	cbnz	r3, 8003ef2 <xTaskPriorityDisinherit+0x7a>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	fa03 f202 	lsl.w	r2, r3, r2
 8003ee4:	4911      	ldr	r1, [pc, #68]	; (8003f2c <xTaskPriorityDisinherit+0xb4>)
 8003ee6:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8003eea:	ea23 0302 	bic.w	r3, r3, r2
 8003eee:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ef2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	f1c3 0207 	rsb	r2, r3, #7
 8003efa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003efc:	2401      	movs	r4, #1
 8003efe:	fa04 f103 	lsl.w	r1, r4, r3
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <xTaskPriorityDisinherit+0xb4>)
 8003f04:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8003f08:	4301      	orrs	r1, r0
 8003f0a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8003f0e:	3230      	adds	r2, #48	; 0x30
 8003f10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f14:	4629      	mov	r1, r5
 8003f16:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8003f1a:	f7fe fec9 	bl	8002cb0 <vListInsertEnd>
					xReturn = pdTRUE;
 8003f1e:	4620      	mov	r0, r4
 8003f20:	e7cf      	b.n	8003ec2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8003f22:	2000      	movs	r0, #0
	}
 8003f24:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8003f26:	2000      	movs	r0, #0
 8003f28:	e7cb      	b.n	8003ec2 <xTaskPriorityDisinherit+0x4a>
 8003f2a:	bf00      	nop
 8003f2c:	20000034 	.word	0x20000034

08003f30 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d05d      	beq.n	8003ff0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
	{
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	460a      	mov	r2, r1
 8003f38:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8003f3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003f3c:	b941      	cbnz	r1, 8003f50 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	e7fe      	b.n	8003f4e <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003f50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d200      	bcs.n	8003f58 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003f56:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003f58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d001      	beq.n	8003f62 <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003f5e:	2901      	cmp	r1, #1
 8003f60:	d000      	beq.n	8003f64 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8003f64:	4923      	ldr	r1, [pc, #140]	; (8003ff4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8003f66:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8003f6a:	42a1      	cmp	r1, r4
 8003f6c:	d037      	beq.n	8003fde <vTaskPriorityDisinheritAfterTimeout+0xae>
					pxTCB->uxPriority = uxPriorityToUse;
 8003f6e:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f70:	69a1      	ldr	r1, [r4, #24]
 8003f72:	2900      	cmp	r1, #0
 8003f74:	db02      	blt.n	8003f7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f76:	f1c3 0307 	rsb	r3, r3, #7
 8003f7a:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f7c:	6961      	ldr	r1, [r4, #20]
 8003f7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8003f84:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003f88:	4291      	cmp	r1, r2
 8003f8a:	d1ea      	bne.n	8003f62 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f8c:	1d25      	adds	r5, r4, #4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f7fe feb2 	bl	8002cf8 <uxListRemove>
 8003f94:	b988      	cbnz	r0, 8003fba <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f98:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8003f9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	b94b      	cbnz	r3, 8003fba <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	fa03 f202 	lsl.w	r2, r3, r2
 8003fac:	4911      	ldr	r1, [pc, #68]	; (8003ff4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8003fae:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8003fb2:	ea23 0302 	bic.w	r3, r3, r2
 8003fb6:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
						prvAddTaskToReadyList( pxTCB );
 8003fba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4082      	lsls	r2, r0
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8003fc2:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8003fcc:	3330      	adds	r3, #48	; 0x30
 8003fce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003fd8:	f7fe fe6a 	bl	8002cb0 <vListInsertEnd>
	}
 8003fdc:	e7c1      	b.n	8003f62 <vTaskPriorityDisinheritAfterTimeout+0x32>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8003fee:	e7fe      	b.n	8003fee <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000034 	.word	0x20000034
 8003ff8:	20000064 	.word	0x20000064

08003ffc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <pvTaskIncrementMutexHeldCount+0x1c>)
 8003ffe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004002:	b12b      	cbz	r3, 8004010 <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <pvTaskIncrementMutexHeldCount+0x1c>)
 8004006:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800400a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800400c:	3301      	adds	r3, #1
 800400e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8004010:	4b01      	ldr	r3, [pc, #4]	; (8004018 <pvTaskIncrementMutexHeldCount+0x1c>)
 8004012:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8004016:	4770      	bx	lr
 8004018:	20000034 	.word	0x20000034

0800401c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800401c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800401e:	2300      	movs	r3, #0
 8004020:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <prvTaskExitError+0x3c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d008      	beq.n	800403e <prvTaskExitError+0x22>
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	e7fe      	b.n	800403c <prvTaskExitError+0x20>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0fc      	beq.n	800404e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004054:	b002      	add	sp, #8
 8004056:	4770      	bx	lr
 8004058:	20000008 	.word	0x20000008

0800405c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800405c:	4806      	ldr	r0, [pc, #24]	; (8004078 <prvPortStartFirstTask+0x1c>)
 800405e:	6800      	ldr	r0, [r0, #0]
 8004060:	6800      	ldr	r0, [r0, #0]
 8004062:	f380 8808 	msr	MSP, r0
 8004066:	b662      	cpsie	i
 8004068:	b661      	cpsie	f
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	df00      	svc	0
 8004074:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004076:	0000      	.short	0x0000
 8004078:	e000ed08 	.word	0xe000ed08

0800407c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800407c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004080:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004084:	f021 0101 	bic.w	r1, r1, #1
 8004088:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <pxPortInitialiseStack+0x20>)
 800408e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004092:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004096:	3840      	subs	r0, #64	; 0x40
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	0800401d 	.word	0x0800401d

080040a0 <SVC_Handler>:
	__asm volatile (
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <pxCurrentTCBConst2>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040aa:	f380 8809 	msr	PSP, r0
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80040be:	4770      	bx	lr

080040c0 <pxCurrentTCBConst2>:
 80040c0:	20000134 	.word	0x20000134

080040c4 <vPortEnterCritical>:
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <vPortEnterCritical+0x3c>)
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d000      	beq.n	80040e2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80040e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <vPortEnterCritical+0x40>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80040ea:	d0f9      	beq.n	80040e0 <vPortEnterCritical+0x1c>
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	e7fe      	b.n	80040fc <vPortEnterCritical+0x38>
 80040fe:	bf00      	nop
 8004100:	20000008 	.word	0x20000008
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <vPortExitCritical+0x28>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	b943      	cbnz	r3, 8004120 <vPortExitCritical+0x18>
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	e7fe      	b.n	800411e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004120:	3b01      	subs	r3, #1
 8004122:	4a03      	ldr	r2, [pc, #12]	; (8004130 <vPortExitCritical+0x28>)
 8004124:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004126:	b90b      	cbnz	r3, 800412c <vPortExitCritical+0x24>
	__asm volatile
 8004128:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000008 	.word	0x20000008
	...

08004140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004140:	f3ef 8009 	mrs	r0, PSP
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <pxCurrentTCBConst>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004150:	6010      	str	r0, [r2, #0]
 8004152:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004156:	f04f 0050 	mov.w	r0, #80	; 0x50
 800415a:	f380 8811 	msr	BASEPRI, r0
 800415e:	f7ff fd1d 	bl	8003b9c <vTaskSwitchContext>
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6808      	ldr	r0, [r1, #0]
 8004172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004176:	f380 8809 	msr	PSP, r0
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	4770      	bx	lr

08004180 <pxCurrentTCBConst>:
 8004180:	20000134 	.word	0x20000134

08004184 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004184:	b508      	push	{r3, lr}
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004196:	f7ff fbdd 	bl	8003954 <xTaskIncrementTick>
 800419a:	b118      	cbz	r0, 80041a4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <SysTick_Handler+0x28>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80041a4:	2300      	movs	r3, #0
 80041a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80041aa:	bd08      	pop	{r3, pc}
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <vPortSetupTimerInterrupt+0x24>)
 80041b2:	2300      	movs	r3, #0
 80041b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <vPortSetupTimerInterrupt+0x28>)
 80041b8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <vPortSetupTimerInterrupt+0x2c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4908      	ldr	r1, [pc, #32]	; (80041e0 <vPortSetupTimerInterrupt+0x30>)
 80041c0:	fba1 1303 	umull	r1, r3, r1, r3
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4906      	ldr	r1, [pc, #24]	; (80041e4 <vPortSetupTimerInterrupt+0x34>)
 80041ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041cc:	2307      	movs	r3, #7
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e010 	.word	0xe000e010
 80041d8:	e000e018 	.word	0xe000e018
 80041dc:	20000014 	.word	0x20000014
 80041e0:	10624dd3 	.word	0x10624dd3
 80041e4:	e000e014 	.word	0xe000e014

080041e8 <xPortStartScheduler>:
{
 80041e8:	b510      	push	{r4, lr}
 80041ea:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <xPortStartScheduler+0xa4>)
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004200:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004208:	4a21      	ldr	r2, [pc, #132]	; (8004290 <xPortStartScheduler+0xa8>)
 800420a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800420c:	2307      	movs	r3, #7
 800420e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004210:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004214:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004218:	d00a      	beq.n	8004230 <xPortStartScheduler+0x48>
			ulMaxPRIGROUPValue--;
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <xPortStartScheduler+0xa8>)
 800421c:	6853      	ldr	r3, [r2, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004222:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f88d 3003 	strb.w	r3, [sp, #3]
 800422e:	e7ef      	b.n	8004210 <xPortStartScheduler+0x28>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <xPortStartScheduler+0xa8>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d008      	beq.n	800424a <xPortStartScheduler+0x62>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	e7fe      	b.n	8004248 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800424a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800424c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004250:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <xPortStartScheduler+0xa8>)
 8004252:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004254:	9b01      	ldr	r3, [sp, #4]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4a0c      	ldr	r2, [pc, #48]	; (800428c <xPortStartScheduler+0xa4>)
 800425a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <xPortStartScheduler+0xac>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800426c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800426e:	f7ff ff9f 	bl	80041b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004272:	2400      	movs	r4, #0
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <xPortStartScheduler+0xb0>)
 8004276:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8004278:	f7ff fef0 	bl	800405c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800427c:	f7ff fc8e 	bl	8003b9c <vTaskSwitchContext>
	prvTaskExitError();
 8004280:	f7ff fecc 	bl	800401c <prvTaskExitError>
}
 8004284:	4620      	mov	r0, r4
 8004286:	b002      	add	sp, #8
 8004288:	bd10      	pop	{r4, pc}
 800428a:	bf00      	nop
 800428c:	e000e400 	.word	0xe000e400
 8004290:	2000015c 	.word	0x2000015c
 8004294:	e000ed20 	.word	0xe000ed20
 8004298:	20000008 	.word	0x20000008

0800429c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800429c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d90f      	bls.n	80042c4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <vPortValidateInterruptPriority+0x4c>)
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <vPortValidateInterruptPriority+0x50>)
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d908      	bls.n	80042c4 <vPortValidateInterruptPriority+0x28>
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	e7fe      	b.n	80042c2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <vPortValidateInterruptPriority+0x54>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042cc:	4a07      	ldr	r2, [pc, #28]	; (80042ec <vPortValidateInterruptPriority+0x50>)
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d908      	bls.n	80042e6 <vPortValidateInterruptPriority+0x4a>
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	e7fe      	b.n	80042e4 <vPortValidateInterruptPriority+0x48>
	}
 80042e6:	4770      	bx	lr
 80042e8:	e000e3f0 	.word	0xe000e3f0
 80042ec:	2000015c 	.word	0x2000015c
 80042f0:	e000ed0c 	.word	0xe000ed0c

080042f4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042f4:	4a10      	ldr	r2, [pc, #64]	; (8004338 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042f6:	f012 0f07 	tst.w	r2, #7
 80042fa:	d01a      	beq.n	8004332 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042fc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042fe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004302:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8004306:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004308:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800430a:	490c      	ldr	r1, [pc, #48]	; (800433c <prvHeapInit+0x48>)
 800430c:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800430e:	2000      	movs	r0, #0
 8004310:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004312:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004314:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004316:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800431a:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800431c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800431e:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004320:	1a98      	subs	r0, r3, r2
 8004322:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004324:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004326:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004328:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800432a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800432e:	614b      	str	r3, [r1, #20]
}
 8004330:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004336:	e7e8      	b.n	800430a <prvHeapInit+0x16>
 8004338:	2000017c 	.word	0x2000017c
 800433c:	20000164 	.word	0x20000164

08004340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004340:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <prvInsertBlockIntoFreeList+0x4c>)
 8004344:	461a      	mov	r2, r3
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4283      	cmp	r3, r0
 800434a:	d3fb      	bcc.n	8004344 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800434c:	6851      	ldr	r1, [r2, #4]
 800434e:	1854      	adds	r4, r2, r1
 8004350:	4284      	cmp	r4, r0
 8004352:	d009      	beq.n	8004368 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004354:	6841      	ldr	r1, [r0, #4]
 8004356:	1844      	adds	r4, r0, r1
 8004358:	42a3      	cmp	r3, r4
 800435a:	d00a      	beq.n	8004372 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800435c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800435e:	4290      	cmp	r0, r2
 8004360:	d000      	beq.n	8004364 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004362:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004364:	bc10      	pop	{r4}
 8004366:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004368:	6840      	ldr	r0, [r0, #4]
 800436a:	4401      	add	r1, r0
 800436c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800436e:	4610      	mov	r0, r2
 8004370:	e7f0      	b.n	8004354 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004372:	4c06      	ldr	r4, [pc, #24]	; (800438c <prvInsertBlockIntoFreeList+0x4c>)
 8004374:	68a4      	ldr	r4, [r4, #8]
 8004376:	42a3      	cmp	r3, r4
 8004378:	d006      	beq.n	8004388 <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4419      	add	r1, r3
 800437e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6003      	str	r3, [r0, #0]
 8004386:	e7ea      	b.n	800435e <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004388:	6004      	str	r4, [r0, #0]
 800438a:	e7e8      	b.n	800435e <prvInsertBlockIntoFreeList+0x1e>
 800438c:	20000164 	.word	0x20000164

08004390 <pvPortMalloc>:
{
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004394:	f7ff fad4 	bl	8003940 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <pvPortMalloc+0xd8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	b1a3      	cbz	r3, 80043c8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800439e:	4b32      	ldr	r3, [pc, #200]	; (8004468 <pvPortMalloc+0xd8>)
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	421c      	tst	r4, r3
 80043a4:	d149      	bne.n	800443a <pvPortMalloc+0xaa>
			if( xWantedSize > 0 )
 80043a6:	b134      	cbz	r4, 80043b6 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80043a8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043aa:	f014 0f07 	tst.w	r4, #7
 80043ae:	d002      	beq.n	80043b6 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043b0:	f024 0407 	bic.w	r4, r4, #7
 80043b4:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043b6:	2c00      	cmp	r4, #0
 80043b8:	d041      	beq.n	800443e <pvPortMalloc+0xae>
 80043ba:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <pvPortMalloc+0xd8>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	42a3      	cmp	r3, r4
 80043c0:	d34c      	bcc.n	800445c <pvPortMalloc+0xcc>
				pxBlock = xStart.pxNextFreeBlock;
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <pvPortMalloc+0xd8>)
 80043c4:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043c6:	e004      	b.n	80043d2 <pvPortMalloc+0x42>
			prvHeapInit();
 80043c8:	f7ff ff94 	bl	80042f4 <prvHeapInit>
 80043cc:	e7e7      	b.n	800439e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80043ce:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80043d0:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043d2:	686a      	ldr	r2, [r5, #4]
 80043d4:	42a2      	cmp	r2, r4
 80043d6:	d202      	bcs.n	80043de <pvPortMalloc+0x4e>
 80043d8:	682a      	ldr	r2, [r5, #0]
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d1f7      	bne.n	80043ce <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <pvPortMalloc+0xd8>)
 80043e0:	6892      	ldr	r2, [r2, #8]
 80043e2:	42aa      	cmp	r2, r5
 80043e4:	d03c      	beq.n	8004460 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043e6:	681e      	ldr	r6, [r3, #0]
 80043e8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043ea:	682a      	ldr	r2, [r5, #0]
 80043ec:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043ee:	686b      	ldr	r3, [r5, #4]
 80043f0:	1b1b      	subs	r3, r3, r4
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d910      	bls.n	8004418 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043f6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f8:	f010 0f07 	tst.w	r0, #7
 80043fc:	d008      	beq.n	8004410 <pvPortMalloc+0x80>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	e7fe      	b.n	800440e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004410:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004412:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004414:	f7ff ff94 	bl	8004340 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004418:	6869      	ldr	r1, [r5, #4]
 800441a:	4a13      	ldr	r2, [pc, #76]	; (8004468 <pvPortMalloc+0xd8>)
 800441c:	6913      	ldr	r3, [r2, #16]
 800441e:	1a5b      	subs	r3, r3, r1
 8004420:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004422:	68d2      	ldr	r2, [r2, #12]
 8004424:	4293      	cmp	r3, r2
 8004426:	d201      	bcs.n	800442c <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004428:	4a0f      	ldr	r2, [pc, #60]	; (8004468 <pvPortMalloc+0xd8>)
 800442a:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <pvPortMalloc+0xd8>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	430b      	orrs	r3, r1
 8004432:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	e002      	b.n	8004440 <pvPortMalloc+0xb0>
void *pvReturn = NULL;
 800443a:	2600      	movs	r6, #0
 800443c:	e000      	b.n	8004440 <pvPortMalloc+0xb0>
 800443e:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8004440:	f7ff fb0e 	bl	8003a60 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004444:	f016 0f07 	tst.w	r6, #7
 8004448:	d00c      	beq.n	8004464 <pvPortMalloc+0xd4>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	e7fe      	b.n	800445a <pvPortMalloc+0xca>
void *pvReturn = NULL;
 800445c:	2600      	movs	r6, #0
 800445e:	e7ef      	b.n	8004440 <pvPortMalloc+0xb0>
 8004460:	2600      	movs	r6, #0
 8004462:	e7ed      	b.n	8004440 <pvPortMalloc+0xb0>
}
 8004464:	4630      	mov	r0, r6
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	20000164 	.word	0x20000164

0800446c <vPortFree>:
	if( pv != NULL )
 800446c:	b380      	cbz	r0, 80044d0 <vPortFree+0x64>
{
 800446e:	b538      	push	{r3, r4, r5, lr}
 8004470:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8004472:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004476:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <vPortFree+0x68>)
 800447c:	6952      	ldr	r2, [r2, #20]
 800447e:	4213      	tst	r3, r2
 8004480:	d108      	bne.n	8004494 <vPortFree+0x28>
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	e7fe      	b.n	8004492 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004494:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004498:	b141      	cbz	r1, 80044ac <vPortFree+0x40>
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	e7fe      	b.n	80044aa <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044ac:	ea23 0302 	bic.w	r3, r3, r2
 80044b0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80044b4:	f7ff fa44 	bl	8003940 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044b8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <vPortFree+0x68>)
 80044be:	6913      	ldr	r3, [r2, #16]
 80044c0:	440b      	add	r3, r1
 80044c2:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7ff ff3b 	bl	8004340 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80044ca:	f7ff fac9 	bl	8003a60 <xTaskResumeAll>
}
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000164 	.word	0x20000164

080044d8 <getRTC>:

#include "DS3231.h"

struct DS3231 RTC_DATA;

void getRTC(I2C_HandleTypeDef *hi2c){
 80044d8:	b500      	push	{lr}
 80044da:	b083      	sub	sp, #12
	HAL_I2C_Mem_Read_DMA(&(*hi2c),DS3231_ADDRESS,0,I2C_MEMADD_SIZE_8BIT,RTC_DATA.DS3231,19);
 80044dc:	2313      	movs	r3, #19
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <getRTC+0x1c>)
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2301      	movs	r3, #1
 80044e6:	2200      	movs	r2, #0
 80044e8:	21d0      	movs	r1, #208	; 0xd0
 80044ea:	f7fc feb7 	bl	800125c <HAL_I2C_Mem_Read_DMA>
}
 80044ee:	b003      	add	sp, #12
 80044f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80044f4:	20002484 	.word	0x20002484

080044f8 <Display>:
uint8_t * Display(uint8_t State){
	switch(State){
 80044f8:	3801      	subs	r0, #1
 80044fa:	2805      	cmp	r0, #5
 80044fc:	d804      	bhi.n	8004508 <Display+0x10>
 80044fe:	e8df f000 	tbb	[pc, r0]
 8004502:	050f      	.short	0x050f
 8004504:	0d0b0907 	.word	0x0d0b0907
			break;
		case DB_TIME:
			return RTC_DATA.TIME[CONFIG];
			break;
		case DB_DATE:
			return RTC_DATA.DATE[CONFIG];
 8004508:	4806      	ldr	r0, [pc, #24]	; (8004524 <Display+0x2c>)
 800450a:	4770      	bx	lr
			return RTC_DATA.ALARM[CURRENT];
 800450c:	4806      	ldr	r0, [pc, #24]	; (8004528 <Display+0x30>)
 800450e:	4770      	bx	lr
			return RTC_DATA.TEMP;
 8004510:	4806      	ldr	r0, [pc, #24]	; (800452c <Display+0x34>)
 8004512:	4770      	bx	lr
			return RTC_DATA.TIME[CONFIG];
 8004514:	4806      	ldr	r0, [pc, #24]	; (8004530 <Display+0x38>)
 8004516:	4770      	bx	lr
			return RTC_DATA.DATE[CONFIG];
 8004518:	4806      	ldr	r0, [pc, #24]	; (8004534 <Display+0x3c>)
 800451a:	4770      	bx	lr
			break;
		case DB_ALARM:
			return RTC_DATA.ALARM[CONFIG];
 800451c:	4806      	ldr	r0, [pc, #24]	; (8004538 <Display+0x40>)
 800451e:	4770      	bx	lr
			return RTC_DATA.DATE[CURRENT];
 8004520:	4806      	ldr	r0, [pc, #24]	; (800453c <Display+0x44>)
			break;
		default:
			return RTC_DATA.TIME[CURRENT];
			break;
	}
}
 8004522:	4770      	bx	lr
 8004524:	20002497 	.word	0x20002497
 8004528:	200024af 	.word	0x200024af
 800452c:	200024bb 	.word	0x200024bb
 8004530:	2000249d 	.word	0x2000249d
 8004534:	200024a9 	.word	0x200024a9
 8004538:	200024b5 	.word	0x200024b5
 800453c:	200024a3 	.word	0x200024a3

08004540 <setConfigRTC>:
void setConfigRTC(I2C_HandleTypeDef *hi2c){
 8004540:	b530      	push	{r4, r5, lr}
 8004542:	b085      	sub	sp, #20
 8004544:	4604      	mov	r4, r0
	uint8_t data[2];
	data[0]=CONFIG1_ADDRESS;
 8004546:	230e      	movs	r3, #14
 8004548:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1]=0x04;
 800454c:	2304      	movs	r3, #4
 800454e:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 8004552:	2564      	movs	r5, #100	; 0x64
 8004554:	9500      	str	r5, [sp, #0]
 8004556:	2302      	movs	r3, #2
 8004558:	aa03      	add	r2, sp, #12
 800455a:	21d0      	movs	r1, #208	; 0xd0
 800455c:	f7fc fdc2 	bl	80010e4 <HAL_I2C_Master_Transmit>
	data[0]=CONFIG2_ADDRESS;
 8004560:	230f      	movs	r3, #15
 8004562:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1]=0x00;
 8004566:	2300      	movs	r3, #0
 8004568:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 800456c:	9500      	str	r5, [sp, #0]
 800456e:	2302      	movs	r3, #2
 8004570:	aa03      	add	r2, sp, #12
 8004572:	21d0      	movs	r1, #208	; 0xd0
 8004574:	4620      	mov	r0, r4
 8004576:	f7fc fdb5 	bl	80010e4 <HAL_I2C_Master_Transmit>

}
 800457a:	b005      	add	sp, #20
 800457c:	bd30      	pop	{r4, r5, pc}

0800457e <stopAlarm>:
void stopAlarm(I2C_HandleTypeDef *hi2c){
 800457e:	b500      	push	{lr}
 8004580:	b085      	sub	sp, #20
	uint8_t data[2];
	data[0]=CONFIG2_ADDRESS;
 8004582:	230f      	movs	r3, #15
 8004584:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1]=0x00;
 8004588:	2300      	movs	r3, #0
 800458a:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 800458e:	2364      	movs	r3, #100	; 0x64
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2302      	movs	r3, #2
 8004594:	aa03      	add	r2, sp, #12
 8004596:	21d0      	movs	r1, #208	; 0xd0
 8004598:	f7fc fda4 	bl	80010e4 <HAL_I2C_Master_Transmit>
}
 800459c:	b005      	add	sp, #20
 800459e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080045a4 <enableAlarm>:
uint8_t enableAlarm(I2C_HandleTypeDef *hi2c){
 80045a4:	b510      	push	{r4, lr}
 80045a6:	b084      	sub	sp, #16
	uint8_t STATE=!(RTC_DATA.A1IE);
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <enableAlarm+0x3c>)
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf0c      	ite	eq
 80045b2:	2401      	moveq	r4, #1
 80045b4:	2400      	movne	r4, #0
	uint8_t data[2];
	data[0]=CONFIG1_ADDRESS;
 80045b6:	f04f 030e 	mov.w	r3, #14
 80045ba:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1]=(RTC_DATA.A1IE)? 0x04 : 0x05;
 80045be:	d00c      	beq.n	80045da <enableAlarm+0x36>
 80045c0:	2304      	movs	r3, #4
 80045c2:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80045c6:	2364      	movs	r3, #100	; 0x64
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	2302      	movs	r3, #2
 80045cc:	aa03      	add	r2, sp, #12
 80045ce:	21d0      	movs	r1, #208	; 0xd0
 80045d0:	f7fc fd88 	bl	80010e4 <HAL_I2C_Master_Transmit>
	return STATE;
}
 80045d4:	4620      	mov	r0, r4
 80045d6:	b004      	add	sp, #16
 80045d8:	bd10      	pop	{r4, pc}
	data[1]=(RTC_DATA.A1IE)? 0x04 : 0x05;
 80045da:	2305      	movs	r3, #5
 80045dc:	e7f1      	b.n	80045c2 <enableAlarm+0x1e>
 80045de:	bf00      	nop
 80045e0:	20002484 	.word	0x20002484

080045e4 <increase>:

void increase(uint8_t type,uint8_t unit){
	switch(type){
 80045e4:	2805      	cmp	r0, #5
 80045e6:	d059      	beq.n	800469c <increase+0xb8>
 80045e8:	2806      	cmp	r0, #6
 80045ea:	f000 80c4 	beq.w	8004776 <increase+0x192>
 80045ee:	2804      	cmp	r0, #4
 80045f0:	d000      	beq.n	80045f4 <increase+0x10>
			}
			break;
			}
		break;
	}
}
 80045f2:	4770      	bx	lr
		switch(unit){
 80045f4:	2901      	cmp	r1, #1
 80045f6:	d029      	beq.n	800464c <increase+0x68>
 80045f8:	2902      	cmp	r1, #2
 80045fa:	d00d      	beq.n	8004618 <increase+0x34>
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d1f8      	bne.n	80045f2 <increase+0xe>
			if((RTC_DATA.TIME[CONFIG][5]==2) && (RTC_DATA.TIME[CONFIG][4]==3)){
 8004600:	4b93      	ldr	r3, [pc, #588]	; (8004850 <increase+0x26c>)
 8004602:	7f9a      	ldrb	r2, [r3, #30]
 8004604:	2a02      	cmp	r2, #2
 8004606:	d03b      	beq.n	8004680 <increase+0x9c>
				if(RTC_DATA.TIME[CONFIG][4]!=9){
 8004608:	4b91      	ldr	r3, [pc, #580]	; (8004850 <increase+0x26c>)
 800460a:	7f5b      	ldrb	r3, [r3, #29]
 800460c:	2b09      	cmp	r3, #9
 800460e:	d03f      	beq.n	8004690 <increase+0xac>
					RTC_DATA.TIME[CONFIG][4]++;
 8004610:	3301      	adds	r3, #1
 8004612:	4a8f      	ldr	r2, [pc, #572]	; (8004850 <increase+0x26c>)
 8004614:	7753      	strb	r3, [r2, #29]
 8004616:	4770      	bx	lr
			if((RTC_DATA.TIME[CONFIG][1]==5) && (RTC_DATA.TIME[CONFIG][0]==9)){
 8004618:	4b8d      	ldr	r3, [pc, #564]	; (8004850 <increase+0x26c>)
 800461a:	7e9a      	ldrb	r2, [r3, #26]
 800461c:	2a05      	cmp	r2, #5
 800461e:	d007      	beq.n	8004630 <increase+0x4c>
				if(RTC_DATA.TIME[CONFIG][0]!=9){
 8004620:	4b8b      	ldr	r3, [pc, #556]	; (8004850 <increase+0x26c>)
 8004622:	7e5b      	ldrb	r3, [r3, #25]
 8004624:	2b09      	cmp	r3, #9
 8004626:	d00b      	beq.n	8004640 <increase+0x5c>
					RTC_DATA.TIME[CONFIG][0]++;
 8004628:	3301      	adds	r3, #1
 800462a:	4a89      	ldr	r2, [pc, #548]	; (8004850 <increase+0x26c>)
 800462c:	7653      	strb	r3, [r2, #25]
 800462e:	4770      	bx	lr
			if((RTC_DATA.TIME[CONFIG][1]==5) && (RTC_DATA.TIME[CONFIG][0]==9)){
 8004630:	7e5b      	ldrb	r3, [r3, #25]
 8004632:	2b09      	cmp	r3, #9
 8004634:	d1f4      	bne.n	8004620 <increase+0x3c>
				RTC_DATA.TIME[CONFIG][0]=0;
 8004636:	4b86      	ldr	r3, [pc, #536]	; (8004850 <increase+0x26c>)
 8004638:	2200      	movs	r2, #0
 800463a:	765a      	strb	r2, [r3, #25]
				RTC_DATA.TIME[CONFIG][1]=0;
 800463c:	769a      	strb	r2, [r3, #26]
 800463e:	4770      	bx	lr
					RTC_DATA.TIME[CONFIG][0]=0;
 8004640:	4b83      	ldr	r3, [pc, #524]	; (8004850 <increase+0x26c>)
 8004642:	2100      	movs	r1, #0
 8004644:	7659      	strb	r1, [r3, #25]
					RTC_DATA.TIME[CONFIG][1]++;
 8004646:	3201      	adds	r2, #1
 8004648:	769a      	strb	r2, [r3, #26]
 800464a:	4770      	bx	lr
			if((RTC_DATA.TIME[CONFIG][3]==5) && (RTC_DATA.TIME[CONFIG][2]==9)){
 800464c:	4b80      	ldr	r3, [pc, #512]	; (8004850 <increase+0x26c>)
 800464e:	7f1a      	ldrb	r2, [r3, #28]
 8004650:	2a05      	cmp	r2, #5
 8004652:	d007      	beq.n	8004664 <increase+0x80>
				if(RTC_DATA.TIME[CONFIG][2]!=9){
 8004654:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <increase+0x26c>)
 8004656:	7edb      	ldrb	r3, [r3, #27]
 8004658:	2b09      	cmp	r3, #9
 800465a:	d00b      	beq.n	8004674 <increase+0x90>
					RTC_DATA.TIME[CONFIG][2]++;
 800465c:	3301      	adds	r3, #1
 800465e:	4a7c      	ldr	r2, [pc, #496]	; (8004850 <increase+0x26c>)
 8004660:	76d3      	strb	r3, [r2, #27]
 8004662:	4770      	bx	lr
			if((RTC_DATA.TIME[CONFIG][3]==5) && (RTC_DATA.TIME[CONFIG][2]==9)){
 8004664:	7edb      	ldrb	r3, [r3, #27]
 8004666:	2b09      	cmp	r3, #9
 8004668:	d1f4      	bne.n	8004654 <increase+0x70>
				RTC_DATA.TIME[CONFIG][2]=0;
 800466a:	4b79      	ldr	r3, [pc, #484]	; (8004850 <increase+0x26c>)
 800466c:	2200      	movs	r2, #0
 800466e:	76da      	strb	r2, [r3, #27]
				RTC_DATA.TIME[CONFIG][3]=0;
 8004670:	771a      	strb	r2, [r3, #28]
 8004672:	4770      	bx	lr
					RTC_DATA.TIME[CONFIG][2]=0;
 8004674:	4b76      	ldr	r3, [pc, #472]	; (8004850 <increase+0x26c>)
 8004676:	2100      	movs	r1, #0
 8004678:	76d9      	strb	r1, [r3, #27]
					RTC_DATA.TIME[CONFIG][3]++;
 800467a:	3201      	adds	r2, #1
 800467c:	771a      	strb	r2, [r3, #28]
 800467e:	4770      	bx	lr
			if((RTC_DATA.TIME[CONFIG][5]==2) && (RTC_DATA.TIME[CONFIG][4]==3)){
 8004680:	7f5b      	ldrb	r3, [r3, #29]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d1c0      	bne.n	8004608 <increase+0x24>
				RTC_DATA.TIME[CONFIG][4]=0;
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <increase+0x26c>)
 8004688:	2200      	movs	r2, #0
 800468a:	775a      	strb	r2, [r3, #29]
				RTC_DATA.TIME[CONFIG][5]=0;
 800468c:	779a      	strb	r2, [r3, #30]
 800468e:	4770      	bx	lr
					RTC_DATA.TIME[CONFIG][4]=0;
 8004690:	4b6f      	ldr	r3, [pc, #444]	; (8004850 <increase+0x26c>)
 8004692:	2100      	movs	r1, #0
 8004694:	7759      	strb	r1, [r3, #29]
					RTC_DATA.TIME[CONFIG][5]++;
 8004696:	3201      	adds	r2, #1
 8004698:	779a      	strb	r2, [r3, #30]
 800469a:	4770      	bx	lr
		switch(unit){
 800469c:	2901      	cmp	r1, #1
 800469e:	d032      	beq.n	8004706 <increase+0x122>
 80046a0:	2902      	cmp	r1, #2
 80046a2:	d00d      	beq.n	80046c0 <increase+0xdc>
 80046a4:	2900      	cmp	r1, #0
 80046a6:	d1a4      	bne.n	80045f2 <increase+0xe>
			if(RTC_DATA.DATE[CONFIG][0]==9 && RTC_DATA.DATE[CONFIG][1]==9){
 80046a8:	4b69      	ldr	r3, [pc, #420]	; (8004850 <increase+0x26c>)
 80046aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	d04b      	beq.n	800474a <increase+0x166>
				if(RTC_DATA.DATE[CONFIG][0]!=9){
 80046b2:	2b09      	cmp	r3, #9
 80046b4:	d055      	beq.n	8004762 <increase+0x17e>
					RTC_DATA.DATE[CONFIG][0]++;
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a65      	ldr	r2, [pc, #404]	; (8004850 <increase+0x26c>)
 80046ba:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80046be:	4770      	bx	lr
			if((RTC_DATA.DATE[CONFIG][5]==3) && (RTC_DATA.DATE[CONFIG][4]==1)){
 80046c0:	4b63      	ldr	r3, [pc, #396]	; (8004850 <increase+0x26c>)
 80046c2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80046c6:	2a03      	cmp	r2, #3
 80046c8:	d009      	beq.n	80046de <increase+0xfa>
				if(RTC_DATA.DATE[CONFIG][4]!=9){
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <increase+0x26c>)
 80046cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d010      	beq.n	80046f6 <increase+0x112>
					RTC_DATA.DATE[CONFIG][4]++;
 80046d4:	3301      	adds	r3, #1
 80046d6:	4a5e      	ldr	r2, [pc, #376]	; (8004850 <increase+0x26c>)
 80046d8:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80046dc:	4770      	bx	lr
			if((RTC_DATA.DATE[CONFIG][5]==3) && (RTC_DATA.DATE[CONFIG][4]==1)){
 80046de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d1f1      	bne.n	80046ca <increase+0xe6>
				RTC_DATA.DATE[CONFIG][4]=1;
 80046e6:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <increase+0x26c>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				RTC_DATA.DATE[CONFIG][5]=0;
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80046f4:	4770      	bx	lr
					RTC_DATA.DATE[CONFIG][4]=0;
 80046f6:	4b56      	ldr	r3, [pc, #344]	; (8004850 <increase+0x26c>)
 80046f8:	2100      	movs	r1, #0
 80046fa:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
					RTC_DATA.DATE[CONFIG][5]++;
 80046fe:	3201      	adds	r2, #1
 8004700:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8004704:	4770      	bx	lr
			if((RTC_DATA.DATE[CONFIG][3]==1) && (RTC_DATA.DATE[CONFIG][2]==2)){
 8004706:	4b52      	ldr	r3, [pc, #328]	; (8004850 <increase+0x26c>)
 8004708:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800470c:	2a01      	cmp	r2, #1
 800470e:	d009      	beq.n	8004724 <increase+0x140>
				if(RTC_DATA.DATE[CONFIG][2]!=9){
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <increase+0x26c>)
 8004712:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004716:	2b09      	cmp	r3, #9
 8004718:	d00f      	beq.n	800473a <increase+0x156>
					RTC_DATA.DATE[CONFIG][2]++;
 800471a:	3301      	adds	r3, #1
 800471c:	4a4c      	ldr	r2, [pc, #304]	; (8004850 <increase+0x26c>)
 800471e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
 8004722:	4770      	bx	lr
			if((RTC_DATA.DATE[CONFIG][3]==1) && (RTC_DATA.DATE[CONFIG][2]==2)){
 8004724:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004728:	2b02      	cmp	r3, #2
 800472a:	d1f1      	bne.n	8004710 <increase+0x12c>
				RTC_DATA.DATE[CONFIG][2]=1;
 800472c:	4b48      	ldr	r3, [pc, #288]	; (8004850 <increase+0x26c>)
 800472e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				RTC_DATA.DATE[CONFIG][3]=0;
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004738:	4770      	bx	lr
					RTC_DATA.DATE[CONFIG][2]=0;
 800473a:	4b45      	ldr	r3, [pc, #276]	; (8004850 <increase+0x26c>)
 800473c:	2100      	movs	r1, #0
 800473e:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
					RTC_DATA.DATE[CONFIG][3]++;
 8004742:	3201      	adds	r2, #1
 8004744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004748:	4770      	bx	lr
			if(RTC_DATA.DATE[CONFIG][0]==9 && RTC_DATA.DATE[CONFIG][1]==9){
 800474a:	4a41      	ldr	r2, [pc, #260]	; (8004850 <increase+0x26c>)
 800474c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8004750:	2a09      	cmp	r2, #9
 8004752:	d1ae      	bne.n	80046b2 <increase+0xce>
				RTC_DATA.DATE[CONFIG][0]=0;
 8004754:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <increase+0x26c>)
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				RTC_DATA.DATE[CONFIG][1]=0;
 800475c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004760:	4770      	bx	lr
					RTC_DATA.DATE[CONFIG][0]=0;
 8004762:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <increase+0x26c>)
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					RTC_DATA.DATE[CONFIG][1]++;
 800476a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800476e:	3201      	adds	r2, #1
 8004770:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004774:	4770      	bx	lr
		switch(unit){
 8004776:	2901      	cmp	r1, #1
 8004778:	d035      	beq.n	80047e6 <increase+0x202>
 800477a:	2902      	cmp	r1, #2
 800477c:	d011      	beq.n	80047a2 <increase+0x1be>
 800477e:	2900      	cmp	r1, #0
 8004780:	f47f af37 	bne.w	80045f2 <increase+0xe>
			if((RTC_DATA.ALARM[CONFIG][5]==2) && (RTC_DATA.ALARM[CONFIG][4]==3)){
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <increase+0x26c>)
 8004786:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800478a:	2a02      	cmp	r2, #2
 800478c:	d04d      	beq.n	800482a <increase+0x246>
				if(RTC_DATA.ALARM[CONFIG][4]!=9){
 800478e:	4b30      	ldr	r3, [pc, #192]	; (8004850 <increase+0x26c>)
 8004790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004794:	2b09      	cmp	r3, #9
 8004796:	d053      	beq.n	8004840 <increase+0x25c>
					RTC_DATA.ALARM[CONFIG][4]++;
 8004798:	3301      	adds	r3, #1
 800479a:	4a2d      	ldr	r2, [pc, #180]	; (8004850 <increase+0x26c>)
 800479c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 80047a0:	4770      	bx	lr
			if((RTC_DATA.ALARM[CONFIG][1]==5) && (RTC_DATA.ALARM[CONFIG][0]==9)){
 80047a2:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <increase+0x26c>)
 80047a4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80047a8:	2a05      	cmp	r2, #5
 80047aa:	d009      	beq.n	80047c0 <increase+0x1dc>
				if(RTC_DATA.ALARM[CONFIG][0]!=9){
 80047ac:	4b28      	ldr	r3, [pc, #160]	; (8004850 <increase+0x26c>)
 80047ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047b2:	2b09      	cmp	r3, #9
 80047b4:	d00f      	beq.n	80047d6 <increase+0x1f2>
					RTC_DATA.ALARM[CONFIG][0]++;
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a25      	ldr	r2, [pc, #148]	; (8004850 <increase+0x26c>)
 80047ba:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 80047be:	4770      	bx	lr
			if((RTC_DATA.ALARM[CONFIG][1]==5) && (RTC_DATA.ALARM[CONFIG][0]==9)){
 80047c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	d1f1      	bne.n	80047ac <increase+0x1c8>
				RTC_DATA.ALARM[CONFIG][0]=0;
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <increase+0x26c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				RTC_DATA.ALARM[CONFIG][1]=0;
 80047d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80047d4:	4770      	bx	lr
					RTC_DATA.ALARM[CONFIG][0]=0;
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <increase+0x26c>)
 80047d8:	2100      	movs	r1, #0
 80047da:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
					RTC_DATA.ALARM[CONFIG][1]++;
 80047de:	3201      	adds	r2, #1
 80047e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80047e4:	4770      	bx	lr
			if((RTC_DATA.ALARM[CONFIG][3]==5) && (RTC_DATA.ALARM[CONFIG][2]==9)){
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <increase+0x26c>)
 80047e8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80047ec:	2a05      	cmp	r2, #5
 80047ee:	d009      	beq.n	8004804 <increase+0x220>
				if(RTC_DATA.ALARM[CONFIG][2]!=9){
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <increase+0x26c>)
 80047f2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d00f      	beq.n	800481a <increase+0x236>
					RTC_DATA.ALARM[CONFIG][2]++;
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <increase+0x26c>)
 80047fe:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
 8004802:	4770      	bx	lr
			if((RTC_DATA.ALARM[CONFIG][3]==5) && (RTC_DATA.ALARM[CONFIG][2]==9)){
 8004804:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004808:	2b09      	cmp	r3, #9
 800480a:	d1f1      	bne.n	80047f0 <increase+0x20c>
				RTC_DATA.ALARM[CONFIG][2]=0;
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <increase+0x26c>)
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				RTC_DATA.ALARM[CONFIG][3]=0;
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004818:	4770      	bx	lr
					RTC_DATA.ALARM[CONFIG][2]=0;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <increase+0x26c>)
 800481c:	2100      	movs	r1, #0
 800481e:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
					RTC_DATA.ALARM[CONFIG][3]++;
 8004822:	3201      	adds	r2, #1
 8004824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004828:	4770      	bx	lr
			if((RTC_DATA.ALARM[CONFIG][5]==2) && (RTC_DATA.ALARM[CONFIG][4]==3)){
 800482a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800482e:	2b03      	cmp	r3, #3
 8004830:	d1ad      	bne.n	800478e <increase+0x1aa>
				RTC_DATA.ALARM[CONFIG][4]=0;
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <increase+0x26c>)
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				RTC_DATA.ALARM[CONFIG][5]=0;
 800483a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800483e:	4770      	bx	lr
					RTC_DATA.ALARM[CONFIG][4]=0;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <increase+0x26c>)
 8004842:	2100      	movs	r1, #0
 8004844:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
					RTC_DATA.ALARM[CONFIG][5]++;
 8004848:	3201      	adds	r2, #1
 800484a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800484e:	e6d0      	b.n	80045f2 <increase+0xe>
 8004850:	20002484 	.word	0x20002484

08004854 <resetVarRTC>:
void resetVarRTC(){
	for(uint8_t i=0;i==5;i++){
		RTC_DATA.TIME[1][i]=0;
		RTC_DATA.ALARM[1][i]=0;
	}
	RTC_DATA.DATE[CONFIG][0]=0;
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <resetVarRTC+0x20>)
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	RTC_DATA.DATE[CONFIG][1]=0;
 800485c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	RTC_DATA.DATE[CONFIG][2]=1;
 8004860:	2101      	movs	r1, #1
 8004862:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	RTC_DATA.DATE[CONFIG][3]=0;
 8004866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	RTC_DATA.DATE[CONFIG][4]=1;
 800486a:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
	RTC_DATA.DATE[CONFIG][5]=0;
 800486e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8004872:	4770      	bx	lr
 8004874:	20002484 	.word	0x20002484

08004878 <setRTC>:
void setRTC(I2C_HandleTypeDef *hi2c,uint8_t TYPE){
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	4604      	mov	r4, r0
	uint8_t data[2];
	switch(TYPE){
 800487e:	2901      	cmp	r1, #1
 8004880:	d038      	beq.n	80048f4 <setRTC+0x7c>
 8004882:	2902      	cmp	r1, #2
 8004884:	d06e      	beq.n	8004964 <setRTC+0xec>
 8004886:	b109      	cbz	r1, 800488c <setRTC+0x14>
		data[1]=A1M4;
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
		break;
	}

}
 8004888:	b004      	add	sp, #16
 800488a:	bd70      	pop	{r4, r5, r6, pc}
		data[0]=SECONDS_ADDRESS;
 800488c:	2300      	movs	r3, #0
 800488e:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.TIME[CONFIG][1]<<4)|RTC_DATA.TIME[CONFIG][0]);
 8004892:	4d57      	ldr	r5, [pc, #348]	; (80049f0 <setRTC+0x178>)
 8004894:	7eaa      	ldrb	r2, [r5, #26]
 8004896:	f995 3019 	ldrsb.w	r3, [r5, #25]
 800489a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800489e:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80048a2:	2664      	movs	r6, #100	; 0x64
 80048a4:	9600      	str	r6, [sp, #0]
 80048a6:	2302      	movs	r3, #2
 80048a8:	aa03      	add	r2, sp, #12
 80048aa:	21d0      	movs	r1, #208	; 0xd0
 80048ac:	f7fc fc1a 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=MINUTES_ADDRESS;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.TIME[CONFIG][3]<<4)|RTC_DATA.TIME[CONFIG][2]);
 80048b6:	7f2a      	ldrb	r2, [r5, #28]
 80048b8:	f995 301b 	ldrsb.w	r3, [r5, #27]
 80048bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80048c0:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80048c4:	9600      	str	r6, [sp, #0]
 80048c6:	2302      	movs	r3, #2
 80048c8:	aa03      	add	r2, sp, #12
 80048ca:	21d0      	movs	r1, #208	; 0xd0
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7fc fc09 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=HOURS_ADDRESS;
 80048d2:	2302      	movs	r3, #2
 80048d4:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.TIME[CONFIG][5]<<4)|RTC_DATA.TIME[CONFIG][4]);
 80048d8:	7fa9      	ldrb	r1, [r5, #30]
 80048da:	f995 201d 	ldrsb.w	r2, [r5, #29]
 80048de:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80048e2:	f88d 200d 	strb.w	r2, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80048e6:	9600      	str	r6, [sp, #0]
 80048e8:	aa03      	add	r2, sp, #12
 80048ea:	21d0      	movs	r1, #208	; 0xd0
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7fc fbf9 	bl	80010e4 <HAL_I2C_Master_Transmit>
		break;
 80048f2:	e7c9      	b.n	8004888 <setRTC+0x10>
		data[0]=YEAR_ADDRESS;
 80048f4:	2306      	movs	r3, #6
 80048f6:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.DATE[CONFIG][1]<<4)|RTC_DATA.DATE[CONFIG][0]);
 80048fa:	4d3d      	ldr	r5, [pc, #244]	; (80049f0 <setRTC+0x178>)
 80048fc:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 8004900:	f995 3025 	ldrsb.w	r3, [r5, #37]	; 0x25
 8004904:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004908:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 800490c:	2664      	movs	r6, #100	; 0x64
 800490e:	9600      	str	r6, [sp, #0]
 8004910:	2302      	movs	r3, #2
 8004912:	aa03      	add	r2, sp, #12
 8004914:	21d0      	movs	r1, #208	; 0xd0
 8004916:	f7fc fbe5 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=MONTH_ADDRESS;
 800491a:	2305      	movs	r3, #5
 800491c:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.DATE[CONFIG][3]<<4)|RTC_DATA.DATE[CONFIG][2]);
 8004920:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8004924:	f995 3027 	ldrsb.w	r3, [r5, #39]	; 0x27
 8004928:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800492c:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 8004930:	9600      	str	r6, [sp, #0]
 8004932:	2302      	movs	r3, #2
 8004934:	aa03      	add	r2, sp, #12
 8004936:	21d0      	movs	r1, #208	; 0xd0
 8004938:	4620      	mov	r0, r4
 800493a:	f7fc fbd3 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=DATE_ADDRESS;
 800493e:	2304      	movs	r3, #4
 8004940:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.DATE[CONFIG][5]<<4)|RTC_DATA.DATE[CONFIG][4]);
 8004944:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 8004948:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
 800494c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004950:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 8004954:	9600      	str	r6, [sp, #0]
 8004956:	2302      	movs	r3, #2
 8004958:	aa03      	add	r2, sp, #12
 800495a:	21d0      	movs	r1, #208	; 0xd0
 800495c:	4620      	mov	r0, r4
 800495e:	f7fc fbc1 	bl	80010e4 <HAL_I2C_Master_Transmit>
		break;
 8004962:	e791      	b.n	8004888 <setRTC+0x10>
		data[0]=ALARM1_SECONDS_ADDRESS;
 8004964:	2307      	movs	r3, #7
 8004966:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.ALARM[CONFIG][1]<<4)|RTC_DATA.ALARM[CONFIG][0])|(A1M1);
 800496a:	4d21      	ldr	r5, [pc, #132]	; (80049f0 <setRTC+0x178>)
 800496c:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
 8004970:	f995 3031 	ldrsb.w	r3, [r5, #49]	; 0x31
 8004974:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004978:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 800497c:	2664      	movs	r6, #100	; 0x64
 800497e:	9600      	str	r6, [sp, #0]
 8004980:	2302      	movs	r3, #2
 8004982:	aa03      	add	r2, sp, #12
 8004984:	21d0      	movs	r1, #208	; 0xd0
 8004986:	f7fc fbad 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=ALARM1_MINUTES_ADDRESS;
 800498a:	2308      	movs	r3, #8
 800498c:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.ALARM[CONFIG][3]<<4)|RTC_DATA.ALARM[CONFIG][2])|(A1M2);
 8004990:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8004994:	f995 3033 	ldrsb.w	r3, [r5, #51]	; 0x33
 8004998:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800499c:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80049a0:	9600      	str	r6, [sp, #0]
 80049a2:	2302      	movs	r3, #2
 80049a4:	aa03      	add	r2, sp, #12
 80049a6:	21d0      	movs	r1, #208	; 0xd0
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7fc fb9b 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=ALARM1_HOURS_ADDRESS;
 80049ae:	2309      	movs	r3, #9
 80049b0:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=((RTC_DATA.ALARM[CONFIG][5]<<4)|RTC_DATA.ALARM[CONFIG][4])|(A1M3);
 80049b4:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
 80049b8:	f995 3035 	ldrsb.w	r3, [r5, #53]	; 0x35
 80049bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80049c0:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80049c4:	9600      	str	r6, [sp, #0]
 80049c6:	2302      	movs	r3, #2
 80049c8:	aa03      	add	r2, sp, #12
 80049ca:	21d0      	movs	r1, #208	; 0xd0
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7fc fb89 	bl	80010e4 <HAL_I2C_Master_Transmit>
		data[0]=ALARM1_DATE_ADDRESS;
 80049d2:	230a      	movs	r3, #10
 80049d4:	f88d 300c 	strb.w	r3, [sp, #12]
		data[1]=A1M4;
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	f88d 300d 	strb.w	r3, [sp, #13]
		HAL_I2C_Master_Transmit(&(*hi2c),DS3231_ADDRESS,data,2,100);
 80049de:	9600      	str	r6, [sp, #0]
 80049e0:	2302      	movs	r3, #2
 80049e2:	aa03      	add	r2, sp, #12
 80049e4:	21d0      	movs	r1, #208	; 0xd0
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7fc fb7c 	bl	80010e4 <HAL_I2C_Master_Transmit>
}
 80049ec:	e74c      	b.n	8004888 <setRTC+0x10>
 80049ee:	bf00      	nop
 80049f0:	20002484 	.word	0x20002484

080049f4 <loadRTC>:
void loadRTC(){
 80049f4:	b430      	push	{r4, r5}
RTC_DATA.TIME[CURRENT][0]=RTC_DATA.DS3231[0]&0x0f;
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <loadRTC+0x120>)
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	f002 010f 	and.w	r1, r2, #15
 80049fe:	74d9      	strb	r1, [r3, #19]
RTC_DATA.TIME[CURRENT][1]=(RTC_DATA.DS3231[0]&0xf0)>>4;
 8004a00:	0912      	lsrs	r2, r2, #4
 8004a02:	751a      	strb	r2, [r3, #20]
RTC_DATA.TIME[CURRENT][2]=RTC_DATA.DS3231[1]&0x0f;
 8004a04:	785a      	ldrb	r2, [r3, #1]
 8004a06:	f002 010f 	and.w	r1, r2, #15
 8004a0a:	7559      	strb	r1, [r3, #21]
RTC_DATA.TIME[CURRENT][3]=(RTC_DATA.DS3231[1]&0xf0)>>4;
 8004a0c:	0912      	lsrs	r2, r2, #4
 8004a0e:	759a      	strb	r2, [r3, #22]
RTC_DATA.TIME[CURRENT][4]=RTC_DATA.DS3231[2]&0x0f;
 8004a10:	789a      	ldrb	r2, [r3, #2]
 8004a12:	f002 010f 	and.w	r1, r2, #15
 8004a16:	75d9      	strb	r1, [r3, #23]
RTC_DATA.TIME[CURRENT][5]=(RTC_DATA.DS3231[2]&0x30)>>4;
 8004a18:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8004a1c:	761a      	strb	r2, [r3, #24]

RTC_DATA.DATE[CURRENT][0]=RTC_DATA.DS3231[6]&0x0f;
 8004a1e:	799a      	ldrb	r2, [r3, #6]
 8004a20:	f002 010f 	and.w	r1, r2, #15
 8004a24:	77d9      	strb	r1, [r3, #31]
RTC_DATA.DATE[CURRENT][1]=(RTC_DATA.DS3231[6])>>4;
 8004a26:	0912      	lsrs	r2, r2, #4
 8004a28:	f883 2020 	strb.w	r2, [r3, #32]
RTC_DATA.DATE[CURRENT][2]=RTC_DATA.DS3231[5]&0x0f;
 8004a2c:	795a      	ldrb	r2, [r3, #5]
 8004a2e:	f002 010f 	and.w	r1, r2, #15
 8004a32:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
RTC_DATA.DATE[CURRENT][3]=(RTC_DATA.DS3231[5]&0x10)>>4;
 8004a36:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004a3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
RTC_DATA.DATE[CURRENT][4]=RTC_DATA.DS3231[4]&0x0f;
 8004a3e:	791a      	ldrb	r2, [r3, #4]
 8004a40:	f002 010f 	and.w	r1, r2, #15
 8004a44:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
RTC_DATA.DATE[CURRENT][5]=(RTC_DATA.DS3231[4]&0x30)>>4;
 8004a48:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8004a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


RTC_DATA.ALARM[CURRENT][0]=RTC_DATA.DS3231[7]&0x0f;
 8004a50:	79da      	ldrb	r2, [r3, #7]
 8004a52:	f002 010f 	and.w	r1, r2, #15
 8004a56:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
RTC_DATA.ALARM[CURRENT][1]=(RTC_DATA.DS3231[7]&0xf0)>>4;
 8004a5a:	0912      	lsrs	r2, r2, #4
 8004a5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
RTC_DATA.ALARM[CURRENT][2]=RTC_DATA.DS3231[8]&0x0f;
 8004a60:	7a1a      	ldrb	r2, [r3, #8]
 8004a62:	f002 010f 	and.w	r1, r2, #15
 8004a66:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
RTC_DATA.ALARM[CURRENT][3]=(RTC_DATA.DS3231[8]&0xf0)>>4;
 8004a6a:	0912      	lsrs	r2, r2, #4
 8004a6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
RTC_DATA.ALARM[CURRENT][4]=RTC_DATA.DS3231[9]&0x0f;
 8004a70:	7a5a      	ldrb	r2, [r3, #9]
 8004a72:	f002 010f 	and.w	r1, r2, #15
 8004a76:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
RTC_DATA.ALARM[CURRENT][5]=(RTC_DATA.DS3231[9]&0x30)>>4;
 8004a7a:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8004a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

switch(RTC_DATA.DS3231[18]>>6){
 8004a82:	7c9b      	ldrb	r3, [r3, #18]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d83c      	bhi.n	8004b04 <loadRTC+0x110>
 8004a8a:	e8df f003 	tbb	[pc, r3]
 8004a8e:	2302      	.short	0x2302
 8004a90:	332b      	.short	0x332b
	case 0:
		RTC_DATA.TEMP[0]=0;
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <loadRTC+0x120>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		RTC_DATA.TEMP[1]=0;
 8004a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	default:
		RTC_DATA.TEMP[0]=0;
		RTC_DATA.TEMP[1]=0;
	break;
}
RTC_DATA.TEMP[2]=((RTC_DATA.DS3231[17]&0x7f)%10);
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <loadRTC+0x120>)
 8004aa0:	7c51      	ldrb	r1, [r2, #17]
 8004aa2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <loadRTC+0x124>)
 8004aa8:	fb83 0304 	smull	r0, r3, r3, r4
 8004aac:	109b      	asrs	r3, r3, #2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ab4:	0058      	lsls	r0, r3, #1
 8004ab6:	1a23      	subs	r3, r4, r0
 8004ab8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
RTC_DATA.TEMP[3]=((RTC_DATA.DS3231[17]&0x7f)/10);
 8004abc:	f882 503a 	strb.w	r5, [r2, #58]	; 0x3a
RTC_DATA.TEMP[4]=(RTC_DATA.DS3231[17]>>7);
 8004ac0:	09c9      	lsrs	r1, r1, #7
 8004ac2:	f882 103b 	strb.w	r1, [r2, #59]	; 0x3b
RTC_DATA.A1IE=(RTC_DATA.DS3231[14] & 0x01);
 8004ac6:	7b93      	ldrb	r3, [r2, #14]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
 8004ad0:	bc30      	pop	{r4, r5}
 8004ad2:	4770      	bx	lr
		RTC_DATA.TEMP[0]=5;
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <loadRTC+0x120>)
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		RTC_DATA.TEMP[1]=2;
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	break;
 8004ae2:	e7dc      	b.n	8004a9e <loadRTC+0xaa>
		RTC_DATA.TEMP[0]=0;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <loadRTC+0x120>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		RTC_DATA.TEMP[1]=5;
 8004aec:	2205      	movs	r2, #5
 8004aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	break;
 8004af2:	e7d4      	b.n	8004a9e <loadRTC+0xaa>
		RTC_DATA.TEMP[0]=5;
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <loadRTC+0x120>)
 8004af6:	2205      	movs	r2, #5
 8004af8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		RTC_DATA.TEMP[1]=7;
 8004afc:	2207      	movs	r2, #7
 8004afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	break;
 8004b02:	e7cc      	b.n	8004a9e <loadRTC+0xaa>
		RTC_DATA.TEMP[0]=0;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <loadRTC+0x120>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		RTC_DATA.TEMP[1]=0;
 8004b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	break;
 8004b10:	e7c5      	b.n	8004a9e <loadRTC+0xaa>
 8004b12:	bf00      	nop
 8004b14:	20002484 	.word	0x20002484
 8004b18:	66666667 	.word	0x66666667

08004b1c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <vApplicationGetIdleTaskMemory+0x10>)
 8004b1e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004b20:	3354      	adds	r3, #84	; 0x54
 8004b22:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	2000217c 	.word	0x2000217c

08004b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b34:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b36:	2400      	movs	r4, #0
 8004b38:	9404      	str	r4, [sp, #16]
 8004b3a:	9405      	str	r4, [sp, #20]
 8004b3c:	9406      	str	r4, [sp, #24]
 8004b3e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b40:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <MX_GPIO_Init+0x120>)
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	f042 0210 	orr.w	r2, r2, #16
 8004b48:	619a      	str	r2, [r3, #24]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	f002 0210 	and.w	r2, r2, #16
 8004b50:	9200      	str	r2, [sp, #0]
 8004b52:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	f042 0220 	orr.w	r2, r2, #32
 8004b5a:	619a      	str	r2, [r3, #24]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	f002 0220 	and.w	r2, r2, #32
 8004b62:	9201      	str	r2, [sp, #4]
 8004b64:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	f042 0204 	orr.w	r2, r2, #4
 8004b6c:	619a      	str	r2, [r3, #24]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	f002 0204 	and.w	r2, r2, #4
 8004b74:	9202      	str	r2, [sp, #8]
 8004b76:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	f042 0208 	orr.w	r2, r2, #8
 8004b7e:	619a      	str	r2, [r3, #24]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedRed_Pin|LedBlue_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 8004b8a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004c5c <MX_GPIO_Init+0x12c>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004b94:	4648      	mov	r0, r9
 8004b96:	f7fb fde2 	bl	800075e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|BL_Pin|Nixie_0_Pin|NixieCrl_P_Pin
 8004b9a:	4e2e      	ldr	r6, [pc, #184]	; (8004c54 <MX_GPIO_Init+0x124>)
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	f649 71c5 	movw	r1, #40901	; 0x9fc5
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7fb fddb 	bl	800075e <HAL_GPIO_WritePin>
                          |Nixie_5_Pin|Nixie_4_Pin|Nixie_1_Pin|Nixie_2_Pin
                          |Nixie_3_Pin|NixieCrl_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Nixie_LP_Pin|Nixie_DP_Pin|Nixie_9_Pin|Nixie_8_Pin
 8004ba8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8004c60 <MX_GPIO_Init+0x130>
 8004bac:	4622      	mov	r2, r4
 8004bae:	f24f 01fb 	movw	r1, #61691	; 0xf0fb
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f7fb fdd3 	bl	800075e <HAL_GPIO_WritePin>
                          |Nixie_7_Pin|Nixie_6_Pin|NixieCrl_1_Pin|NixieCrl_2_Pin
                          |NixieCrl_3_Pin|NixieCrl_4_Pin|NixieCrl_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LedRed_Pin LedBlue_Pin LedGreen_Pin */
  GPIO_InitStruct.Pin = LedRed_Pin|LedBlue_Pin|LedGreen_Pin;
 8004bb8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004bbc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bbe:	2701      	movs	r7, #1
 8004bc0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	2502      	movs	r5, #2
 8004bc6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc8:	a904      	add	r1, sp, #16
 8004bca:	4648      	mov	r0, r9
 8004bcc:	f7fb fcb0 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin BL_Pin Nixie_0_Pin NixieCrl_P_Pin
                           Nixie_5_Pin Nixie_4_Pin Nixie_1_Pin Nixie_2_Pin
                           Nixie_3_Pin NixieCrl_0_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|BL_Pin|Nixie_0_Pin|NixieCrl_P_Pin
 8004bd0:	f649 73c5 	movw	r3, #40901	; 0x9fc5
 8004bd4:	9304      	str	r3, [sp, #16]
                          |Nixie_5_Pin|Nixie_4_Pin|Nixie_1_Pin|Nixie_2_Pin
                          |Nixie_3_Pin|NixieCrl_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bdc:	a904      	add	r1, sp, #16
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7fb fca6 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pin : Alarm_Pin */
  GPIO_InitStruct.Pin = Alarm_Pin;
 8004be4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <MX_GPIO_Init+0x128>)
 8004be8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bea:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(Alarm_GPIO_Port, &GPIO_InitStruct);
 8004bec:	a904      	add	r1, sp, #16
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f7fb fc9e 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8004bf4:	2318      	movs	r3, #24
 8004bf6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bf8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bfa:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f7fb fc96 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8004c04:	2320      	movs	r3, #32
 8004c06:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c0a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8004c0c:	a904      	add	r1, sp, #16
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7fb fc8e 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pins : Nixie_LP_Pin Nixie_DP_Pin Nixie_9_Pin Nixie_8_Pin
                           Nixie_7_Pin Nixie_6_Pin NixieCrl_1_Pin NixieCrl_2_Pin
                           NixieCrl_3_Pin NixieCrl_4_Pin NixieCrl_5_Pin */
  GPIO_InitStruct.Pin = Nixie_LP_Pin|Nixie_DP_Pin|Nixie_9_Pin|Nixie_8_Pin
 8004c14:	f24f 03fb 	movw	r3, #61691	; 0xf0fb
 8004c18:	9304      	str	r3, [sp, #16]
                          |Nixie_7_Pin|Nixie_6_Pin|NixieCrl_1_Pin|NixieCrl_2_Pin
                          |NixieCrl_3_Pin|NixieCrl_4_Pin|NixieCrl_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c1a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c20:	a904      	add	r1, sp, #16
 8004c22:	4640      	mov	r0, r8
 8004c24:	f7fb fc84 	bl	8000530 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin SENSOR_Pin BOARD_SEL_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|SENSOR_Pin|BOARD_SEL_Pin;
 8004c28:	f44f 7341 	mov.w	r3, #772	; 0x304
 8004c2c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c2e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c32:	a904      	add	r1, sp, #16
 8004c34:	4640      	mov	r0, r8
 8004c36:	f7fb fc7b 	bl	8000530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	2105      	movs	r1, #5
 8004c3e:	2007      	movs	r0, #7
 8004c40:	f7fb fabc 	bl	80001bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004c44:	2007      	movs	r0, #7
 8004c46:	f7fb faed 	bl	8000224 <HAL_NVIC_EnableIRQ>

}
 8004c4a:	b009      	add	sp, #36	; 0x24
 8004c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40010800 	.word	0x40010800
 8004c58:	10210000 	.word	0x10210000
 8004c5c:	40011000 	.word	0x40011000
 8004c60:	40010c00 	.word	0x40010c00

08004c64 <MX_DMA_Init>:
{
 8004c64:	b500      	push	{lr}
 8004c66:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <MX_DMA_Init+0x30>)
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2105      	movs	r1, #5
 8004c80:	200f      	movs	r0, #15
 8004c82:	f7fb fa9b 	bl	80001bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004c86:	200f      	movs	r0, #15
 8004c88:	f7fb facc 	bl	8000224 <HAL_NVIC_EnableIRQ>
}
 8004c8c:	b003      	add	sp, #12
 8004c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <MX_TIM2_Init>:
{
 8004c98:	b530      	push	{r4, r5, lr}
 8004c9a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c9c:	2400      	movs	r4, #0
 8004c9e:	9402      	str	r4, [sp, #8]
 8004ca0:	9403      	str	r4, [sp, #12]
 8004ca2:	9404      	str	r4, [sp, #16]
 8004ca4:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ca6:	9400      	str	r4, [sp, #0]
 8004ca8:	9401      	str	r4, [sp, #4]
  htim2.Instance = TIM2;
 8004caa:	4d0f      	ldr	r5, [pc, #60]	; (8004ce8 <MX_TIM2_Init+0x50>)
 8004cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cb0:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 17999;
 8004cb2:	f244 634f 	movw	r3, #17999	; 0x464f
 8004cb6:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb8:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 499;
 8004cba:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004cbe:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cc0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f7fd fe8b 	bl	80029e0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cce:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cd0:	a902      	add	r1, sp, #8
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7fd febb 	bl	8002a4e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd8:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cda:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cdc:	4669      	mov	r1, sp
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7fd ff22 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004ce4:	b007      	add	sp, #28
 8004ce6:	bd30      	pop	{r4, r5, pc}
 8004ce8:	20002600 	.word	0x20002600

08004cec <MX_TIM3_Init>:
{
 8004cec:	b530      	push	{r4, r5, lr}
 8004cee:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cf0:	2400      	movs	r4, #0
 8004cf2:	9402      	str	r4, [sp, #8]
 8004cf4:	9403      	str	r4, [sp, #12]
 8004cf6:	9404      	str	r4, [sp, #16]
 8004cf8:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cfa:	9400      	str	r4, [sp, #0]
 8004cfc:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 8004cfe:	4d0e      	ldr	r5, [pc, #56]	; (8004d38 <MX_TIM3_Init+0x4c>)
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <MX_TIM3_Init+0x50>)
 8004d02:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 999;
 8004d04:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004d08:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 71;
 8004d0c:	2347      	movs	r3, #71	; 0x47
 8004d0e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d10:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d12:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d14:	4628      	mov	r0, r5
 8004d16:	f7fd fe63 	bl	80029e0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d20:	a902      	add	r1, sp, #8
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7fd fe93 	bl	8002a4e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d28:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d2a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d2c:	4669      	mov	r1, sp
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f7fd fefa 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004d34:	b007      	add	sp, #28
 8004d36:	bd30      	pop	{r4, r5, pc}
 8004d38:	20002560 	.word	0x20002560
 8004d3c:	40000400 	.word	0x40000400

08004d40 <MX_TIM4_Init>:
{
 8004d40:	b530      	push	{r4, r5, lr}
 8004d42:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d44:	2400      	movs	r4, #0
 8004d46:	9402      	str	r4, [sp, #8]
 8004d48:	9403      	str	r4, [sp, #12]
 8004d4a:	9404      	str	r4, [sp, #16]
 8004d4c:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4e:	9400      	str	r4, [sp, #0]
 8004d50:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 8004d52:	4d0e      	ldr	r5, [pc, #56]	; (8004d8c <MX_TIM4_Init+0x4c>)
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <MX_TIM4_Init+0x50>)
 8004d56:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 999;
 8004d58:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004d5c:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d5e:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 143;
 8004d60:	238f      	movs	r3, #143	; 0x8f
 8004d62:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d64:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d66:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7fd fe39 	bl	80029e0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d72:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d74:	a902      	add	r1, sp, #8
 8004d76:	4628      	mov	r0, r5
 8004d78:	f7fd fe69 	bl	8002a4e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d7c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d7e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d80:	4669      	mov	r1, sp
 8004d82:	4628      	mov	r0, r5
 8004d84:	f7fd fed0 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004d88:	b007      	add	sp, #28
 8004d8a:	bd30      	pop	{r4, r5, pc}
 8004d8c:	200024c4 	.word	0x200024c4
 8004d90:	40000800 	.word	0x40000800

08004d94 <MX_I2C2_Init>:
{
 8004d94:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8004d96:	4809      	ldr	r0, [pc, #36]	; (8004dbc <MX_I2C2_Init+0x28>)
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <MX_I2C2_Init+0x2c>)
 8004d9a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <MX_I2C2_Init+0x30>)
 8004d9e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004da0:	2300      	movs	r3, #0
 8004da2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004da4:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004daa:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dac:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004dae:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004db0:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004db2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004db4:	f7fc f8b8 	bl	8000f28 <HAL_I2C_Init>
}
 8004db8:	bd08      	pop	{r3, pc}
 8004dba:	bf00      	nop
 8004dbc:	2000250c 	.word	0x2000250c
 8004dc0:	40005800 	.word	0x40005800
 8004dc4:	00061a80 	.word	0x00061a80

08004dc8 <StartButtosTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtosTask */
void StartButtosTask(void const * argument)
{
 8004dc8:	b500      	push	{lr}
 8004dca:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartButtosTask */
	uint8_t aux=0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Infinite loop */
  for(;;)
  {
		xQueueReceive(Q_ButtonsHandle,&aux,portMAX_DELAY);
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd6:	f10d 0107 	add.w	r1, sp, #7
 8004dda:	4b04      	ldr	r3, [pc, #16]	; (8004dec <StartButtosTask+0x24>)
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	f7fe fa21 	bl	8003224 <xQueueReceive>
		nixieEvent(aux);
 8004de2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004de6:	f000 fd1d 	bl	8005824 <nixieEvent>
  for(;;)
 8004dea:	e7f2      	b.n	8004dd2 <StartButtosTask+0xa>
 8004dec:	200025fc 	.word	0x200025fc

08004df0 <StartAlarmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmTask */
void StartAlarmTask(void const * argument)
{
 8004df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartAlarmTask */
  /* Infinite loop */
  for(;;)
  {
    xSemaphoreTake(S_AlarmHandle,portMAX_DELAY);
 8004df2:	f04f 31ff 	mov.w	r1, #4294967295
 8004df6:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <StartAlarmTask+0x18>)
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f7fe fac1 	bl	8003380 <xQueueSemaphoreTake>
    nixieEvent(E_ALARM);
 8004dfe:	2004      	movs	r0, #4
 8004e00:	f000 fd10 	bl	8005824 <nixieEvent>
  for(;;)
 8004e04:	e7f5      	b.n	8004df2 <StartAlarmTask+0x2>
 8004e06:	bf00      	nop
 8004e08:	200025a8 	.word	0x200025a8

08004e0c <event>:
uint8_t event(){
 8004e0c:	b510      	push	{r4, lr}
	if((HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin))==GPIO_PIN_RESET){
 8004e0e:	2108      	movs	r1, #8
 8004e10:	4838      	ldr	r0, [pc, #224]	; (8004ef4 <event+0xe8>)
 8004e12:	f7fb fc9d 	bl	8000750 <HAL_GPIO_ReadPin>
 8004e16:	b990      	cbnz	r0, 8004e3e <event+0x32>
 8004e18:	4604      	mov	r4, r0
		if(!buttonFlag[E_B1]){
 8004e1a:	4b37      	ldr	r3, [pc, #220]	; (8004ef8 <event+0xec>)
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	b9a3      	cbnz	r3, 8004e4a <event+0x3e>
			if(start[E_B1]){
 8004e20:	4b36      	ldr	r3, [pc, #216]	; (8004efc <event+0xf0>)
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	b13b      	cbz	r3, 8004e36 <event+0x2a>
				buttonFlag[E_B1]=10;
 8004e26:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <event+0xec>)
 8004e28:	220a      	movs	r2, #10
 8004e2a:	705a      	strb	r2, [r3, #1]
				start[E_B1]=0;
 8004e2c:	4b33      	ldr	r3, [pc, #204]	; (8004efc <event+0xf0>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	705a      	strb	r2, [r3, #1]
			aux=E_B1;
 8004e32:	2401      	movs	r4, #1
 8004e34:	e009      	b.n	8004e4a <event+0x3e>
				buttonFlag[E_B1]=1;
 8004e36:	2401      	movs	r4, #1
 8004e38:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <event+0xec>)
 8004e3a:	705c      	strb	r4, [r3, #1]
 8004e3c:	e005      	b.n	8004e4a <event+0x3e>
		buttonFlag[E_B1]=0;
 8004e3e:	2400      	movs	r4, #0
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <event+0xec>)
 8004e42:	705c      	strb	r4, [r3, #1]
		start[E_B1]=1;
 8004e44:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <event+0xf0>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	705a      	strb	r2, [r3, #1]
	if((HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin))==GPIO_PIN_RESET){
 8004e4a:	2110      	movs	r1, #16
 8004e4c:	4829      	ldr	r0, [pc, #164]	; (8004ef4 <event+0xe8>)
 8004e4e:	f7fb fc7f 	bl	8000750 <HAL_GPIO_ReadPin>
 8004e52:	b990      	cbnz	r0, 8004e7a <event+0x6e>
		if(!buttonFlag[E_B2]){
 8004e54:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <event+0xec>)
 8004e56:	789b      	ldrb	r3, [r3, #2]
 8004e58:	b9ab      	cbnz	r3, 8004e86 <event+0x7a>
			if(start[E_B2]){
 8004e5a:	4b28      	ldr	r3, [pc, #160]	; (8004efc <event+0xf0>)
 8004e5c:	789b      	ldrb	r3, [r3, #2]
 8004e5e:	b13b      	cbz	r3, 8004e70 <event+0x64>
				buttonFlag[E_B2]=10;
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <event+0xec>)
 8004e62:	220a      	movs	r2, #10
 8004e64:	709a      	strb	r2, [r3, #2]
				start[E_B2]=0;
 8004e66:	4b25      	ldr	r3, [pc, #148]	; (8004efc <event+0xf0>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	709a      	strb	r2, [r3, #2]
			aux=E_B2;
 8004e6c:	2402      	movs	r4, #2
 8004e6e:	e00a      	b.n	8004e86 <event+0x7a>
				buttonFlag[E_B2]=1;
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <event+0xec>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	709a      	strb	r2, [r3, #2]
			aux=E_B2;
 8004e76:	2402      	movs	r4, #2
 8004e78:	e005      	b.n	8004e86 <event+0x7a>
		buttonFlag[E_B2]=0;
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <event+0xec>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	709a      	strb	r2, [r3, #2]
		start[E_B2]=1;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <event+0xf0>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	709a      	strb	r2, [r3, #2]
	if((HAL_GPIO_ReadPin(B3_GPIO_Port,B3_Pin))==GPIO_PIN_RESET){
 8004e86:	2120      	movs	r1, #32
 8004e88:	481a      	ldr	r0, [pc, #104]	; (8004ef4 <event+0xe8>)
 8004e8a:	f7fb fc61 	bl	8000750 <HAL_GPIO_ReadPin>
 8004e8e:	b990      	cbnz	r0, 8004eb6 <event+0xaa>
		if(!buttonFlag[E_B3]){
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <event+0xec>)
 8004e92:	78db      	ldrb	r3, [r3, #3]
 8004e94:	b9ab      	cbnz	r3, 8004ec2 <event+0xb6>
			if(start[E_B3]){
 8004e96:	4b19      	ldr	r3, [pc, #100]	; (8004efc <event+0xf0>)
 8004e98:	78db      	ldrb	r3, [r3, #3]
 8004e9a:	b13b      	cbz	r3, 8004eac <event+0xa0>
				buttonFlag[E_B3]=10;
 8004e9c:	4b16      	ldr	r3, [pc, #88]	; (8004ef8 <event+0xec>)
 8004e9e:	220a      	movs	r2, #10
 8004ea0:	70da      	strb	r2, [r3, #3]
				start[E_B3]=0;
 8004ea2:	4b16      	ldr	r3, [pc, #88]	; (8004efc <event+0xf0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	70da      	strb	r2, [r3, #3]
			aux=E_B3;
 8004ea8:	2403      	movs	r4, #3
 8004eaa:	e00a      	b.n	8004ec2 <event+0xb6>
				buttonFlag[E_B3]=1;
 8004eac:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <event+0xec>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	70da      	strb	r2, [r3, #3]
			aux=E_B3;
 8004eb2:	2403      	movs	r4, #3
 8004eb4:	e005      	b.n	8004ec2 <event+0xb6>
		buttonFlag[E_B3]=0;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <event+0xec>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	70da      	strb	r2, [r3, #3]
		start[E_B3]=1;
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <event+0xf0>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	70da      	strb	r2, [r3, #3]
	if((HAL_GPIO_ReadPin(SENSOR_GPIO_Port,SENSOR_Pin))!=start[E_SENSOR]){
 8004ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ec6:	480e      	ldr	r0, [pc, #56]	; (8004f00 <event+0xf4>)
 8004ec8:	f7fb fc42 	bl	8000750 <HAL_GPIO_ReadPin>
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <event+0xf0>)
 8004ece:	795b      	ldrb	r3, [r3, #5]
 8004ed0:	4298      	cmp	r0, r3
 8004ed2:	d002      	beq.n	8004eda <event+0xce>
		if(!buttonFlag[E_SENSOR]){
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <event+0xec>)
 8004ed6:	7952      	ldrb	r2, [r2, #5]
 8004ed8:	b10a      	cbz	r2, 8004ede <event+0xd2>
}
 8004eda:	4620      	mov	r0, r4
 8004edc:	bd10      	pop	{r4, pc}
			start[E_SENSOR]=!start[E_SENSOR];
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	4a05      	ldr	r2, [pc, #20]	; (8004efc <event+0xf0>)
 8004ee6:	7153      	strb	r3, [r2, #5]
			buttonFlag[E_SENSOR]=1;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <event+0xec>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	715a      	strb	r2, [r3, #5]
			aux=E_SENSOR;
 8004eee:	2405      	movs	r4, #5
 8004ef0:	e7f3      	b.n	8004eda <event+0xce>
 8004ef2:	bf00      	nop
 8004ef4:	40010800 	.word	0x40010800
 8004ef8:	200023d0 	.word	0x200023d0
 8004efc:	2000000c 	.word	0x2000000c
 8004f00:	40010c00 	.word	0x40010c00

08004f04 <StartPullingTask>:
{
 8004f04:	b500      	push	{lr}
 8004f06:	b083      	sub	sp, #12
	uint8_t aux=0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f0e:	e002      	b.n	8004f16 <StartPullingTask+0x12>
    osDelay(100);
 8004f10:	2064      	movs	r0, #100	; 0x64
 8004f12:	f7fd fe7f 	bl	8002c14 <osDelay>
	  aux=event();
 8004f16:	f7ff ff79 	bl	8004e0c <event>
 8004f1a:	f88d 0007 	strb.w	r0, [sp, #7]
	  if(aux){
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0f6      	beq.n	8004f10 <StartPullingTask+0xc>
	  xQueueSendToBack(Q_ButtonsHandle,&aux,(portTickType)0);
 8004f22:	2300      	movs	r3, #0
 8004f24:	461a      	mov	r2, r3
 8004f26:	f10d 0107 	add.w	r1, sp, #7
 8004f2a:	4802      	ldr	r0, [pc, #8]	; (8004f34 <StartPullingTask+0x30>)
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f7fe f85f 	bl	8002ff0 <xQueueGenericSend>
 8004f32:	e7ed      	b.n	8004f10 <StartPullingTask+0xc>
 8004f34:	200025fc 	.word	0x200025fc

08004f38 <SystemClock_Config>:
{
 8004f38:	b530      	push	{r4, r5, lr}
 8004f3a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	9409      	str	r4, [sp, #36]	; 0x24
 8004f40:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f42:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f44:	9401      	str	r4, [sp, #4]
 8004f46:	9402      	str	r4, [sp, #8]
 8004f48:	9403      	str	r4, [sp, #12]
 8004f4a:	9404      	str	r4, [sp, #16]
 8004f4c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f4e:	2201      	movs	r2, #1
 8004f50:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f56:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004f58:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f5a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f5c:	2502      	movs	r5, #2
 8004f5e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f60:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004f66:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f68:	a806      	add	r0, sp, #24
 8004f6a:	f7fd f8a3 	bl	80020b4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f6e:	230f      	movs	r3, #15
 8004f70:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f72:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f74:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f7c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f7e:	4629      	mov	r1, r5
 8004f80:	a801      	add	r0, sp, #4
 8004f82:	f7fd fad5 	bl	8002530 <HAL_RCC_ClockConfig>
}
 8004f86:	b011      	add	sp, #68	; 0x44
 8004f88:	bd30      	pop	{r4, r5, pc}
	...

08004f8c <main>:
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 8004f90:	f7fb f8de 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 8004f94:	f7ff ffd0 	bl	8004f38 <SystemClock_Config>
  MX_GPIO_Init();
 8004f98:	f7ff fdca 	bl	8004b30 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f9c:	f7ff fe62 	bl	8004c64 <MX_DMA_Init>
  MX_TIM2_Init();
 8004fa0:	f7ff fe7a 	bl	8004c98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004fa4:	f7ff fea2 	bl	8004cec <MX_TIM3_Init>
  MX_I2C2_Init();
 8004fa8:	f7ff fef4 	bl	8004d94 <MX_I2C2_Init>
  MX_TIM4_Init();
 8004fac:	f7ff fec8 	bl	8004d40 <MX_TIM4_Init>
  nixieInit();
 8004fb0:	f000 fc2a 	bl	8005808 <nixieInit>
  osSemaphoreDef(S_Alarm);
 8004fb4:	2700      	movs	r7, #0
 8004fb6:	971a      	str	r7, [sp, #104]	; 0x68
 8004fb8:	971b      	str	r7, [sp, #108]	; 0x6c
  S_AlarmHandle = osSemaphoreCreate(osSemaphore(S_Alarm), 1);
 8004fba:	2101      	movs	r1, #1
 8004fbc:	a81a      	add	r0, sp, #104	; 0x68
 8004fbe:	f7fd fe30 	bl	8002c22 <osSemaphoreCreate>
 8004fc2:	4b1e      	ldr	r3, [pc, #120]	; (800503c <main+0xb0>)
 8004fc4:	6018      	str	r0, [r3, #0]
  osMessageQDef(Q_Buttons, 4, uint8_t);
 8004fc6:	4c1e      	ldr	r4, [pc, #120]	; (8005040 <main+0xb4>)
 8004fc8:	ad16      	add	r5, sp, #88	; 0x58
 8004fca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  Q_ButtonsHandle = osMessageCreate(osMessageQ(Q_Buttons), NULL);
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f7fd fe48 	bl	8002c6a <osMessageCreate>
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <main+0xb8>)
 8004fdc:	6018      	str	r0, [r3, #0]
  osThreadDef(pulling, StartPullingTask, osPriorityHigh, 0, 128);
 8004fde:	ad0f      	add	r5, sp, #60	; 0x3c
 8004fe0:	f104 0610 	add.w	r6, r4, #16
 8004fe4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fe8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004fec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  pullingHandle = osThreadCreate(osThread(pulling), NULL);
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	a80f      	add	r0, sp, #60	; 0x3c
 8004ff4:	f7fd fdd9 	bl	8002baa <osThreadCreate>
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <main+0xbc>)
 8004ffa:	6018      	str	r0, [r3, #0]
  osThreadDef(Buttons, StartButtosTask, osPriorityBelowNormal, 0, 128);
 8004ffc:	ad08      	add	r5, sp, #32
 8004ffe:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8005002:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005006:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800500a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ButtonsHandle = osThreadCreate(osThread(Buttons), NULL);
 800500e:	4639      	mov	r1, r7
 8005010:	a808      	add	r0, sp, #32
 8005012:	f7fd fdca 	bl	8002baa <osThreadCreate>
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <main+0xc0>)
 8005018:	6018      	str	r0, [r3, #0]
  osThreadDef(Alarm, StartAlarmTask, osPriorityNormal, 0, 128);
 800501a:	ad01      	add	r5, sp, #4
 800501c:	3448      	adds	r4, #72	; 0x48
 800501e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005022:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005026:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  AlarmHandle = osThreadCreate(osThread(Alarm), NULL);
 800502a:	4639      	mov	r1, r7
 800502c:	a801      	add	r0, sp, #4
 800502e:	f7fd fdbc 	bl	8002baa <osThreadCreate>
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <main+0xc4>)
 8005034:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005036:	f7fd fdb3 	bl	8002ba0 <osKernelStart>
  while (1)
 800503a:	e7fe      	b.n	800503a <main+0xae>
 800503c:	200025a8 	.word	0x200025a8
 8005040:	08006a9c 	.word	0x08006a9c
 8005044:	200025fc 	.word	0x200025fc
 8005048:	200025f4 	.word	0x200025f4
 800504c:	200025f0 	.word	0x200025f0
 8005050:	200025f8 	.word	0x200025f8

08005054 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005054:	b500      	push	{lr}
 8005056:	b083      	sub	sp, #12
	portBASE_TYPE X	=pdFALSE;
 8005058:	2300      	movs	r3, #0
 800505a:	9301      	str	r3, [sp, #4]
	if(GPIO_Pin==GPIO_PIN_1){
 800505c:	2802      	cmp	r0, #2
 800505e:	d00c      	beq.n	800507a <HAL_GPIO_EXTI_Callback+0x26>
	portEND_SWITCHING_ISR(X);
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	b13b      	cbz	r3, 8005074 <HAL_GPIO_EXTI_Callback+0x20>
 8005064:	4b08      	ldr	r3, [pc, #32]	; (8005088 <HAL_GPIO_EXTI_Callback+0x34>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
}
 8005074:	b003      	add	sp, #12
 8005076:	f85d fb04 	ldr.w	pc, [sp], #4
		xSemaphoreGiveFromISR(S_AlarmHandle,&X);
 800507a:	a901      	add	r1, sp, #4
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_GPIO_EXTI_Callback+0x38>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	f7fe f876 	bl	8003170 <xQueueGiveFromISR>
 8005084:	e7ec      	b.n	8005060 <HAL_GPIO_EXTI_Callback+0xc>
 8005086:	bf00      	nop
 8005088:	e000ed04 	.word	0xe000ed04
 800508c:	200025a8 	.word	0x200025a8

08005090 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005090:	b508      	push	{r3, lr}
	if(hi2c->Instance==hi2c2.Instance){
 8005092:	6802      	ldr	r2, [r0, #0]
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <HAL_I2C_MemRxCpltCallback+0x14>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d000      	beq.n	800509e <HAL_I2C_MemRxCpltCallback+0xe>
}
 800509c:	bd08      	pop	{r3, pc}
		loadRTC();
 800509e:	f7ff fca9 	bl	80049f4 <loadRTC>
}
 80050a2:	e7fb      	b.n	800509c <HAL_I2C_MemRxCpltCallback+0xc>
 80050a4:	2000250c 	.word	0x2000250c

080050a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */
	static uint8_t aux=0,aux2=0;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80050ac:	6802      	ldr	r2, [r0, #0]
 80050ae:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d00c      	beq.n	80050ce <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM3){
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d00b      	beq.n	80050d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  nixieTickUpdate();
  }
  if(htim->Instance==TIM4){
 80050bc:	6822      	ldr	r2, [r4, #0]
 80050be:	4b2b      	ldr	r3, [pc, #172]	; (800516c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d00a      	beq.n	80050da <HAL_TIM_PeriodElapsedCallback+0x32>
	 aux++;
	 aux2++;
	 aux2%=100;
	 aux%=250;
  }
  if (htim->Instance == TIM2){
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d045      	beq.n	8005158 <HAL_TIM_PeriodElapsedCallback+0xb0>
     nixieBuzzer(B_PERIOD,B_ACTIVITY);
  }
  /* USER CODE END Callback 1 */
}
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_IncTick();
 80050ce:	f7fb f851 	bl	8000174 <HAL_IncTick>
 80050d2:	e7ef      	b.n	80050b4 <HAL_TIM_PeriodElapsedCallback+0xc>
	  nixieTickUpdate();
 80050d4:	f000 fc5e 	bl	8005994 <nixieTickUpdate>
 80050d8:	e7f0      	b.n	80050bc <HAL_TIM_PeriodElapsedCallback+0x14>
	 if (!aux){
 80050da:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80050dc:	795b      	ldrb	r3, [r3, #5]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d036      	beq.n	8005150 <HAL_TIM_PeriodElapsedCallback+0xa8>
	 if(!aux2){
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80050e4:	799b      	ldrb	r3, [r3, #6]
 80050e6:	b9bb      	cbnz	r3, 8005118 <HAL_TIM_PeriodElapsedCallback+0x70>
			if(buttonFlag[E_B1]){
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	b113      	cbz	r3, 80050f4 <HAL_TIM_PeriodElapsedCallback+0x4c>
				buttonFlag[E_B1]--;
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80050f2:	7053      	strb	r3, [r2, #1]
			if(buttonFlag[E_B2]){
 80050f4:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80050f6:	789b      	ldrb	r3, [r3, #2]
 80050f8:	b113      	cbz	r3, 8005100 <HAL_TIM_PeriodElapsedCallback+0x58>
				buttonFlag[E_B2]--;
 80050fa:	3b01      	subs	r3, #1
 80050fc:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80050fe:	7093      	strb	r3, [r2, #2]
			if(buttonFlag[E_B3]){
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005102:	78db      	ldrb	r3, [r3, #3]
 8005104:	b113      	cbz	r3, 800510c <HAL_TIM_PeriodElapsedCallback+0x64>
				buttonFlag[E_B3]--;
 8005106:	3b01      	subs	r3, #1
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800510a:	70d3      	strb	r3, [r2, #3]
			if(buttonFlag[E_SENSOR]){
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800510e:	795b      	ldrb	r3, [r3, #5]
 8005110:	b113      	cbz	r3, 8005118 <HAL_TIM_PeriodElapsedCallback+0x70>
				buttonFlag[E_SENSOR]--;
 8005112:	3b01      	subs	r3, #1
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005116:	7153      	strb	r3, [r2, #5]
	 segmentDisplay();
 8005118:	f000 fa94 	bl	8005644 <segmentDisplay>
	 nixieLed();
 800511c:	f000 f84a 	bl	80051b4 <nixieLed>
	 aux++;
 8005120:	4813      	ldr	r0, [pc, #76]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005122:	7943      	ldrb	r3, [r0, #5]
 8005124:	3301      	adds	r3, #1
 8005126:	b2d9      	uxtb	r1, r3
	 aux2++;
 8005128:	7982      	ldrb	r2, [r0, #6]
 800512a:	3201      	adds	r2, #1
 800512c:	b2d3      	uxtb	r3, r2
	 aux2%=100;
 800512e:	4a11      	ldr	r2, [pc, #68]	; (8005174 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8005130:	fba2 5203 	umull	r5, r2, r2, r3
 8005134:	0952      	lsrs	r2, r2, #5
 8005136:	2564      	movs	r5, #100	; 0x64
 8005138:	fb05 3212 	mls	r2, r5, r2, r3
 800513c:	7182      	strb	r2, [r0, #6]
	 aux%=250;
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005140:	fba3 2301 	umull	r2, r3, r3, r1
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	22fa      	movs	r2, #250	; 0xfa
 8005148:	fb02 1313 	mls	r3, r2, r3, r1
 800514c:	7143      	strb	r3, [r0, #5]
 800514e:	e7b9      	b.n	80050c4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		getRTC(&hi2c2);
 8005150:	480a      	ldr	r0, [pc, #40]	; (800517c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005152:	f7ff f9c1 	bl	80044d8 <getRTC>
 8005156:	e7c4      	b.n	80050e2 <HAL_TIM_PeriodElapsedCallback+0x3a>
     nixieBuzzer(B_PERIOD,B_ACTIVITY);
 8005158:	2104      	movs	r1, #4
 800515a:	2008      	movs	r0, #8
 800515c:	f000 fc24 	bl	80059a8 <nixieBuzzer>
}
 8005160:	e7b4      	b.n	80050cc <HAL_TIM_PeriodElapsedCallback+0x24>
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	200023d0 	.word	0x200023d0
 8005174:	51eb851f 	.word	0x51eb851f
 8005178:	10624dd3 	.word	0x10624dd3
 800517c:	2000250c 	.word	0x2000250c

08005180 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005180:	4770      	bx	lr
	...

08005184 <resetVarNixie>:
bool periodic;
};

static struct state_timer timers[MAX_NUM_TIMERS] = {0};
void resetVarNixie(){
	LedFlag=1;
 8005184:	4909      	ldr	r1, [pc, #36]	; (80051ac <resetVarNixie+0x28>)
 8005186:	2001      	movs	r0, #1
 8005188:	7008      	strb	r0, [r1, #0]
	LedPower=1;
 800518a:	7048      	strb	r0, [r1, #1]
	BuzzerFlag=0;
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <resetVarNixie+0x2c>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
	LedIndex=0;
 8005192:	705a      	strb	r2, [r3, #1]
	DisplayIndex=0;
 8005194:	709a      	strb	r2, [r3, #2]
	NixiePower=1;
 8005196:	7088      	strb	r0, [r1, #2]
	Led[N_TIME]=BLACK;
 8005198:	711a      	strb	r2, [r3, #4]
	Led[N_DATE]=GREEN;
 800519a:	220c      	movs	r2, #12
 800519c:	715a      	strb	r2, [r3, #5]
	Led[N_TEMP]=BLUE;
 800519e:	2230      	movs	r2, #48	; 0x30
 80051a0:	71da      	strb	r2, [r3, #7]
	Led[N_ALARM]=RED;
 80051a2:	2203      	movs	r2, #3
 80051a4:	719a      	strb	r2, [r3, #6]
	Led[N_ALARM_STATE]=RED;
 80051a6:	721a      	strb	r2, [r3, #8]
}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000011 	.word	0x20000011
 80051b0:	200023d8 	.word	0x200023d8

080051b4 <nixieLed>:
void nixieLed(){
 80051b4:	b510      	push	{r4, lr}
	static uint8_t aux=0;
	if(LedFlag && LedPower){
 80051b6:	4b36      	ldr	r3, [pc, #216]	; (8005290 <nixieLed+0xdc>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d053      	beq.n	8005266 <nixieLed+0xb2>
 80051be:	4b34      	ldr	r3, [pc, #208]	; (8005290 <nixieLed+0xdc>)
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d04f      	beq.n	8005266 <nixieLed+0xb2>
		if(((Led[LedIndex]>>0)&0x03)>aux){
 80051c6:	4a33      	ldr	r2, [pc, #204]	; (8005294 <nixieLed+0xe0>)
 80051c8:	7853      	ldrb	r3, [r2, #1]
 80051ca:	4413      	add	r3, r2
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	7a52      	ldrb	r2, [r2, #9]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d231      	bcs.n	800523c <nixieLed+0x88>
			HAL_GPIO_WritePin(LedRed_GPIO_Port,LedRed_Pin,GPIO_PIN_SET);
 80051d8:	2201      	movs	r2, #1
 80051da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051de:	482e      	ldr	r0, [pc, #184]	; (8005298 <nixieLed+0xe4>)
 80051e0:	f7fb fabd 	bl	800075e <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(LedRed_GPIO_Port,LedRed_Pin,GPIO_PIN_RESET);
		}
		if(((Led[LedIndex]>>2)&0x03)>aux){
 80051e4:	4a2b      	ldr	r2, [pc, #172]	; (8005294 <nixieLed+0xe0>)
 80051e6:	7853      	ldrb	r3, [r2, #1]
 80051e8:	4413      	add	r3, r2
 80051ea:	791b      	ldrb	r3, [r3, #4]
 80051ec:	7a52      	ldrb	r2, [r2, #9]
 80051ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d229      	bcs.n	800524a <nixieLed+0x96>
			HAL_GPIO_WritePin(LedGreen_GPIO_Port,LedGreen_Pin,GPIO_PIN_SET);
 80051f6:	2201      	movs	r2, #1
 80051f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051fc:	4826      	ldr	r0, [pc, #152]	; (8005298 <nixieLed+0xe4>)
 80051fe:	f7fb faae 	bl	800075e <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(LedGreen_GPIO_Port,LedGreen_Pin,GPIO_PIN_RESET);
		}
		if(((Led[LedIndex]>>4)&0x03)>aux){
 8005202:	4a24      	ldr	r2, [pc, #144]	; (8005294 <nixieLed+0xe0>)
 8005204:	7853      	ldrb	r3, [r2, #1]
 8005206:	4413      	add	r3, r2
 8005208:	791b      	ldrb	r3, [r3, #4]
 800520a:	7a52      	ldrb	r2, [r2, #9]
 800520c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d221      	bcs.n	8005258 <nixieLed+0xa4>
			HAL_GPIO_WritePin(LedBlue_GPIO_Port,LedBlue_Pin,GPIO_PIN_SET);
 8005214:	2201      	movs	r2, #1
 8005216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800521a:	481f      	ldr	r0, [pc, #124]	; (8005298 <nixieLed+0xe4>)
 800521c:	f7fb fa9f 	bl	800075e <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(LedBlue_GPIO_Port,LedBlue_Pin,GPIO_PIN_RESET);
		}
		aux++;
 8005220:	481c      	ldr	r0, [pc, #112]	; (8005294 <nixieLed+0xe0>)
 8005222:	7a43      	ldrb	r3, [r0, #9]
 8005224:	3301      	adds	r3, #1
 8005226:	b2db      	uxtb	r3, r3
		aux%=3;
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <nixieLed+0xe8>)
 800522a:	fba2 1203 	umull	r1, r2, r2, r3
 800522e:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 8005232:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	7243      	strb	r3, [r0, #9]
 800523a:	e027      	b.n	800528c <nixieLed+0xd8>
			HAL_GPIO_WritePin(LedRed_GPIO_Port,LedRed_Pin,GPIO_PIN_RESET);
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005242:	4815      	ldr	r0, [pc, #84]	; (8005298 <nixieLed+0xe4>)
 8005244:	f7fb fa8b 	bl	800075e <HAL_GPIO_WritePin>
 8005248:	e7cc      	b.n	80051e4 <nixieLed+0x30>
			HAL_GPIO_WritePin(LedGreen_GPIO_Port,LedGreen_Pin,GPIO_PIN_RESET);
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005250:	4811      	ldr	r0, [pc, #68]	; (8005298 <nixieLed+0xe4>)
 8005252:	f7fb fa84 	bl	800075e <HAL_GPIO_WritePin>
 8005256:	e7d4      	b.n	8005202 <nixieLed+0x4e>
			HAL_GPIO_WritePin(LedBlue_GPIO_Port,LedBlue_Pin,GPIO_PIN_RESET);
 8005258:	2200      	movs	r2, #0
 800525a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800525e:	480e      	ldr	r0, [pc, #56]	; (8005298 <nixieLed+0xe4>)
 8005260:	f7fb fa7d 	bl	800075e <HAL_GPIO_WritePin>
 8005264:	e7dc      	b.n	8005220 <nixieLed+0x6c>
	}else{
		HAL_GPIO_WritePin(LedBlue_GPIO_Port,LedBlue_Pin,GPIO_PIN_RESET);
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <nixieLed+0xe4>)
 8005268:	2200      	movs	r2, #0
 800526a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800526e:	4620      	mov	r0, r4
 8005270:	f7fb fa75 	bl	800075e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LedGreen_GPIO_Port,LedGreen_Pin,GPIO_PIN_RESET);
 8005274:	2200      	movs	r2, #0
 8005276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800527a:	4620      	mov	r0, r4
 800527c:	f7fb fa6f 	bl	800075e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LedRed_GPIO_Port,LedRed_Pin,GPIO_PIN_RESET);
 8005280:	2200      	movs	r2, #0
 8005282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005286:	4620      	mov	r0, r4
 8005288:	f7fb fa69 	bl	800075e <HAL_GPIO_WritePin>
	}
}
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	20000011 	.word	0x20000011
 8005294:	200023d8 	.word	0x200023d8
 8005298:	40011000 	.word	0x40011000
 800529c:	aaaaaaab 	.word	0xaaaaaaab

080052a0 <segment>:
void segment(uint8_t digit){
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4604      	mov	r4, r0
	uint8_t *display;
	display=Display(DisplayIndex);
 80052a4:	4bdf      	ldr	r3, [pc, #892]	; (8005624 <segment+0x384>)
 80052a6:	7898      	ldrb	r0, [r3, #2]
 80052a8:	f7ff f926 	bl	80044f8 <Display>
 80052ac:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_RESET);
 80052ae:	4dde      	ldr	r5, [pc, #888]	; (8005628 <segment+0x388>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fb fa51 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_RESET);
 80052bc:	2200      	movs	r2, #0
 80052be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fb fa4b 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_RESET);
 80052c8:	2200      	movs	r2, #0
 80052ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7fb fa45 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_RESET);
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052da:	4628      	mov	r0, r5
 80052dc:	f7fb fa3f 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_5_GPIO_Port,Nixie_5_Pin,GPIO_PIN_RESET);
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e6:	4628      	mov	r0, r5
 80052e8:	f7fb fa39 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_RESET);
 80052ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052f6:	4628      	mov	r0, r5
 80052f8:	f7fb fa31 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_RESET);
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005302:	4628      	mov	r0, r5
 8005304:	f7fb fa2b 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Nixie_8_GPIO_Port,Nixie_8_Pin,GPIO_PIN_RESET);
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800530e:	4628      	mov	r0, r5
 8005310:	f7fb fa25 	bl	800075e <HAL_GPIO_WritePin>
	switch(display[digit]){
 8005314:	5d33      	ldrb	r3, [r6, r4]
 8005316:	2b09      	cmp	r3, #9
 8005318:	d830      	bhi.n	800537c <segment+0xdc>
 800531a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800531e:	000a      	.short	0x000a
 8005320:	004e0040 	.word	0x004e0040
 8005324:	008e006e 	.word	0x008e006e
 8005328:	00cc00aa 	.word	0x00cc00aa
 800532c:	010800f4 	.word	0x010800f4
 8005330:	0136      	.short	0x0136
					case 0:
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 8005332:	4dbd      	ldr	r5, [pc, #756]	; (8005628 <segment+0x388>)
 8005334:	2201      	movs	r2, #1
 8005336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800533a:	4628      	mov	r0, r5
 800533c:	f7fb fa0f 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 8005340:	2201      	movs	r2, #1
 8005342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005346:	4628      	mov	r0, r5
 8005348:	f7fb fa09 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 800534c:	2201      	movs	r2, #1
 800534e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005352:	4628      	mov	r0, r5
 8005354:	f7fb fa03 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 8005358:	2201      	movs	r2, #1
 800535a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800535e:	4628      	mov	r0, r5
 8005360:	f7fb f9fd 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_5_GPIO_Port,Nixie_5_Pin,GPIO_PIN_SET);
 8005364:	2201      	movs	r2, #1
 8005366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800536a:	4628      	mov	r0, r5
 800536c:	f7fb f9f7 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
 8005370:	2201      	movs	r2, #1
 8005372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005376:	48ad      	ldr	r0, [pc, #692]	; (800562c <segment+0x38c>)
 8005378:	f7fb f9f1 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
						break;
			}

	if(DisplayIndex==N_TEMP){
 800537c:	4ba9      	ldr	r3, [pc, #676]	; (8005624 <segment+0x384>)
 800537e:	789b      	ldrb	r3, [r3, #2]
 8005380:	2b03      	cmp	r3, #3
 8005382:	f000 812a 	beq.w	80055da <segment+0x33a>
			HAL_GPIO_WritePin(Nixie_8_GPIO_Port,Nixie_8_Pin,GPIO_PIN_SET);
		}else{
			HAL_GPIO_WritePin(NixieCrl_4_GPIO_Port,NixieCrl_4_Pin,GPIO_PIN_RESET);
		}
	}else{
		HAL_GPIO_WritePin(NixieCrl_P_GPIO_Port,NixieCrl_P_Pin,GPIO_PIN_SET);
 8005386:	2201      	movs	r2, #1
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	48a7      	ldr	r0, [pc, #668]	; (8005628 <segment+0x388>)
 800538c:	f7fb f9e7 	bl	800075e <HAL_GPIO_WritePin>
		if ((digit==2) || (digit==4)){
 8005390:	2c02      	cmp	r4, #2
 8005392:	f000 814d 	beq.w	8005630 <segment+0x390>
 8005396:	2c04      	cmp	r4, #4
 8005398:	f000 814a 	beq.w	8005630 <segment+0x390>
			HAL_GPIO_WritePin(Nixie_8_GPIO_Port,Nixie_8_Pin,GPIO_PIN_SET);
		}
	}
}
 800539c:	bd70      	pop	{r4, r5, r6, pc}
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 800539e:	4da2      	ldr	r5, [pc, #648]	; (8005628 <segment+0x388>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7fb f9d9 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 80053ac:	2201      	movs	r2, #1
 80053ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053b2:	4628      	mov	r0, r5
 80053b4:	f7fb f9d3 	bl	800075e <HAL_GPIO_WritePin>
						break;
 80053b8:	e7e0      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 80053ba:	4d9b      	ldr	r5, [pc, #620]	; (8005628 <segment+0x388>)
 80053bc:	2201      	movs	r2, #1
 80053be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053c2:	4628      	mov	r0, r5
 80053c4:	f7fb f9cb 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 80053c8:	2201      	movs	r2, #1
 80053ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053ce:	4628      	mov	r0, r5
 80053d0:	f7fb f9c5 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 80053d4:	2201      	movs	r2, #1
 80053d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053da:	4628      	mov	r0, r5
 80053dc:	f7fb f9bf 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_5_GPIO_Port,Nixie_5_Pin,GPIO_PIN_SET);
 80053e0:	2201      	movs	r2, #1
 80053e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7fb f9b9 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 80053ec:	2201      	movs	r2, #1
 80053ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053f2:	488e      	ldr	r0, [pc, #568]	; (800562c <segment+0x38c>)
 80053f4:	f7fb f9b3 	bl	800075e <HAL_GPIO_WritePin>
						break;
 80053f8:	e7c0      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 80053fa:	4d8b      	ldr	r5, [pc, #556]	; (8005628 <segment+0x388>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005402:	4628      	mov	r0, r5
 8005404:	f7fb f9ab 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 8005408:	2201      	movs	r2, #1
 800540a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800540e:	4628      	mov	r0, r5
 8005410:	f7fb f9a5 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 8005414:	2201      	movs	r2, #1
 8005416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800541a:	4628      	mov	r0, r5
 800541c:	f7fb f99f 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 8005420:	2201      	movs	r2, #1
 8005422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005426:	4628      	mov	r0, r5
 8005428:	f7fb f999 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 800542c:	2201      	movs	r2, #1
 800542e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005432:	487e      	ldr	r0, [pc, #504]	; (800562c <segment+0x38c>)
 8005434:	f7fb f993 	bl	800075e <HAL_GPIO_WritePin>
						break;
 8005438:	e7a0      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 800543a:	4d7b      	ldr	r5, [pc, #492]	; (8005628 <segment+0x388>)
 800543c:	2201      	movs	r2, #1
 800543e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005442:	4628      	mov	r0, r5
 8005444:	f7fb f98b 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 8005448:	2201      	movs	r2, #1
 800544a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800544e:	4628      	mov	r0, r5
 8005450:	f7fb f985 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
 8005454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005458:	2201      	movs	r2, #1
 800545a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800545e:	4628      	mov	r0, r5
 8005460:	f7fb f97d 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800546a:	4628      	mov	r0, r5
 800546c:	f7fb f977 	bl	800075e <HAL_GPIO_WritePin>
						break;
 8005470:	e784      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 8005472:	4d6d      	ldr	r5, [pc, #436]	; (8005628 <segment+0x388>)
 8005474:	2201      	movs	r2, #1
 8005476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800547a:	4628      	mov	r0, r5
 800547c:	f7fb f96f 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 8005480:	2201      	movs	r2, #1
 8005482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005486:	4628      	mov	r0, r5
 8005488:	f7fb f969 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 800548c:	2201      	movs	r2, #1
 800548e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005492:	4628      	mov	r0, r5
 8005494:	f7fb f963 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
 8005498:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800549c:	2201      	movs	r2, #1
 800549e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054a2:	4628      	mov	r0, r5
 80054a4:	f7fb f95b 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 80054a8:	2201      	movs	r2, #1
 80054aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7fb f955 	bl	800075e <HAL_GPIO_WritePin>
						break;
 80054b4:	e762      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 80054b6:	4d5c      	ldr	r5, [pc, #368]	; (8005628 <segment+0x388>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054be:	4628      	mov	r0, r5
 80054c0:	f7fb f94d 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 80054c4:	2201      	movs	r2, #1
 80054c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054ca:	4628      	mov	r0, r5
 80054cc:	f7fb f947 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 80054d0:	2201      	movs	r2, #1
 80054d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7fb f941 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_5_GPIO_Port,Nixie_5_Pin,GPIO_PIN_SET);
 80054dc:	2201      	movs	r2, #1
 80054de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e2:	4628      	mov	r0, r5
 80054e4:	f7fb f93b 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
 80054e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054ec:	2201      	movs	r2, #1
 80054ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f2:	4628      	mov	r0, r5
 80054f4:	f7fb f933 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 80054f8:	2201      	movs	r2, #1
 80054fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054fe:	4628      	mov	r0, r5
 8005500:	f7fb f92d 	bl	800075e <HAL_GPIO_WritePin>
						break;
 8005504:	e73a      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 8005506:	4d48      	ldr	r5, [pc, #288]	; (8005628 <segment+0x388>)
 8005508:	2201      	movs	r2, #1
 800550a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800550e:	4628      	mov	r0, r5
 8005510:	f7fb f925 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 8005514:	2201      	movs	r2, #1
 8005516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800551a:	4628      	mov	r0, r5
 800551c:	f7fb f91f 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 8005520:	2201      	movs	r2, #1
 8005522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005526:	4628      	mov	r0, r5
 8005528:	f7fb f919 	bl	800075e <HAL_GPIO_WritePin>
						break;
 800552c:	e726      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 800552e:	4d3e      	ldr	r5, [pc, #248]	; (8005628 <segment+0x388>)
 8005530:	2201      	movs	r2, #1
 8005532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005536:	4628      	mov	r0, r5
 8005538:	f7fb f911 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 800553c:	2201      	movs	r2, #1
 800553e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005542:	4628      	mov	r0, r5
 8005544:	f7fb f90b 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 8005548:	2201      	movs	r2, #1
 800554a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800554e:	4628      	mov	r0, r5
 8005550:	f7fb f905 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 8005554:	2201      	movs	r2, #1
 8005556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800555a:	4628      	mov	r0, r5
 800555c:	f7fb f8ff 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_5_GPIO_Port,Nixie_5_Pin,GPIO_PIN_SET);
 8005560:	2201      	movs	r2, #1
 8005562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005566:	4628      	mov	r0, r5
 8005568:	f7fb f8f9 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
 800556c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005570:	2201      	movs	r2, #1
 8005572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005576:	4628      	mov	r0, r5
 8005578:	f7fb f8f1 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 800557c:	2201      	movs	r2, #1
 800557e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005582:	4628      	mov	r0, r5
 8005584:	f7fb f8eb 	bl	800075e <HAL_GPIO_WritePin>
						break;
 8005588:	e6f8      	b.n	800537c <segment+0xdc>
						HAL_GPIO_WritePin(Nixie_1_GPIO_Port,Nixie_1_Pin,GPIO_PIN_SET);
 800558a:	4d27      	ldr	r5, [pc, #156]	; (8005628 <segment+0x388>)
 800558c:	2201      	movs	r2, #1
 800558e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005592:	4628      	mov	r0, r5
 8005594:	f7fb f8e3 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_2_GPIO_Port,Nixie_2_Pin,GPIO_PIN_SET);
 8005598:	2201      	movs	r2, #1
 800559a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800559e:	4628      	mov	r0, r5
 80055a0:	f7fb f8dd 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_3_GPIO_Port,Nixie_3_Pin,GPIO_PIN_SET);
 80055a4:	2201      	movs	r2, #1
 80055a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055aa:	4628      	mov	r0, r5
 80055ac:	f7fb f8d7 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_4_GPIO_Port,Nixie_4_Pin,GPIO_PIN_SET);
 80055b0:	2201      	movs	r2, #1
 80055b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055b6:	4628      	mov	r0, r5
 80055b8:	f7fb f8d1 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_6_GPIO_Port,Nixie_6_Pin,GPIO_PIN_SET);
 80055bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055c0:	2201      	movs	r2, #1
 80055c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7fb f8c9 	bl	800075e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Nixie_7_GPIO_Port,Nixie_7_Pin,GPIO_PIN_SET);
 80055cc:	2201      	movs	r2, #1
 80055ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7fb f8c3 	bl	800075e <HAL_GPIO_WritePin>
						break;
 80055d8:	e6d0      	b.n	800537c <segment+0xdc>
		HAL_GPIO_WritePin(NixieCrl_P_GPIO_Port,NixieCrl_P_Pin,GPIO_PIN_RESET);
 80055da:	2200      	movs	r2, #0
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	4812      	ldr	r0, [pc, #72]	; (8005628 <segment+0x388>)
 80055e0:	f7fb f8bd 	bl	800075e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NixieCrl_5_GPIO_Port,NixieCrl_5_Pin,GPIO_PIN_RESET);
 80055e4:	2200      	movs	r2, #0
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	4810      	ldr	r0, [pc, #64]	; (800562c <segment+0x38c>)
 80055ea:	f7fb f8b8 	bl	800075e <HAL_GPIO_WritePin>
		if(digit==2){
 80055ee:	2c02      	cmp	r4, #2
 80055f0:	d00a      	beq.n	8005608 <segment+0x368>
		if((digit==4) && (display[digit]==1)){
 80055f2:	2c04      	cmp	r4, #4
 80055f4:	d102      	bne.n	80055fc <segment+0x35c>
 80055f6:	5d33      	ldrb	r3, [r6, r4]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d00c      	beq.n	8005616 <segment+0x376>
			HAL_GPIO_WritePin(NixieCrl_4_GPIO_Port,NixieCrl_4_Pin,GPIO_PIN_RESET);
 80055fc:	2200      	movs	r2, #0
 80055fe:	2140      	movs	r1, #64	; 0x40
 8005600:	480a      	ldr	r0, [pc, #40]	; (800562c <segment+0x38c>)
 8005602:	f7fb f8ac 	bl	800075e <HAL_GPIO_WritePin>
 8005606:	e6c9      	b.n	800539c <segment+0xfc>
			HAL_GPIO_WritePin(Nixie_8_GPIO_Port,Nixie_8_Pin,GPIO_PIN_SET);
 8005608:	2201      	movs	r2, #1
 800560a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800560e:	4807      	ldr	r0, [pc, #28]	; (800562c <segment+0x38c>)
 8005610:	f7fb f8a5 	bl	800075e <HAL_GPIO_WritePin>
 8005614:	e7ed      	b.n	80055f2 <segment+0x352>
			HAL_GPIO_WritePin(Nixie_8_GPIO_Port,Nixie_8_Pin,GPIO_PIN_SET);
 8005616:	2201      	movs	r2, #1
 8005618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800561c:	4803      	ldr	r0, [pc, #12]	; (800562c <segment+0x38c>)
 800561e:	f7fb f89e 	bl	800075e <HAL_GPIO_WritePin>
 8005622:	e6bb      	b.n	800539c <segment+0xfc>
 8005624:	200023d8 	.word	0x200023d8
 8005628:	40010800 	.word	0x40010800
 800562c:	40010c00 	.word	0x40010c00
			HAL_GPIO_WritePin(Nixie_8_GPIO_Port,Nixie_8_Pin,GPIO_PIN_SET);
 8005630:	2201      	movs	r2, #1
 8005632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005636:	4802      	ldr	r0, [pc, #8]	; (8005640 <segment+0x3a0>)
 8005638:	f7fb f891 	bl	800075e <HAL_GPIO_WritePin>
}
 800563c:	e6ae      	b.n	800539c <segment+0xfc>
 800563e:	bf00      	nop
 8005640:	40010c00 	.word	0x40010c00

08005644 <segmentDisplay>:
void segmentDisplay(){
 8005644:	b510      	push	{r4, lr}

	static uint8_t digit=0;
	HAL_GPIO_WritePin(NixieCrl_0_GPIO_Port,NixieCrl_0_Pin,GPIO_PIN_RESET);
 8005646:	2200      	movs	r2, #0
 8005648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800564c:	482e      	ldr	r0, [pc, #184]	; (8005708 <segmentDisplay+0xc4>)
 800564e:	f7fb f886 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NixieCrl_1_GPIO_Port,NixieCrl_1_Pin,GPIO_PIN_RESET);
 8005652:	4c2e      	ldr	r4, [pc, #184]	; (800570c <segmentDisplay+0xc8>)
 8005654:	2200      	movs	r2, #0
 8005656:	2108      	movs	r1, #8
 8005658:	4620      	mov	r0, r4
 800565a:	f7fb f880 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NixieCrl_2_GPIO_Port,NixieCrl_2_Pin,GPIO_PIN_RESET);
 800565e:	2200      	movs	r2, #0
 8005660:	2110      	movs	r1, #16
 8005662:	4620      	mov	r0, r4
 8005664:	f7fb f87b 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NixieCrl_3_GPIO_Port,NixieCrl_3_Pin,GPIO_PIN_RESET);
 8005668:	2200      	movs	r2, #0
 800566a:	2120      	movs	r1, #32
 800566c:	4620      	mov	r0, r4
 800566e:	f7fb f876 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NixieCrl_4_GPIO_Port,NixieCrl_4_Pin,GPIO_PIN_RESET);
 8005672:	2200      	movs	r2, #0
 8005674:	2140      	movs	r1, #64	; 0x40
 8005676:	4620      	mov	r0, r4
 8005678:	f7fb f871 	bl	800075e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NixieCrl_5_GPIO_Port,NixieCrl_5_Pin,GPIO_PIN_RESET);
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	4620      	mov	r0, r4
 8005682:	f7fb f86c 	bl	800075e <HAL_GPIO_WritePin>
	if(NixiePower){
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <segmentDisplay+0xcc>)
 8005688:	789b      	ldrb	r3, [r3, #2]
 800568a:	b1f3      	cbz	r3, 80056ca <segmentDisplay+0x86>


		switch(digit){
 800568c:	4b21      	ldr	r3, [pc, #132]	; (8005714 <segmentDisplay+0xd0>)
 800568e:	7a9b      	ldrb	r3, [r3, #10]
 8005690:	2b05      	cmp	r3, #5
 8005692:	d80a      	bhi.n	80056aa <segmentDisplay+0x66>
 8005694:	e8df f003 	tbb	[pc, r3]
 8005698:	26201a03 	.word	0x26201a03
 800569c:	322c      	.short	0x322c
				case 0:
					HAL_GPIO_WritePin(NixieCrl_0_GPIO_Port,NixieCrl_0_Pin,GPIO_PIN_SET);
 800569e:	2201      	movs	r2, #1
 80056a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a4:	4818      	ldr	r0, [pc, #96]	; (8005708 <segmentDisplay+0xc4>)
 80056a6:	f7fb f85a 	bl	800075e <HAL_GPIO_WritePin>
					break;
				case 5:
					HAL_GPIO_WritePin(NixieCrl_5_GPIO_Port,NixieCrl_5_Pin,GPIO_PIN_SET);
					break;
				}
		segment(digit);
 80056aa:	4c1a      	ldr	r4, [pc, #104]	; (8005714 <segmentDisplay+0xd0>)
 80056ac:	7aa0      	ldrb	r0, [r4, #10]
 80056ae:	f7ff fdf7 	bl	80052a0 <segment>
		digit++;
 80056b2:	7aa2      	ldrb	r2, [r4, #10]
 80056b4:	3201      	adds	r2, #1
 80056b6:	b2d2      	uxtb	r2, r2
		digit%=6;
 80056b8:	4b17      	ldr	r3, [pc, #92]	; (8005718 <segmentDisplay+0xd4>)
 80056ba:	fba3 1302 	umull	r1, r3, r3, r2
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80056c4:	0059      	lsls	r1, r3, #1
 80056c6:	1a52      	subs	r2, r2, r1
 80056c8:	72a2      	strb	r2, [r4, #10]
	}
}
 80056ca:	bd10      	pop	{r4, pc}
					HAL_GPIO_WritePin(NixieCrl_1_GPIO_Port,NixieCrl_1_Pin,GPIO_PIN_SET);
 80056cc:	2201      	movs	r2, #1
 80056ce:	2108      	movs	r1, #8
 80056d0:	480e      	ldr	r0, [pc, #56]	; (800570c <segmentDisplay+0xc8>)
 80056d2:	f7fb f844 	bl	800075e <HAL_GPIO_WritePin>
					break;
 80056d6:	e7e8      	b.n	80056aa <segmentDisplay+0x66>
					HAL_GPIO_WritePin(NixieCrl_2_GPIO_Port,NixieCrl_2_Pin,GPIO_PIN_SET);
 80056d8:	2201      	movs	r2, #1
 80056da:	2110      	movs	r1, #16
 80056dc:	480b      	ldr	r0, [pc, #44]	; (800570c <segmentDisplay+0xc8>)
 80056de:	f7fb f83e 	bl	800075e <HAL_GPIO_WritePin>
					break;
 80056e2:	e7e2      	b.n	80056aa <segmentDisplay+0x66>
					HAL_GPIO_WritePin(NixieCrl_3_GPIO_Port,NixieCrl_3_Pin,GPIO_PIN_SET);
 80056e4:	2201      	movs	r2, #1
 80056e6:	2120      	movs	r1, #32
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <segmentDisplay+0xc8>)
 80056ea:	f7fb f838 	bl	800075e <HAL_GPIO_WritePin>
					break;
 80056ee:	e7dc      	b.n	80056aa <segmentDisplay+0x66>
					HAL_GPIO_WritePin(NixieCrl_4_GPIO_Port,NixieCrl_4_Pin,GPIO_PIN_SET);
 80056f0:	2201      	movs	r2, #1
 80056f2:	2140      	movs	r1, #64	; 0x40
 80056f4:	4805      	ldr	r0, [pc, #20]	; (800570c <segmentDisplay+0xc8>)
 80056f6:	f7fb f832 	bl	800075e <HAL_GPIO_WritePin>
					break;
 80056fa:	e7d6      	b.n	80056aa <segmentDisplay+0x66>
					HAL_GPIO_WritePin(NixieCrl_5_GPIO_Port,NixieCrl_5_Pin,GPIO_PIN_SET);
 80056fc:	2201      	movs	r2, #1
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <segmentDisplay+0xc8>)
 8005702:	f7fb f82c 	bl	800075e <HAL_GPIO_WritePin>
					break;
 8005706:	e7d0      	b.n	80056aa <segmentDisplay+0x66>
 8005708:	40010800 	.word	0x40010800
 800570c:	40010c00 	.word	0x40010c00
 8005710:	20000011 	.word	0x20000011
 8005714:	200023d8 	.word	0x200023d8
 8005718:	aaaaaaab 	.word	0xaaaaaaab

0800571c <nixieIface_increase>:
		digit++;
		digit%=6;
	}
}

void nixieIface_increase(const Nixie* handle, const int32_t Type, const int32_t Unit){
 800571c:	b508      	push	{r3, lr}
 800571e:	4608      	mov	r0, r1
	increase(Type,Unit);
 8005720:	b2d1      	uxtb	r1, r2
 8005722:	b2c0      	uxtb	r0, r0
 8005724:	f7fe ff5e 	bl	80045e4 <increase>
}
 8005728:	bd08      	pop	{r3, pc}
	...

0800572c <nixieIface_show>:
void nixieIface_show(const Nixie* handle, const int32_t State){
	DisplayIndex=State;
 800572c:	4b01      	ldr	r3, [pc, #4]	; (8005734 <nixieIface_show+0x8>)
 800572e:	7099      	strb	r1, [r3, #2]
}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	200023d8 	.word	0x200023d8

08005738 <nixieIface_increaseLed>:
void nixieIface_increaseLed(const Nixie* handle){
	Led[N_TIME]++;
 8005738:	4a03      	ldr	r2, [pc, #12]	; (8005748 <nixieIface_increaseLed+0x10>)
 800573a:	7913      	ldrb	r3, [r2, #4]
 800573c:	3301      	adds	r3, #1
	Led[N_TIME]%=0x40;
 800573e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005742:	7113      	strb	r3, [r2, #4]
}
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	200023d8 	.word	0x200023d8

0800574c <nixieIface_init>:
void nixieIface_init(const Nixie* handle){
 800574c:	b508      	push	{r3, lr}
	  HAL_TIM_Base_Start_IT(&htim2);
 800574e:	4808      	ldr	r0, [pc, #32]	; (8005770 <nixieIface_init+0x24>)
 8005750:	f7fd f816 	bl	8002780 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3);
 8005754:	4807      	ldr	r0, [pc, #28]	; (8005774 <nixieIface_init+0x28>)
 8005756:	f7fd f813 	bl	8002780 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim4);
 800575a:	4807      	ldr	r0, [pc, #28]	; (8005778 <nixieIface_init+0x2c>)
 800575c:	f7fd f810 	bl	8002780 <HAL_TIM_Base_Start_IT>
	  setConfigRTC(&hi2c2);
 8005760:	4806      	ldr	r0, [pc, #24]	; (800577c <nixieIface_init+0x30>)
 8005762:	f7fe feed 	bl	8004540 <setConfigRTC>
	  resetVarRTC();
 8005766:	f7ff f875 	bl	8004854 <resetVarRTC>
	  resetVarNixie();
 800576a:	f7ff fd0b 	bl	8005184 <resetVarNixie>
}
 800576e:	bd08      	pop	{r3, pc}
 8005770:	20002600 	.word	0x20002600
 8005774:	20002560 	.word	0x20002560
 8005778:	200024c4 	.word	0x200024c4
 800577c:	2000250c 	.word	0x2000250c

08005780 <nixieIface_showLed>:
void nixieIface_showLed(const Nixie* handle, const int32_t State){
	LedIndex=State;
 8005780:	4b01      	ldr	r3, [pc, #4]	; (8005788 <nixieIface_showLed+0x8>)
 8005782:	7059      	strb	r1, [r3, #1]
}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	200023d8 	.word	0x200023d8

0800578c <nixieIface_ledPower>:
void nixieIface_ledPower(const Nixie* handle, const int32_t State){
	LedPower=State;
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <nixieIface_ledPower+0x8>)
 800578e:	7059      	strb	r1, [r3, #1]
}
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000011 	.word	0x20000011

08005798 <nixieIface_send>:
void nixieIface_send(const Nixie* handle, const int32_t State){
 8005798:	b508      	push	{r3, lr}
	setRTC(&hi2c2,State);
 800579a:	b2c9      	uxtb	r1, r1
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <nixieIface_send+0xc>)
 800579e:	f7ff f86b 	bl	8004878 <setRTC>
}
 80057a2:	bd08      	pop	{r3, pc}
 80057a4:	2000250c 	.word	0x2000250c

080057a8 <nixieIface_nixiePower>:
void nixieIface_nixiePower(const Nixie* handle, const int32_t State){
	NixiePower=State;
 80057a8:	4b01      	ldr	r3, [pc, #4]	; (80057b0 <nixieIface_nixiePower+0x8>)
 80057aa:	7099      	strb	r1, [r3, #2]
}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000011 	.word	0x20000011

080057b4 <nixieIface_buzzer>:
void nixieIface_buzzer(const Nixie* handle, const int32_t State){
	BuzzerFlag=State;
 80057b4:	4b01      	ldr	r3, [pc, #4]	; (80057bc <nixieIface_buzzer+0x8>)
 80057b6:	7019      	strb	r1, [r3, #0]
}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	200023d8 	.word	0x200023d8

080057c0 <nixieIface_swapAlarm>:
void nixieIface_swapAlarm(const Nixie* handle){
 80057c0:	b508      	push	{r3, lr}
	uint8_t aux=0;
	aux=enableAlarm(&hi2c2);
 80057c2:	4805      	ldr	r0, [pc, #20]	; (80057d8 <nixieIface_swapAlarm+0x18>)
 80057c4:	f7fe feee 	bl	80045a4 <enableAlarm>
	Led[N_ALARM_STATE]=aux? GREEN: RED;
 80057c8:	b118      	cbz	r0, 80057d2 <nixieIface_swapAlarm+0x12>
 80057ca:	220c      	movs	r2, #12
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <nixieIface_swapAlarm+0x1c>)
 80057ce:	721a      	strb	r2, [r3, #8]
}
 80057d0:	bd08      	pop	{r3, pc}
	Led[N_ALARM_STATE]=aux? GREEN: RED;
 80057d2:	2203      	movs	r2, #3
 80057d4:	e7fa      	b.n	80057cc <nixieIface_swapAlarm+0xc>
 80057d6:	bf00      	nop
 80057d8:	2000250c 	.word	0x2000250c
 80057dc:	200023d8 	.word	0x200023d8

080057e0 <nixieIface_swapLedFlag>:
void nixieIface_swapLedFlag(const Nixie* handle){
	LedFlag=~LedFlag;
 80057e0:	4a02      	ldr	r2, [pc, #8]	; (80057ec <nixieIface_swapLedFlag+0xc>)
 80057e2:	7813      	ldrb	r3, [r2, #0]
 80057e4:	43db      	mvns	r3, r3
 80057e6:	7013      	strb	r3, [r2, #0]
}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20000011 	.word	0x20000011

080057f0 <nixieIface_alarmFlag>:
void nixieIface_alarmFlag(const Nixie* handle){
 80057f0:	b508      	push	{r3, lr}
	stopAlarm(&hi2c2);
 80057f2:	4802      	ldr	r0, [pc, #8]	; (80057fc <nixieIface_alarmFlag+0xc>)
 80057f4:	f7fe fec3 	bl	800457e <stopAlarm>
}
 80057f8:	bd08      	pop	{r3, pc}
 80057fa:	bf00      	nop
 80057fc:	2000250c 	.word	0x2000250c

08005800 <nixieIface_resetVar>:
void nixieIface_resetVar(const Nixie* handle){
 8005800:	b508      	push	{r3, lr}
	resetVarRTC();
 8005802:	f7ff f827 	bl	8004854 <resetVarRTC>
}
 8005806:	bd08      	pop	{r3, pc}

08005808 <nixieInit>:
	stateTimer_start(handle, evid, (raise_event_cb_t) nixie_raiseTimeEvent, time_ms, periodic);
}
void nixie_unsetTimer(Nixie* handle, const sc_eventid evid){
	stateTimer_stop(evid);
}
void nixieInit(){
 8005808:	b510      	push	{r4, lr}
	  nixie_init(&Clock);
 800580a:	4c05      	ldr	r4, [pc, #20]	; (8005820 <nixieInit+0x18>)
 800580c:	4620      	mov	r0, r4
 800580e:	f001 f815 	bl	800683c <nixie_init>
	  nixie_enter(&Clock);
 8005812:	4620      	mov	r0, r4
 8005814:	f001 f823 	bl	800685e <nixie_enter>
	  nixie_runCycle(&Clock);
 8005818:	4620      	mov	r0, r4
 800581a:	f001 f825 	bl	8006868 <nixie_runCycle>
}
 800581e:	bd10      	pop	{r4, pc}
 8005820:	200023e4 	.word	0x200023e4

08005824 <nixieEvent>:

void nixieEvent(uint8_t event){
 8005824:	b508      	push	{r3, lr}
	switch (event){
 8005826:	3801      	subs	r0, #1
 8005828:	2804      	cmp	r0, #4
 800582a:	d807      	bhi.n	800583c <nixieEvent+0x18>
 800582c:	e8df f000 	tbb	[pc, r0]
 8005830:	120e0a03 	.word	0x120e0a03
 8005834:	16          	.byte	0x16
 8005835:	00          	.byte	0x00
	case E_B1 :
		nixieIface_raise_b_1(&Clock);
 8005836:	480b      	ldr	r0, [pc, #44]	; (8005864 <nixieEvent+0x40>)
 8005838:	f001 f8c0 	bl	80069bc <nixieIface_raise_b_1>
		break;
	case E_SENSOR :
		nixieIface_raise_s_SENSOR(&Clock);
		break;
	}
	nixie_runCycle(&Clock);
 800583c:	4809      	ldr	r0, [pc, #36]	; (8005864 <nixieEvent+0x40>)
 800583e:	f001 f813 	bl	8006868 <nixie_runCycle>
}
 8005842:	bd08      	pop	{r3, pc}
		nixieIface_raise_b_2(&Clock);
 8005844:	4807      	ldr	r0, [pc, #28]	; (8005864 <nixieEvent+0x40>)
 8005846:	f001 f8bc 	bl	80069c2 <nixieIface_raise_b_2>
		break;
 800584a:	e7f7      	b.n	800583c <nixieEvent+0x18>
		nixieIface_raise_b_3(&Clock);
 800584c:	4805      	ldr	r0, [pc, #20]	; (8005864 <nixieEvent+0x40>)
 800584e:	f001 f8bb 	bl	80069c8 <nixieIface_raise_b_3>
		break;
 8005852:	e7f3      	b.n	800583c <nixieEvent+0x18>
		nixieIface_raise_e_ALARM(&Clock);
 8005854:	4803      	ldr	r0, [pc, #12]	; (8005864 <nixieEvent+0x40>)
 8005856:	f001 f8ba 	bl	80069ce <nixieIface_raise_e_ALARM>
		break;
 800585a:	e7ef      	b.n	800583c <nixieEvent+0x18>
		nixieIface_raise_s_SENSOR(&Clock);
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <nixieEvent+0x40>)
 800585e:	f001 f8aa 	bl	80069b6 <nixieIface_raise_s_SENSOR>
		break;
 8005862:	e7eb      	b.n	800583c <nixieEvent+0x18>
 8005864:	200023e4 	.word	0x200023e4

08005868 <stateTimer_start>:


uint8_t stateTimer_start(void *sm_handle, sc_eventid ev_id, raise_event_cb_t cb,
                          uint32_t timeout, bool periodic)
{
    if ((sm_handle == NULL) || (ev_id == NULL) || (cb == NULL)) {
 8005868:	b328      	cbz	r0, 80058b6 <stateTimer_start+0x4e>
{
 800586a:	b4f0      	push	{r4, r5, r6, r7}
 800586c:	4607      	mov	r7, r0
    if ((sm_handle == NULL) || (ev_id == NULL) || (cb == NULL)) {
 800586e:	b321      	cbz	r1, 80058ba <stateTimer_start+0x52>
 8005870:	b32a      	cbz	r2, 80058be <stateTimer_start+0x56>
        return ERROR;
    }

    for (uint8_t i = 0; i < NELEMENTS(timers); i++) {
 8005872:	2000      	movs	r0, #0
 8005874:	e001      	b.n	800587a <stateTimer_start+0x12>
 8005876:	3001      	adds	r0, #1
 8005878:	b2c0      	uxtb	r0, r0
 800587a:	2804      	cmp	r0, #4
 800587c:	d818      	bhi.n	80058b0 <stateTimer_start+0x48>
        if (timers[i].ev_id == ev_id) {
 800587e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8005882:	4d11      	ldr	r5, [pc, #68]	; (80058c8 <stateTimer_start+0x60>)
 8005884:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8005888:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800588a:	428c      	cmp	r4, r1
 800588c:	d019      	beq.n	80058c2 <stateTimer_start+0x5a>
            return ERROR;  // existing event
        }
        if (timers[i].ev_id == NULL) {
 800588e:	2c00      	cmp	r4, #0
 8005890:	d1f1      	bne.n	8005876 <stateTimer_start+0xe>
            timers[i].sm_handle = sm_handle;
 8005892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005896:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800589a:	62c7      	str	r7, [r0, #44]	; 0x2c
            timers[i].ev_id = ev_id;
 800589c:	6301      	str	r1, [r0, #48]	; 0x30
            timers[i].cb = cb;
 800589e:	6342      	str	r2, [r0, #52]	; 0x34
            timers[i].timeout = timeout;
 80058a0:	6383      	str	r3, [r0, #56]	; 0x38
            timers[i].expires = timeout;
 80058a2:	63c3      	str	r3, [r0, #60]	; 0x3c
            timers[i].periodic = periodic;
 80058a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80058a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
            return SUCCESS;
 80058ac:	2001      	movs	r0, #1
 80058ae:	e000      	b.n	80058b2 <stateTimer_start+0x4a>
        }
    }

    return ERROR;  // no free timer
 80058b0:	2000      	movs	r0, #0
}
 80058b2:	bcf0      	pop	{r4, r5, r6, r7}
 80058b4:	4770      	bx	lr
        return ERROR;
 80058b6:	2000      	movs	r0, #0
}
 80058b8:	4770      	bx	lr
        return ERROR;
 80058ba:	2000      	movs	r0, #0
 80058bc:	e7f9      	b.n	80058b2 <stateTimer_start+0x4a>
 80058be:	2000      	movs	r0, #0
 80058c0:	e7f7      	b.n	80058b2 <stateTimer_start+0x4a>
            return ERROR;  // existing event
 80058c2:	2000      	movs	r0, #0
 80058c4:	e7f5      	b.n	80058b2 <stateTimer_start+0x4a>
 80058c6:	bf00      	nop
 80058c8:	200023d8 	.word	0x200023d8

080058cc <nixie_setTimer>:
void nixie_setTimer(Nixie* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
 80058cc:	b500      	push	{lr}
 80058ce:	b083      	sub	sp, #12
	stateTimer_start(handle, evid, (raise_event_cb_t) nixie_raiseTimeEvent, time_ms, periodic);
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	4a02      	ldr	r2, [pc, #8]	; (80058e0 <nixie_setTimer+0x14>)
 80058d6:	f7ff ffc7 	bl	8005868 <stateTimer_start>
}
 80058da:	b003      	add	sp, #12
 80058dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80058e0:	080069a5 	.word	0x080069a5

080058e4 <stateTimer_update>:

void stateTimer_update(void)
{
 80058e4:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < NELEMENTS(timers); i++) {
 80058e6:	2400      	movs	r4, #0
 80058e8:	e00e      	b.n	8005908 <stateTimer_update+0x24>
        if (timers[i].ev_id != NULL) {
            if (timers[i].expires != 0) {
                timers[i].expires--;
            }
            else {
                timers[i].cb(timers[i].sm_handle, timers[i].ev_id);
 80058ea:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80058ee:	00d3      	lsls	r3, r2, #3
 80058f0:	4e14      	ldr	r6, [pc, #80]	; (8005944 <stateTimer_update+0x60>)
 80058f2:	441e      	add	r6, r3
 80058f4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80058f6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80058f8:	4798      	blx	r3

                if (timers[i].periodic) {
 80058fa:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80058fe:	b1c3      	cbz	r3, 8005932 <stateTimer_update+0x4e>
                    timers[i].expires = timers[i].timeout;
 8005900:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005902:	63f1      	str	r1, [r6, #60]	; 0x3c
    for (uint8_t i = 0; i < NELEMENTS(timers); i++) {
 8005904:	3401      	adds	r4, #1
 8005906:	b2e4      	uxtb	r4, r4
 8005908:	2c04      	cmp	r4, #4
 800590a:	d81a      	bhi.n	8005942 <stateTimer_update+0x5e>
        if (timers[i].ev_id != NULL) {
 800590c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005910:	00da      	lsls	r2, r3, #3
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <stateTimer_update+0x60>)
 8005914:	4413      	add	r3, r2
 8005916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005918:	2900      	cmp	r1, #0
 800591a:	d0f3      	beq.n	8005904 <stateTimer_update+0x20>
            if (timers[i].expires != 0) {
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <stateTimer_update+0x60>)
 800591e:	4413      	add	r3, r2
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0e1      	beq.n	80058ea <stateTimer_update+0x6>
                timers[i].expires--;
 8005926:	4611      	mov	r1, r2
 8005928:	4a06      	ldr	r2, [pc, #24]	; (8005944 <stateTimer_update+0x60>)
 800592a:	440a      	add	r2, r1
 800592c:	3b01      	subs	r3, #1
 800592e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005930:	e7e8      	b.n	8005904 <stateTimer_update+0x20>
                }
                else {
                    timers[i].ev_id = NULL;
 8005932:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005936:	00ea      	lsls	r2, r5, #3
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <stateTimer_update+0x60>)
 800593a:	4413      	add	r3, r2
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
 8005940:	e7e0      	b.n	8005904 <stateTimer_update+0x20>
                }
            }
        }
    }
}
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	200023d8 	.word	0x200023d8

08005948 <stateTimer_stop>:

uint8_t stateTimer_stop(sc_eventid ev_id)
{
    for (uint8_t i = 0; i < NELEMENTS(timers); i++) {
 8005948:	2300      	movs	r3, #0
 800594a:	2b04      	cmp	r3, #4
 800594c:	d817      	bhi.n	800597e <stateTimer_stop+0x36>
{
 800594e:	b410      	push	{r4}
        if (timers[i].ev_id == ev_id) {
 8005950:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005954:	490b      	ldr	r1, [pc, #44]	; (8005984 <stateTimer_stop+0x3c>)
 8005956:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800595a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800595c:	4282      	cmp	r2, r0
 800595e:	d006      	beq.n	800596e <stateTimer_stop+0x26>
    for (uint8_t i = 0; i < NELEMENTS(timers); i++) {
 8005960:	3301      	adds	r3, #1
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b04      	cmp	r3, #4
 8005966:	d9f3      	bls.n	8005950 <stateTimer_stop+0x8>
            timers[i].ev_id = NULL;
            return SUCCESS;
        }
    }

    return ERROR; // no timer associated to that event
 8005968:	2000      	movs	r0, #0
}
 800596a:	bc10      	pop	{r4}
 800596c:	4770      	bx	lr
            timers[i].ev_id = NULL;
 800596e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8005972:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005976:	2300      	movs	r3, #0
 8005978:	6323      	str	r3, [r4, #48]	; 0x30
            return SUCCESS;
 800597a:	2001      	movs	r0, #1
 800597c:	e7f5      	b.n	800596a <stateTimer_stop+0x22>
    return ERROR; // no timer associated to that event
 800597e:	2000      	movs	r0, #0
}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200023d8 	.word	0x200023d8

08005988 <nixie_unsetTimer>:
void nixie_unsetTimer(Nixie* handle, const sc_eventid evid){
 8005988:	b508      	push	{r3, lr}
	stateTimer_stop(evid);
 800598a:	4608      	mov	r0, r1
 800598c:	f7ff ffdc 	bl	8005948 <stateTimer_stop>
}
 8005990:	bd08      	pop	{r3, pc}
	...

08005994 <nixieTickUpdate>:
void nixieTickUpdate(){
 8005994:	b508      	push	{r3, lr}
	  stateTimer_update();
 8005996:	f7ff ffa5 	bl	80058e4 <stateTimer_update>
	  nixie_runCycle(&Clock);
 800599a:	4802      	ldr	r0, [pc, #8]	; (80059a4 <nixieTickUpdate+0x10>)
 800599c:	f000 ff64 	bl	8006868 <nixie_runCycle>
}
 80059a0:	bd08      	pop	{r3, pc}
 80059a2:	bf00      	nop
 80059a4:	200023e4 	.word	0x200023e4

080059a8 <nixieBuzzer>:


uint8_t nixieBuzzer(uint8_t Period, uint8_t Activity){
	static uint8_t aux=0;
	if (Activity>Period){
 80059a8:	4281      	cmp	r1, r0
 80059aa:	d820      	bhi.n	80059ee <nixieBuzzer+0x46>
uint8_t nixieBuzzer(uint8_t Period, uint8_t Activity){
 80059ac:	b510      	push	{r4, lr}
 80059ae:	4604      	mov	r4, r0
		return ERROR;
	}else{
		if((BuzzerFlag) && (aux<Activity)){
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <nixieBuzzer+0x4c>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	b123      	cbz	r3, 80059c0 <nixieBuzzer+0x18>
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <nixieBuzzer+0x4c>)
 80059b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80059bc:	428b      	cmp	r3, r1
 80059be:	d311      	bcc.n	80059e4 <nixieBuzzer+0x3c>
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
		}else{
			HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin,GPIO_PIN_RESET);
 80059c0:	2200      	movs	r2, #0
 80059c2:	2101      	movs	r1, #1
 80059c4:	480c      	ldr	r0, [pc, #48]	; (80059f8 <nixieBuzzer+0x50>)
 80059c6:	f7fa feca 	bl	800075e <HAL_GPIO_WritePin>
		}
		aux++;
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <nixieBuzzer+0x4c>)
 80059cc:	f892 00a4 	ldrb.w	r0, [r2, #164]	; 0xa4
 80059d0:	3001      	adds	r0, #1
 80059d2:	b2c0      	uxtb	r0, r0
		aux%=Period;
 80059d4:	fbb0 f3f4 	udiv	r3, r0, r4
 80059d8:	fb04 0013 	mls	r0, r4, r3, r0
 80059dc:	f882 00a4 	strb.w	r0, [r2, #164]	; 0xa4
	return SUCCESS;
 80059e0:	2001      	movs	r0, #1
	}
}
 80059e2:	bd10      	pop	{r4, pc}
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
 80059e4:	2101      	movs	r1, #1
 80059e6:	4804      	ldr	r0, [pc, #16]	; (80059f8 <nixieBuzzer+0x50>)
 80059e8:	f7fa febf 	bl	800076a <HAL_GPIO_TogglePin>
 80059ec:	e7ed      	b.n	80059ca <nixieBuzzer+0x22>
		return ERROR;
 80059ee:	2000      	movs	r0, #0
}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	200023d8 	.word	0x200023d8
 80059f8:	40010800 	.word	0x40010800

080059fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059fc:	b500      	push	{lr}
 80059fe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_MspInit+0x4c>)
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	619a      	str	r2, [r3, #24]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	f002 0201 	and.w	r2, r2, #1
 8005a10:	9200      	str	r2, [sp, #0]
 8005a12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a1a:	61da      	str	r2, [r3, #28]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	210f      	movs	r1, #15
 8005a2a:	f06f 0001 	mvn.w	r0, #1
 8005a2e:	f7fa fbc5 	bl	80001bc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a32:	4a06      	ldr	r2, [pc, #24]	; (8005a4c <HAL_MspInit+0x50>)
 8005a34:	6853      	ldr	r3, [r2, #4]
 8005a36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a3e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a40:	b003      	add	sp, #12
 8005a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40010000 	.word	0x40010000

08005a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a50:	b530      	push	{r4, r5, lr}
 8005a52:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a54:	2300      	movs	r3, #0
 8005a56:	9302      	str	r3, [sp, #8]
 8005a58:	9303      	str	r3, [sp, #12]
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C2)
 8005a5e:	6802      	ldr	r2, [r0, #0]
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_I2C_MspInit+0x98>)
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005a66:	b007      	add	sp, #28
 8005a68:	bd30      	pop	{r4, r5, pc}
 8005a6a:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a6c:	4d1f      	ldr	r5, [pc, #124]	; (8005aec <HAL_I2C_MspInit+0x9c>)
 8005a6e:	69ab      	ldr	r3, [r5, #24]
 8005a70:	f043 0308 	orr.w	r3, r3, #8
 8005a74:	61ab      	str	r3, [r5, #24]
 8005a76:	69ab      	ldr	r3, [r5, #24]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005a80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a86:	2312      	movs	r3, #18
 8005a88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a8e:	a902      	add	r1, sp, #8
 8005a90:	4817      	ldr	r0, [pc, #92]	; (8005af0 <HAL_I2C_MspInit+0xa0>)
 8005a92:	f7fa fd4d 	bl	8000530 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005a96:	69eb      	ldr	r3, [r5, #28]
 8005a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a9c:	61eb      	str	r3, [r5, #28]
 8005a9e:	69eb      	ldr	r3, [r5, #28]
 8005aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8005aa8:	4812      	ldr	r0, [pc, #72]	; (8005af4 <HAL_I2C_MspInit+0xa4>)
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <HAL_I2C_MspInit+0xa8>)
 8005aac:	6003      	str	r3, [r0, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6043      	str	r3, [r0, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ab2:	6083      	str	r3, [r0, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	60c2      	str	r2, [r0, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ab8:	6103      	str	r3, [r0, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aba:	6143      	str	r3, [r0, #20]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 8005abc:	2220      	movs	r2, #32
 8005abe:	6182      	str	r2, [r0, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ac0:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8005ac2:	f7fa fbd3 	bl	800026c <HAL_DMA_Init>
 8005ac6:	b958      	cbnz	r0, 8005ae0 <HAL_I2C_MspInit+0x90>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <HAL_I2C_MspInit+0xa4>)
 8005aca:	63a3      	str	r3, [r4, #56]	; 0x38
 8005acc:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2105      	movs	r1, #5
 8005ad2:	2021      	movs	r0, #33	; 0x21
 8005ad4:	f7fa fb72 	bl	80001bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005ad8:	2021      	movs	r0, #33	; 0x21
 8005ada:	f7fa fba3 	bl	8000224 <HAL_NVIC_EnableIRQ>
}
 8005ade:	e7c2      	b.n	8005a66 <HAL_I2C_MspInit+0x16>
      Error_Handler();
 8005ae0:	f7ff fb4e 	bl	8005180 <Error_Handler>
 8005ae4:	e7f0      	b.n	8005ac8 <HAL_I2C_MspInit+0x78>
 8005ae6:	bf00      	nop
 8005ae8:	40005800 	.word	0x40005800
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40010c00 	.word	0x40010c00
 8005af4:	200025ac 	.word	0x200025ac
 8005af8:	40020058 	.word	0x40020058

08005afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005afc:	b500      	push	{lr}
 8005afe:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8005b00:	6803      	ldr	r3, [r0, #0]
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b06:	d008      	beq.n	8005b1a <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005b08:	4a21      	ldr	r2, [pc, #132]	; (8005b90 <HAL_TIM_Base_MspInit+0x94>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_TIM_Base_MspInit+0x46>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8005b0e:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <HAL_TIM_Base_MspInit+0x98>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d029      	beq.n	8005b68 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005b14:	b005      	add	sp, #20
 8005b16:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b1a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	61da      	str	r2, [r3, #28]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2105      	movs	r1, #5
 8005b34:	201c      	movs	r0, #28
 8005b36:	f7fa fb41 	bl	80001bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b3a:	201c      	movs	r0, #28
 8005b3c:	f7fa fb72 	bl	8000224 <HAL_NVIC_EnableIRQ>
 8005b40:	e7e8      	b.n	8005b14 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <HAL_TIM_Base_MspInit+0x9c>)
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	f042 0202 	orr.w	r2, r2, #2
 8005b4a:	61da      	str	r2, [r3, #28]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	9302      	str	r3, [sp, #8]
 8005b54:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005b56:	2200      	movs	r2, #0
 8005b58:	2105      	movs	r1, #5
 8005b5a:	201d      	movs	r0, #29
 8005b5c:	f7fa fb2e 	bl	80001bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b60:	201d      	movs	r0, #29
 8005b62:	f7fa fb5f 	bl	8000224 <HAL_NVIC_EnableIRQ>
 8005b66:	e7d5      	b.n	8005b14 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_TIM_Base_MspInit+0x9c>)
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	f042 0204 	orr.w	r2, r2, #4
 8005b70:	61da      	str	r2, [r3, #28]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	9303      	str	r3, [sp, #12]
 8005b7a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2105      	movs	r1, #5
 8005b80:	201e      	movs	r0, #30
 8005b82:	f7fa fb1b 	bl	80001bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005b86:	201e      	movs	r0, #30
 8005b88:	f7fa fb4c 	bl	8000224 <HAL_NVIC_EnableIRQ>
}
 8005b8c:	e7c2      	b.n	8005b14 <HAL_TIM_Base_MspInit+0x18>
 8005b8e:	bf00      	nop
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40021000 	.word	0x40021000

08005b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b9c:	b500      	push	{lr}
 8005b9e:	b089      	sub	sp, #36	; 0x24
 8005ba0:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2019      	movs	r0, #25
 8005ba6:	f7fa fb09 	bl	80001bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005baa:	2019      	movs	r0, #25
 8005bac:	f7fa fb3a 	bl	8000224 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005bb0:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <HAL_InitTick+0x68>)
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb8:	619a      	str	r2, [r3, #24]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005bc4:	a902      	add	r1, sp, #8
 8005bc6:	a803      	add	r0, sp, #12
 8005bc8:	f7fc fd8e 	bl	80026e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005bcc:	f7fc fd7c 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <HAL_InitTick+0x6c>)
 8005bd2:	fba3 2300 	umull	r2, r3, r3, r0
 8005bd6:	0c9b      	lsrs	r3, r3, #18
 8005bd8:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005bda:	480c      	ldr	r0, [pc, #48]	; (8005c0c <HAL_InitTick+0x70>)
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <HAL_InitTick+0x74>)
 8005bde:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005be0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005be4:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005be6:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bec:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005bee:	f7fc fef7 	bl	80029e0 <HAL_TIM_Base_Init>
 8005bf2:	b118      	cbz	r0, 8005bfc <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8005bf4:	2001      	movs	r0, #1
}
 8005bf6:	b009      	add	sp, #36	; 0x24
 8005bf8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8005bfc:	4803      	ldr	r0, [pc, #12]	; (8005c0c <HAL_InitTick+0x70>)
 8005bfe:	f7fc fdbf 	bl	8002780 <HAL_TIM_Base_Start_IT>
 8005c02:	e7f8      	b.n	8005bf6 <HAL_InitTick+0x5a>
 8005c04:	40021000 	.word	0x40021000
 8005c08:	431bde83 	.word	0x431bde83
 8005c0c:	20002648 	.word	0x20002648
 8005c10:	40012c00 	.word	0x40012c00

08005c14 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c14:	4770      	bx	lr

08005c16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c16:	e7fe      	b.n	8005c16 <HardFault_Handler>

08005c18 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c18:	e7fe      	b.n	8005c18 <MemManage_Handler>

08005c1a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c1a:	e7fe      	b.n	8005c1a <BusFault_Handler>

08005c1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c1c:	e7fe      	b.n	8005c1c <UsageFault_Handler>

08005c1e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c1e:	4770      	bx	lr

08005c20 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005c20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005c22:	2002      	movs	r0, #2
 8005c24:	f7fa fdaa 	bl	800077c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005c28:	bd08      	pop	{r3, pc}
	...

08005c2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8005c2e:	4802      	ldr	r0, [pc, #8]	; (8005c38 <DMA1_Channel5_IRQHandler+0xc>)
 8005c30:	f7fa fbd8 	bl	80003e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005c34:	bd08      	pop	{r3, pc}
 8005c36:	bf00      	nop
 8005c38:	200025ac 	.word	0x200025ac

08005c3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005c3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c3e:	4802      	ldr	r0, [pc, #8]	; (8005c48 <TIM1_UP_IRQHandler+0xc>)
 8005c40:	f7fc fdd6 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005c44:	bd08      	pop	{r3, pc}
 8005c46:	bf00      	nop
 8005c48:	20002648 	.word	0x20002648

08005c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005c4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c4e:	4802      	ldr	r0, [pc, #8]	; (8005c58 <TIM2_IRQHandler+0xc>)
 8005c50:	f7fc fdce 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c54:	bd08      	pop	{r3, pc}
 8005c56:	bf00      	nop
 8005c58:	20002600 	.word	0x20002600

08005c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005c5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005c5e:	4802      	ldr	r0, [pc, #8]	; (8005c68 <TIM3_IRQHandler+0xc>)
 8005c60:	f7fc fdc6 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005c64:	bd08      	pop	{r3, pc}
 8005c66:	bf00      	nop
 8005c68:	20002560 	.word	0x20002560

08005c6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005c6e:	4802      	ldr	r0, [pc, #8]	; (8005c78 <TIM4_IRQHandler+0xc>)
 8005c70:	f7fc fdbe 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005c74:	bd08      	pop	{r3, pc}
 8005c76:	bf00      	nop
 8005c78:	200024c4 	.word	0x200024c4

08005c7c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005c7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005c7e:	4802      	ldr	r0, [pc, #8]	; (8005c88 <I2C2_EV_IRQHandler+0xc>)
 8005c80:	f7fc f932 	bl	8001ee8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005c84:	bd08      	pop	{r3, pc}
 8005c86:	bf00      	nop
 8005c88:	2000250c 	.word	0x2000250c

08005c8c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <SystemInit+0x40>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <SystemInit+0x44>)
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005ca4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005cba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005cbe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <SystemInit+0x48>)
 8005cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cc6:	609a      	str	r2, [r3, #8]
#endif 
}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	f8ff0000 	.word	0xf8ff0000
 8005cd4:	e000ed00 	.word	0xe000ed00

08005cd8 <clearInEvents>:
	return result;
}

static void clearInEvents(Nixie* handle)
{
	handle->iface.S_SENSOR_raised = bool_false;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	7203      	strb	r3, [r0, #8]
	handle->iface.B_1_raised = bool_false;
 8005cdc:	7243      	strb	r3, [r0, #9]
	handle->iface.B_2_raised = bool_false;
 8005cde:	7283      	strb	r3, [r0, #10]
	handle->iface.B_3_raised = bool_false;
 8005ce0:	72c3      	strb	r3, [r0, #11]
	handle->iface.E_ALARM_raised = bool_false;
 8005ce2:	7303      	strb	r3, [r0, #12]
	handle->timeEvents.nixie_t_MODE1_Awake_Date_tev0_raised = bool_false;
 8005ce4:	7603      	strb	r3, [r0, #24]
	handle->timeEvents.nixie_t_MODE1_Awake_Temperature_tev0_raised = bool_false;
 8005ce6:	7643      	strb	r3, [r0, #25]
	handle->timeEvents.nixie_t_MODE2_Sleep_Wake_Up_tev0_raised = bool_false;
 8005ce8:	7683      	strb	r3, [r0, #26]
	handle->timeEvents.nixie_t_MODE2_Sleep_Date_tev0_raised = bool_false;
 8005cea:	76c3      	strb	r3, [r0, #27]
	handle->timeEvents.nixie_t_MODE2_Sleep_Temperature_tev0_raised = bool_false;
 8005cec:	7703      	strb	r3, [r0, #28]
	handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_ON__tev0_raised = bool_false;
 8005cee:	7743      	strb	r3, [r0, #29]
	handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_OFF__tev0_raised = bool_false;
 8005cf0:	7783      	strb	r3, [r0, #30]
}
 8005cf2:	4770      	bx	lr

08005cf4 <check_t__choice_0_tr0_tr0>:

/* implementations of all internal functions */

static sc_boolean check_t__choice_0_tr0_tr0(const Nixie* handle)
{
	return (handle->internal.MODE) == (2);
 8005cf4:	6940      	ldr	r0, [r0, #20]
}
 8005cf6:	2802      	cmp	r0, #2
 8005cf8:	bf14      	ite	ne
 8005cfa:	2000      	movne	r0, #0
 8005cfc:	2001      	moveq	r0, #1
 8005cfe:	4770      	bx	lr

08005d00 <check_t__choice_0_tr2_tr2>:

static sc_boolean check_t__choice_0_tr2_tr2(const Nixie* handle)
{
	return (handle->internal.MODE) == (3);
 8005d00:	6940      	ldr	r0, [r0, #20]
}
 8005d02:	2803      	cmp	r0, #3
 8005d04:	bf14      	ite	ne
 8005d06:	2000      	movne	r0, #0
 8005d08:	2001      	moveq	r0, #1
 8005d0a:	4770      	bx	lr

08005d0c <enact_t_MODE2>:

/* Entry action for state 'MODE2'. */
static void enact_t_MODE2(Nixie* handle)
{
	/* Entry action for state 'MODE2'. */
	handle->internal.MODE = 2;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	6143      	str	r3, [r0, #20]
}
 8005d10:	4770      	bx	lr

08005d12 <enseq_t_START_Configuration_Hour_default>:

/* 'default' enter sequence for state Hour */
static void enseq_t_START_Configuration_Hour_default(Nixie* handle)
{
	/* 'default' enter sequence for state Hour */
	handle->stateConfVector[0] = Nixie_t_START_Configuration_Hour;
 8005d12:	2303      	movs	r3, #3
 8005d14:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	6043      	str	r3, [r0, #4]
}
 8005d1a:	4770      	bx	lr

08005d1c <enseq_t_START_Configuration_Minutes_default>:

/* 'default' enter sequence for state Minutes */
static void enseq_t_START_Configuration_Minutes_default(Nixie* handle)
{
	/* 'default' enter sequence for state Minutes */
	handle->stateConfVector[0] = Nixie_t_START_Configuration_Minutes;
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	6043      	str	r3, [r0, #4]
}
 8005d24:	4770      	bx	lr

08005d26 <enseq_t_START_Configuration_Year_default>:

/* 'default' enter sequence for state Year */
static void enseq_t_START_Configuration_Year_default(Nixie* handle)
{
	/* 'default' enter sequence for state Year */
	handle->stateConfVector[0] = Nixie_t_START_Configuration_Year;
 8005d26:	2305      	movs	r3, #5
 8005d28:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6043      	str	r3, [r0, #4]
}
 8005d2e:	4770      	bx	lr

08005d30 <enseq_t_START_Configuration_Month_default>:

/* 'default' enter sequence for state Month */
static void enseq_t_START_Configuration_Month_default(Nixie* handle)
{
	/* 'default' enter sequence for state Month */
	handle->stateConfVector[0] = Nixie_t_START_Configuration_Month;
 8005d30:	2306      	movs	r3, #6
 8005d32:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	6043      	str	r3, [r0, #4]
}
 8005d38:	4770      	bx	lr

08005d3a <enseq_t_START_Configuration_Day_default>:

/* 'default' enter sequence for state Day */
static void enseq_t_START_Configuration_Day_default(Nixie* handle)
{
	/* 'default' enter sequence for state Day */
	handle->stateConfVector[0] = Nixie_t_START_Configuration_Day;
 8005d3a:	2307      	movs	r3, #7
 8005d3c:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6043      	str	r3, [r0, #4]
}
 8005d42:	4770      	bx	lr

08005d44 <enseq_t_MODE1_Awake_Awake_default>:

/* 'default' enter sequence for state Awake */
static void enseq_t_MODE1_Awake_Awake_default(Nixie* handle)
{
	/* 'default' enter sequence for state Awake */
	handle->stateConfVector[0] = Nixie_t_MODE1_Awake_Awake;
 8005d44:	2309      	movs	r3, #9
 8005d46:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6043      	str	r3, [r0, #4]
}
 8005d4c:	4770      	bx	lr

08005d4e <enseq_t_MODE3_Alarm_AlarmConfig_default>:

/* 'default' enter sequence for state AlarmConfig */
static void enseq_t_MODE3_Alarm_AlarmConfig_default(Nixie* handle)
{
	/* 'default' enter sequence for state AlarmConfig */
	handle->stateConfVector[0] = Nixie_t_MODE3_Alarm_AlarmConfig;
 8005d4e:	2312      	movs	r3, #18
 8005d50:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	6043      	str	r3, [r0, #4]
}
 8005d56:	4770      	bx	lr

08005d58 <enseq_t_MODE3_Alarm_Hour_default>:

/* 'default' enter sequence for state Hour */
static void enseq_t_MODE3_Alarm_Hour_default(Nixie* handle)
{
	/* 'default' enter sequence for state Hour */
	handle->stateConfVector[0] = Nixie_t_MODE3_Alarm_Hour;
 8005d58:	2313      	movs	r3, #19
 8005d5a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6043      	str	r3, [r0, #4]
}
 8005d60:	4770      	bx	lr

08005d62 <enseq_t_MODE3_Alarm_Minute_default>:

/* 'default' enter sequence for state Minute */
static void enseq_t_MODE3_Alarm_Minute_default(Nixie* handle)
{
	/* 'default' enter sequence for state Minute */
	handle->stateConfVector[0] = Nixie_t_MODE3_Alarm_Minute;
 8005d62:	2314      	movs	r3, #20
 8005d64:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	6043      	str	r3, [r0, #4]
}
 8005d6a:	4770      	bx	lr

08005d6c <exseq_t_START_Configuration_Config>:

/* Default exit sequence for state Config */
static void exseq_t_START_Configuration_Config(Nixie* handle)
{
	/* Default exit sequence for state Config */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d70:	6043      	str	r3, [r0, #4]
}
 8005d72:	4770      	bx	lr

08005d74 <exseq_t_START_Configuration_Hour>:

/* Default exit sequence for state Hour */
static void exseq_t_START_Configuration_Hour(Nixie* handle)
{
	/* Default exit sequence for state Hour */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d74:	2300      	movs	r3, #0
 8005d76:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d78:	6043      	str	r3, [r0, #4]
}
 8005d7a:	4770      	bx	lr

08005d7c <exseq_t_START_Configuration_Minutes>:

/* Default exit sequence for state Minutes */
static void exseq_t_START_Configuration_Minutes(Nixie* handle)
{
	/* Default exit sequence for state Minutes */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d80:	6043      	str	r3, [r0, #4]
}
 8005d82:	4770      	bx	lr

08005d84 <exseq_t_START_Configuration_Year>:

/* Default exit sequence for state Year */
static void exseq_t_START_Configuration_Year(Nixie* handle)
{
	/* Default exit sequence for state Year */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d84:	2300      	movs	r3, #0
 8005d86:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d88:	6043      	str	r3, [r0, #4]
}
 8005d8a:	4770      	bx	lr

08005d8c <exseq_t_START_Configuration_Month>:

/* Default exit sequence for state Month */
static void exseq_t_START_Configuration_Month(Nixie* handle)
{
	/* Default exit sequence for state Month */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d90:	6043      	str	r3, [r0, #4]
}
 8005d92:	4770      	bx	lr

08005d94 <exseq_t_START_Configuration_Day>:

/* Default exit sequence for state Day */
static void exseq_t_START_Configuration_Day(Nixie* handle)
{
	/* Default exit sequence for state Day */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d94:	2300      	movs	r3, #0
 8005d96:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005d98:	6043      	str	r3, [r0, #4]
}
 8005d9a:	4770      	bx	lr

08005d9c <exseq_t_MODE1_Awake_Awake>:

/* Default exit sequence for state Awake */
static void exseq_t_MODE1_Awake_Awake(Nixie* handle)
{
	/* Default exit sequence for state Awake */
	handle->stateConfVector[0] = Nixie_last_state;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005da0:	6043      	str	r3, [r0, #4]
}
 8005da2:	4770      	bx	lr

08005da4 <exseq_t_MODE2_Sleep_Sleep>:

/* Default exit sequence for state Sleep */
static void exseq_t_MODE2_Sleep_Sleep(Nixie* handle)
{
	/* Default exit sequence for state Sleep */
	handle->stateConfVector[0] = Nixie_last_state;
 8005da4:	2300      	movs	r3, #0
 8005da6:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005da8:	6043      	str	r3, [r0, #4]
}
 8005daa:	4770      	bx	lr

08005dac <exseq_t_MODE3_Alarm_AlarmConfig>:

/* Default exit sequence for state AlarmConfig */
static void exseq_t_MODE3_Alarm_AlarmConfig(Nixie* handle)
{
	/* Default exit sequence for state AlarmConfig */
	handle->stateConfVector[0] = Nixie_last_state;
 8005dac:	2300      	movs	r3, #0
 8005dae:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005db0:	6043      	str	r3, [r0, #4]
}
 8005db2:	4770      	bx	lr

08005db4 <exseq_t_MODE3_Alarm_Hour>:

/* Default exit sequence for state Hour */
static void exseq_t_MODE3_Alarm_Hour(Nixie* handle)
{
	/* Default exit sequence for state Hour */
	handle->stateConfVector[0] = Nixie_last_state;
 8005db4:	2300      	movs	r3, #0
 8005db6:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005db8:	6043      	str	r3, [r0, #4]
}
 8005dba:	4770      	bx	lr

08005dbc <exseq_t_MODE3_Alarm_Minute>:

/* Default exit sequence for state Minute */
static void exseq_t_MODE3_Alarm_Minute(Nixie* handle)
{
	/* Default exit sequence for state Minute */
	handle->stateConfVector[0] = Nixie_last_state;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8005dc0:	6043      	str	r3, [r0, #4]
}
 8005dc2:	4770      	bx	lr

08005dc4 <exseq_t_START_Configuration>:
	}
}

/* Default exit sequence for region Configuration */
static void exseq_t_START_Configuration(Nixie* handle)
{
 8005dc4:	b508      	push	{r3, lr}
	/* Default exit sequence for region Configuration */
	/* Handle exit of all possible states (of nixie.t.START.Configuration) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 8005dc6:	7803      	ldrb	r3, [r0, #0]
 8005dc8:	3b02      	subs	r3, #2
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d806      	bhi.n	8005ddc <exseq_t_START_Configuration+0x18>
 8005dce:	e8df f003 	tbb	[pc, r3]
 8005dd2:	0603      	.short	0x0603
 8005dd4:	120f0c09 	.word	0x120f0c09
	{
		case Nixie_t_START_Configuration_Config :
		{
			exseq_t_START_Configuration_Config(handle);
 8005dd8:	f7ff ffc8 	bl	8005d6c <exseq_t_START_Configuration_Config>
			exseq_t_START_Configuration_Day(handle);
			break;
		}
		default: break;
	}
}
 8005ddc:	bd08      	pop	{r3, pc}
			exseq_t_START_Configuration_Hour(handle);
 8005dde:	f7ff ffc9 	bl	8005d74 <exseq_t_START_Configuration_Hour>
			break;
 8005de2:	e7fb      	b.n	8005ddc <exseq_t_START_Configuration+0x18>
			exseq_t_START_Configuration_Minutes(handle);
 8005de4:	f7ff ffca 	bl	8005d7c <exseq_t_START_Configuration_Minutes>
			break;
 8005de8:	e7f8      	b.n	8005ddc <exseq_t_START_Configuration+0x18>
			exseq_t_START_Configuration_Year(handle);
 8005dea:	f7ff ffcb 	bl	8005d84 <exseq_t_START_Configuration_Year>
			break;
 8005dee:	e7f5      	b.n	8005ddc <exseq_t_START_Configuration+0x18>
			exseq_t_START_Configuration_Month(handle);
 8005df0:	f7ff ffcc 	bl	8005d8c <exseq_t_START_Configuration_Month>
			break;
 8005df4:	e7f2      	b.n	8005ddc <exseq_t_START_Configuration+0x18>
			exseq_t_START_Configuration_Day(handle);
 8005df6:	f7ff ffcd 	bl	8005d94 <exseq_t_START_Configuration_Day>
}
 8005dfa:	e7ef      	b.n	8005ddc <exseq_t_START_Configuration+0x18>

08005dfc <exseq_t_MODE3_Alarm>:
	}
}

/* Default exit sequence for region Alarm */
static void exseq_t_MODE3_Alarm(Nixie* handle)
{
 8005dfc:	b508      	push	{r3, lr}
	/* Default exit sequence for region Alarm */
	/* Handle exit of all possible states (of nixie.t.MODE3.Alarm) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 8005dfe:	7803      	ldrb	r3, [r0, #0]
 8005e00:	2b13      	cmp	r3, #19
 8005e02:	d007      	beq.n	8005e14 <exseq_t_MODE3_Alarm+0x18>
 8005e04:	2b14      	cmp	r3, #20
 8005e06:	d008      	beq.n	8005e1a <exseq_t_MODE3_Alarm+0x1e>
 8005e08:	2b12      	cmp	r3, #18
 8005e0a:	d000      	beq.n	8005e0e <exseq_t_MODE3_Alarm+0x12>
			exseq_t_MODE3_Alarm_Minute(handle);
			break;
		}
		default: break;
	}
}
 8005e0c:	bd08      	pop	{r3, pc}
			exseq_t_MODE3_Alarm_AlarmConfig(handle);
 8005e0e:	f7ff ffcd 	bl	8005dac <exseq_t_MODE3_Alarm_AlarmConfig>
			break;
 8005e12:	e7fb      	b.n	8005e0c <exseq_t_MODE3_Alarm+0x10>
			exseq_t_MODE3_Alarm_Hour(handle);
 8005e14:	f7ff ffce 	bl	8005db4 <exseq_t_MODE3_Alarm_Hour>
			break;
 8005e18:	e7f8      	b.n	8005e0c <exseq_t_MODE3_Alarm+0x10>
			exseq_t_MODE3_Alarm_Minute(handle);
 8005e1a:	f7ff ffcf 	bl	8005dbc <exseq_t_MODE3_Alarm_Minute>
}
 8005e1e:	e7f5      	b.n	8005e0c <exseq_t_MODE3_Alarm+0x10>

08005e20 <react_t_MODE1_Awake__entry_Default>:
	enseq_t_START_Configuration_Config_default(handle);
}

/* Default react sequence for initial entry  */
static void react_t_MODE1_Awake__entry_Default(Nixie* handle)
{
 8005e20:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_t_MODE1_Awake_Awake_default(handle);
 8005e22:	f7ff ff8f 	bl	8005d44 <enseq_t_MODE1_Awake_Awake_default>
}
 8005e26:	bd08      	pop	{r3, pc}

08005e28 <enseq_t_MODE1_Awake_default>:
{
 8005e28:	b508      	push	{r3, lr}
	react_t_MODE1_Awake__entry_Default(handle);
 8005e2a:	f7ff fff9 	bl	8005e20 <react_t_MODE1_Awake__entry_Default>
}
 8005e2e:	bd08      	pop	{r3, pc}

08005e30 <react_t_MODE3_Alarm__entry_Default>:
	enseq_t_MODE2_Sleep_Sleep_default(handle);
}

/* Default react sequence for initial entry  */
static void react_t_MODE3_Alarm__entry_Default(Nixie* handle)
{
 8005e30:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_t_MODE3_Alarm_AlarmConfig_default(handle);
 8005e32:	f7ff ff8c 	bl	8005d4e <enseq_t_MODE3_Alarm_AlarmConfig_default>
}
 8005e36:	bd08      	pop	{r3, pc}

08005e38 <enseq_t_MODE3_Alarm_default>:
{
 8005e38:	b508      	push	{r3, lr}
	react_t_MODE3_Alarm__entry_Default(handle);
 8005e3a:	f7ff fff9 	bl	8005e30 <react_t_MODE3_Alarm__entry_Default>
}
 8005e3e:	bd08      	pop	{r3, pc}

08005e40 <react>:
}

static sc_boolean react(Nixie* handle) {
	/* State machine reactions. */
	return bool_false;
}
 8005e40:	2000      	movs	r0, #0
 8005e42:	4770      	bx	lr

08005e44 <enact_t_START>:
{
 8005e44:	b508      	push	{r3, lr}
	nixieIface_init(handle);
 8005e46:	f7ff fc81 	bl	800574c <nixieIface_init>
}
 8005e4a:	bd08      	pop	{r3, pc}

08005e4c <enact_t_START_Configuration_Config>:
{
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	4604      	mov	r4, r0
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TIME);
 8005e50:	2100      	movs	r1, #0
 8005e52:	f7ff fc6b 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_TIME);
 8005e56:	2100      	movs	r1, #0
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7ff fc91 	bl	8005780 <nixieIface_showLed>
}
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <enseq_t_START_Configuration_Config_default>:
{
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
	enact_t_START_Configuration_Config(handle);
 8005e64:	f7ff fff2 	bl	8005e4c <enact_t_START_Configuration_Config>
	handle->stateConfVector[0] = Nixie_t_START_Configuration_Config;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6063      	str	r3, [r4, #4]
}
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <react_t_START_Configuration__entry_Default>:
{
 8005e72:	b508      	push	{r3, lr}
	enseq_t_START_Configuration_Config_default(handle);
 8005e74:	f7ff fff4 	bl	8005e60 <enseq_t_START_Configuration_Config_default>
}
 8005e78:	bd08      	pop	{r3, pc}

08005e7a <enseq_t_START_Configuration_default>:
{
 8005e7a:	b508      	push	{r3, lr}
	react_t_START_Configuration__entry_Default(handle);
 8005e7c:	f7ff fff9 	bl	8005e72 <react_t_START_Configuration__entry_Default>
}
 8005e80:	bd08      	pop	{r3, pc}

08005e82 <enseq_t_START_default>:
{
 8005e82:	b510      	push	{r4, lr}
 8005e84:	4604      	mov	r4, r0
	enact_t_START(handle);
 8005e86:	f7ff ffdd 	bl	8005e44 <enact_t_START>
	enseq_t_START_Configuration_default(handle);
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fff5 	bl	8005e7a <enseq_t_START_Configuration_default>
}
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <react_t__entry_Default>:
{
 8005e92:	b508      	push	{r3, lr}
	enseq_t_START_default(handle);
 8005e94:	f7ff fff5 	bl	8005e82 <enseq_t_START_default>
}
 8005e98:	bd08      	pop	{r3, pc}

08005e9a <enseq_t_default>:
{
 8005e9a:	b508      	push	{r3, lr}
	react_t__entry_Default(handle);
 8005e9c:	f7ff fff9 	bl	8005e92 <react_t__entry_Default>
}
 8005ea0:	bd08      	pop	{r3, pc}

08005ea2 <exact_t_START>:
{
 8005ea2:	b508      	push	{r3, lr}
	nixieIface_resetVar(handle);
 8005ea4:	f7ff fcac 	bl	8005800 <nixieIface_resetVar>
}
 8005ea8:	bd08      	pop	{r3, pc}

08005eaa <exseq_t_START>:
{
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	4604      	mov	r4, r0
	exseq_t_START_Configuration(handle);
 8005eae:	f7ff ff89 	bl	8005dc4 <exseq_t_START_Configuration>
	exact_t_START(handle);
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7ff fff5 	bl	8005ea2 <exact_t_START>
}
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <exact_t_MODE3>:
{
 8005eba:	b508      	push	{r3, lr}
	nixieIface_resetVar(handle);
 8005ebc:	f7ff fca0 	bl	8005800 <nixieIface_resetVar>
}
 8005ec0:	bd08      	pop	{r3, pc}

08005ec2 <exseq_t_MODE3>:
{
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	4604      	mov	r4, r0
	exseq_t_MODE3_Alarm(handle);
 8005ec6:	f7ff ff99 	bl	8005dfc <exseq_t_MODE3_Alarm>
	exact_t_MODE3(handle);
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff fff5 	bl	8005eba <exact_t_MODE3>
}
 8005ed0:	bd10      	pop	{r4, pc}

08005ed2 <enact_t_MODE1>:
{
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	4604      	mov	r4, r0
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TIME);
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f7ff fc28 	bl	800572c <nixieIface_show>
	handle->internal.MODE = 1;
 8005edc:	2101      	movs	r1, #1
 8005ede:	6161      	str	r1, [r4, #20]
	nixieIface_nixiePower(handle, NIXIE_NIXIEIFACE_ON);
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff fc61 	bl	80057a8 <nixieIface_nixiePower>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_TIME);
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7ff fc49 	bl	8005780 <nixieIface_showLed>
}
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <enseq_t_MODE1_default>:
{
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	4604      	mov	r4, r0
	enact_t_MODE1(handle);
 8005ef4:	f7ff ffed 	bl	8005ed2 <enact_t_MODE1>
	enseq_t_MODE1_Awake_default(handle);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff ff95 	bl	8005e28 <enseq_t_MODE1_Awake_default>
}
 8005efe:	bd10      	pop	{r4, pc}

08005f00 <t_START_react>:

static sc_boolean t_START_react(Nixie* handle, const sc_boolean try_transition) {
 8005f00:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state START. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8005f02:	460d      	mov	r5, r1
 8005f04:	b131      	cbz	r1, 8005f14 <t_START_react+0x14>
 8005f06:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
 8005f08:	f7ff ff9a 	bl	8005e40 <react>
 8005f0c:	b910      	cbnz	r0, 8005f14 <t_START_react+0x14>
		{ 
			if (handle->iface.B_1_raised == bool_true)
 8005f0e:	7a63      	ldrb	r3, [r4, #9]
 8005f10:	b913      	cbnz	r3, 8005f18 <t_START_react+0x18>
			{ 
				exseq_t_START(handle);
				enseq_t_MODE1_default(handle);
			}  else
			{
				did_transition = bool_false;
 8005f12:	461d      	mov	r5, r3
			}
		} 
	} 
	return did_transition;
}
 8005f14:	4628      	mov	r0, r5
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
				exseq_t_START(handle);
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7ff ffc6 	bl	8005eaa <exseq_t_START>
				enseq_t_MODE1_default(handle);
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7ff ffe6 	bl	8005ef0 <enseq_t_MODE1_default>
 8005f24:	e7f6      	b.n	8005f14 <t_START_react+0x14>

08005f26 <t_START_Configuration_Config_react>:

static sc_boolean t_START_Configuration_Config_react(Nixie* handle, const sc_boolean try_transition) {
 8005f26:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Config. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8005f28:	460d      	mov	r5, r1
 8005f2a:	b909      	cbnz	r1, 8005f30 <t_START_Configuration_Config_react+0xa>
				did_transition = bool_false;
			}
		} 
	} 
	return did_transition;
}
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	4604      	mov	r4, r0
		if ((t_START_react(handle, try_transition)) == (bool_false))
 8005f32:	f7ff ffe5 	bl	8005f00 <t_START_react>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d1f8      	bne.n	8005f2c <t_START_Configuration_Config_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 8005f3a:	7ae3      	ldrb	r3, [r4, #11]
 8005f3c:	b90b      	cbnz	r3, 8005f42 <t_START_Configuration_Config_react+0x1c>
				did_transition = bool_false;
 8005f3e:	461d      	mov	r5, r3
 8005f40:	e7f4      	b.n	8005f2c <t_START_Configuration_Config_react+0x6>
				exseq_t_START_Configuration_Config(handle);
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff ff12 	bl	8005d6c <exseq_t_START_Configuration_Config>
				nixieIface_show(handle, NIXIE_NIXIEIFACE_B_TIME);
 8005f48:	2104      	movs	r1, #4
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7ff fbee 	bl	800572c <nixieIface_show>
				enseq_t_START_Configuration_Hour_default(handle);
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7ff fede 	bl	8005d12 <enseq_t_START_Configuration_Hour_default>
 8005f56:	e7e9      	b.n	8005f2c <t_START_Configuration_Config_react+0x6>

08005f58 <effect_t__choice_0_tr1>:
{
 8005f58:	b508      	push	{r3, lr}
	enseq_t_MODE1_default(handle);
 8005f5a:	f7ff ffc9 	bl	8005ef0 <enseq_t_MODE1_default>
}
 8005f5e:	bd08      	pop	{r3, pc}

08005f60 <enact_t_MODE3>:
{
 8005f60:	b510      	push	{r4, lr}
 8005f62:	4604      	mov	r4, r0
	handle->internal.MODE = 3;
 8005f64:	2303      	movs	r3, #3
 8005f66:	6143      	str	r3, [r0, #20]
	nixieIface_show(handle, NIXIE_NIXIEIFACE_ALARM);
 8005f68:	2102      	movs	r1, #2
 8005f6a:	f7ff fbdf 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_ALARMSTATE);
 8005f6e:	2104      	movs	r1, #4
 8005f70:	4620      	mov	r0, r4
 8005f72:	f7ff fc05 	bl	8005780 <nixieIface_showLed>
	nixieIface_nixiePower(handle, NIXIE_NIXIEIFACE_ON);
 8005f76:	2101      	movs	r1, #1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff fc15 	bl	80057a8 <nixieIface_nixiePower>
}
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <enseq_t_MODE3_default>:
{
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
	enact_t_MODE3(handle);
 8005f84:	f7ff ffec 	bl	8005f60 <enact_t_MODE3>
	enseq_t_MODE3_Alarm_default(handle);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7ff ff55 	bl	8005e38 <enseq_t_MODE3_Alarm_default>
}
 8005f8e:	bd10      	pop	{r4, pc}

08005f90 <effect_t__choice_0_tr2>:
{
 8005f90:	b508      	push	{r3, lr}
	enseq_t_MODE3_default(handle);
 8005f92:	f7ff fff5 	bl	8005f80 <enseq_t_MODE3_default>
}
 8005f96:	bd08      	pop	{r3, pc}

08005f98 <t_START_Configuration_Hour_react>:

static sc_boolean t_START_Configuration_Hour_react(Nixie* handle, const sc_boolean try_transition) {
 8005f98:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Hour. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	b909      	cbnz	r1, 8005fa2 <t_START_Configuration_Hour_react+0xa>
				}
			}
		} 
	} 
	return did_transition;
}
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	4604      	mov	r4, r0
		if ((t_START_react(handle, try_transition)) == (bool_false))
 8005fa4:	f7ff ffac 	bl	8005f00 <t_START_react>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d1f8      	bne.n	8005f9e <t_START_Configuration_Hour_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 8005fac:	7ae3      	ldrb	r3, [r4, #11]
 8005fae:	b91b      	cbnz	r3, 8005fb8 <t_START_Configuration_Hour_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 8005fb0:	7aa3      	ldrb	r3, [r4, #10]
 8005fb2:	b943      	cbnz	r3, 8005fc6 <t_START_Configuration_Hour_react+0x2e>
					did_transition = bool_false;
 8005fb4:	461d      	mov	r5, r3
 8005fb6:	e7f2      	b.n	8005f9e <t_START_Configuration_Hour_react+0x6>
				exseq_t_START_Configuration_Hour(handle);
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff fedb 	bl	8005d74 <exseq_t_START_Configuration_Hour>
				enseq_t_START_Configuration_Minutes_default(handle);
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff feac 	bl	8005d1c <enseq_t_START_Configuration_Minutes_default>
 8005fc4:	e7eb      	b.n	8005f9e <t_START_Configuration_Hour_react+0x6>
					exseq_t_START_Configuration_Hour(handle);
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff fed4 	bl	8005d74 <exseq_t_START_Configuration_Hour>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_TIME, NIXIE_NIXIEIFACE_HOUR);
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2104      	movs	r1, #4
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff fba3 	bl	800571c <nixieIface_increase>
					enseq_t_START_Configuration_Hour_default(handle);
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f7ff fe9b 	bl	8005d12 <enseq_t_START_Configuration_Hour_default>
 8005fdc:	e7df      	b.n	8005f9e <t_START_Configuration_Hour_react+0x6>

08005fde <t_START_Configuration_Year_react>:
		} 
	} 
	return did_transition;
}

static sc_boolean t_START_Configuration_Year_react(Nixie* handle, const sc_boolean try_transition) {
 8005fde:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Year. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	b909      	cbnz	r1, 8005fe8 <t_START_Configuration_Year_react+0xa>
				}
			}
		} 
	} 
	return did_transition;
}
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	4604      	mov	r4, r0
		if ((t_START_react(handle, try_transition)) == (bool_false))
 8005fea:	f7ff ff89 	bl	8005f00 <t_START_react>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1f8      	bne.n	8005fe4 <t_START_Configuration_Year_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 8005ff2:	7ae3      	ldrb	r3, [r4, #11]
 8005ff4:	b91b      	cbnz	r3, 8005ffe <t_START_Configuration_Year_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 8005ff6:	7aa3      	ldrb	r3, [r4, #10]
 8005ff8:	b943      	cbnz	r3, 800600c <t_START_Configuration_Year_react+0x2e>
					did_transition = bool_false;
 8005ffa:	461d      	mov	r5, r3
 8005ffc:	e7f2      	b.n	8005fe4 <t_START_Configuration_Year_react+0x6>
				exseq_t_START_Configuration_Year(handle);
 8005ffe:	4620      	mov	r0, r4
 8006000:	f7ff fec0 	bl	8005d84 <exseq_t_START_Configuration_Year>
				enseq_t_START_Configuration_Month_default(handle);
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff fe93 	bl	8005d30 <enseq_t_START_Configuration_Month_default>
 800600a:	e7eb      	b.n	8005fe4 <t_START_Configuration_Year_react+0x6>
					exseq_t_START_Configuration_Year(handle);
 800600c:	4620      	mov	r0, r4
 800600e:	f7ff feb9 	bl	8005d84 <exseq_t_START_Configuration_Year>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_DATE, NIXIE_NIXIEIFACE_DAY);
 8006012:	2202      	movs	r2, #2
 8006014:	2105      	movs	r1, #5
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff fb80 	bl	800571c <nixieIface_increase>
					enseq_t_START_Configuration_Year_default(handle);
 800601c:	4620      	mov	r0, r4
 800601e:	f7ff fe82 	bl	8005d26 <enseq_t_START_Configuration_Year_default>
 8006022:	e7df      	b.n	8005fe4 <t_START_Configuration_Year_react+0x6>

08006024 <t_START_Configuration_Month_react>:

static sc_boolean t_START_Configuration_Month_react(Nixie* handle, const sc_boolean try_transition) {
 8006024:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Month. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8006026:	460d      	mov	r5, r1
 8006028:	b909      	cbnz	r1, 800602e <t_START_Configuration_Month_react+0xa>
				}
			}
		} 
	} 
	return did_transition;
}
 800602a:	4628      	mov	r0, r5
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	4604      	mov	r4, r0
		if ((t_START_react(handle, try_transition)) == (bool_false))
 8006030:	f7ff ff66 	bl	8005f00 <t_START_react>
 8006034:	2800      	cmp	r0, #0
 8006036:	d1f8      	bne.n	800602a <t_START_Configuration_Month_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 8006038:	7ae3      	ldrb	r3, [r4, #11]
 800603a:	b91b      	cbnz	r3, 8006044 <t_START_Configuration_Month_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 800603c:	7aa3      	ldrb	r3, [r4, #10]
 800603e:	b943      	cbnz	r3, 8006052 <t_START_Configuration_Month_react+0x2e>
					did_transition = bool_false;
 8006040:	461d      	mov	r5, r3
 8006042:	e7f2      	b.n	800602a <t_START_Configuration_Month_react+0x6>
				exseq_t_START_Configuration_Month(handle);
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff fea1 	bl	8005d8c <exseq_t_START_Configuration_Month>
				enseq_t_START_Configuration_Day_default(handle);
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff fe75 	bl	8005d3a <enseq_t_START_Configuration_Day_default>
 8006050:	e7eb      	b.n	800602a <t_START_Configuration_Month_react+0x6>
					exseq_t_START_Configuration_Month(handle);
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff fe9a 	bl	8005d8c <exseq_t_START_Configuration_Month>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_DATE, NIXIE_NIXIEIFACE_MONTH);
 8006058:	2201      	movs	r2, #1
 800605a:	2105      	movs	r1, #5
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fb5d 	bl	800571c <nixieIface_increase>
					enseq_t_START_Configuration_Month_default(handle);
 8006062:	4620      	mov	r0, r4
 8006064:	f7ff fe64 	bl	8005d30 <enseq_t_START_Configuration_Month_default>
 8006068:	e7df      	b.n	800602a <t_START_Configuration_Month_react+0x6>

0800606a <t_START_Configuration_Minutes_react>:
static sc_boolean t_START_Configuration_Minutes_react(Nixie* handle, const sc_boolean try_transition) {
 800606a:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 800606c:	460d      	mov	r5, r1
 800606e:	b909      	cbnz	r1, 8006074 <t_START_Configuration_Minutes_react+0xa>
}
 8006070:	4628      	mov	r0, r5
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	4604      	mov	r4, r0
		if ((t_START_react(handle, try_transition)) == (bool_false))
 8006076:	f7ff ff43 	bl	8005f00 <t_START_react>
 800607a:	2800      	cmp	r0, #0
 800607c:	d1f8      	bne.n	8006070 <t_START_Configuration_Minutes_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 800607e:	7ae3      	ldrb	r3, [r4, #11]
 8006080:	b91b      	cbnz	r3, 800608a <t_START_Configuration_Minutes_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 8006082:	7aa3      	ldrb	r3, [r4, #10]
 8006084:	b9a3      	cbnz	r3, 80060b0 <t_START_Configuration_Minutes_react+0x46>
					did_transition = bool_false;
 8006086:	461d      	mov	r5, r3
 8006088:	e7f2      	b.n	8006070 <t_START_Configuration_Minutes_react+0x6>
				exseq_t_START_Configuration_Minutes(handle);
 800608a:	4620      	mov	r0, r4
 800608c:	f7ff fe76 	bl	8005d7c <exseq_t_START_Configuration_Minutes>
				nixieIface_send(handle, NIXIE_NIXIEIFACE_TIME);
 8006090:	2100      	movs	r1, #0
 8006092:	4620      	mov	r0, r4
 8006094:	f7ff fb80 	bl	8005798 <nixieIface_send>
				nixieIface_show(handle, NIXIE_NIXIEIFACE_B_DATE);
 8006098:	2105      	movs	r1, #5
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff fb46 	bl	800572c <nixieIface_show>
				nixieIface_showLed(handle, NIXIE_NIXIEIFACE_B_DATE);
 80060a0:	2105      	movs	r1, #5
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff fb6c 	bl	8005780 <nixieIface_showLed>
				enseq_t_START_Configuration_Year_default(handle);
 80060a8:	4620      	mov	r0, r4
 80060aa:	f7ff fe3c 	bl	8005d26 <enseq_t_START_Configuration_Year_default>
 80060ae:	e7df      	b.n	8006070 <t_START_Configuration_Minutes_react+0x6>
					exseq_t_START_Configuration_Minutes(handle);
 80060b0:	4620      	mov	r0, r4
 80060b2:	f7ff fe63 	bl	8005d7c <exseq_t_START_Configuration_Minutes>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_TIME, NIXIE_NIXIEIFACE_MINUTE);
 80060b6:	2201      	movs	r2, #1
 80060b8:	2104      	movs	r1, #4
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff fb2e 	bl	800571c <nixieIface_increase>
					enseq_t_START_Configuration_Minutes_default(handle);
 80060c0:	4620      	mov	r0, r4
 80060c2:	f7ff fe2b 	bl	8005d1c <enseq_t_START_Configuration_Minutes_default>
 80060c6:	e7d3      	b.n	8006070 <t_START_Configuration_Minutes_react+0x6>

080060c8 <t_START_Configuration_Day_react>:

static sc_boolean t_START_Configuration_Day_react(Nixie* handle, const sc_boolean try_transition) {
 80060c8:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Day. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 80060ca:	460d      	mov	r5, r1
 80060cc:	b909      	cbnz	r1, 80060d2 <t_START_Configuration_Day_react+0xa>
				}
			}
		} 
	} 
	return did_transition;
}
 80060ce:	4628      	mov	r0, r5
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	4604      	mov	r4, r0
		if ((t_START_react(handle, try_transition)) == (bool_false))
 80060d4:	f7ff ff14 	bl	8005f00 <t_START_react>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d1f8      	bne.n	80060ce <t_START_Configuration_Day_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 80060dc:	7ae3      	ldrb	r3, [r4, #11]
 80060de:	b91b      	cbnz	r3, 80060e8 <t_START_Configuration_Day_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 80060e0:	7aa3      	ldrb	r3, [r4, #10]
 80060e2:	b963      	cbnz	r3, 80060fe <t_START_Configuration_Day_react+0x36>
					did_transition = bool_false;
 80060e4:	461d      	mov	r5, r3
 80060e6:	e7f2      	b.n	80060ce <t_START_Configuration_Day_react+0x6>
				exseq_t_START_Configuration_Day(handle);
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff fe53 	bl	8005d94 <exseq_t_START_Configuration_Day>
				nixieIface_send(handle, NIXIE_NIXIEIFACE_DATE);
 80060ee:	2101      	movs	r1, #1
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff fb51 	bl	8005798 <nixieIface_send>
				enseq_t_START_Configuration_Config_default(handle);
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff feb2 	bl	8005e60 <enseq_t_START_Configuration_Config_default>
 80060fc:	e7e7      	b.n	80060ce <t_START_Configuration_Day_react+0x6>
					exseq_t_START_Configuration_Day(handle);
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fe48 	bl	8005d94 <exseq_t_START_Configuration_Day>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_DATE, NIXIE_NIXIEIFACE_YEAR);
 8006104:	2200      	movs	r2, #0
 8006106:	2105      	movs	r1, #5
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff fb07 	bl	800571c <nixieIface_increase>
					enseq_t_START_Configuration_Day_default(handle);
 800610e:	4620      	mov	r0, r4
 8006110:	f7ff fe13 	bl	8005d3a <enseq_t_START_Configuration_Day_default>
 8006114:	e7db      	b.n	80060ce <t_START_Configuration_Day_react+0x6>

08006116 <enact_t_Alarm>:
{
 8006116:	b510      	push	{r4, lr}
 8006118:	4604      	mov	r4, r0
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TIME);
 800611a:	2100      	movs	r1, #0
 800611c:	f7ff fb06 	bl	800572c <nixieIface_show>
	nixieIface_alarmFlag(handle);
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff fb65 	bl	80057f0 <nixieIface_alarmFlag>
	nixieIface_nixiePower(handle, NIXIE_NIXIEIFACE_ON);
 8006126:	2101      	movs	r1, #1
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff fb3d 	bl	80057a8 <nixieIface_nixiePower>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_ALARM);
 800612e:	2102      	movs	r1, #2
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff fb25 	bl	8005780 <nixieIface_showLed>
}
 8006136:	bd10      	pop	{r4, pc}

08006138 <enact_t_MODE1_Awake_Date>:
{
 8006138:	b510      	push	{r4, lr}
 800613a:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE1_Awake_Date_tev0_raised) , (10 * 1000), bool_false);
 800613c:	2300      	movs	r3, #0
 800613e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006142:	f100 0118 	add.w	r1, r0, #24
 8006146:	f7ff fbc1 	bl	80058cc <nixie_setTimer>
	nixieIface_show(handle, NIXIE_NIXIEIFACE_DATE);
 800614a:	2101      	movs	r1, #1
 800614c:	4620      	mov	r0, r4
 800614e:	f7ff faed 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_DATE);
 8006152:	2101      	movs	r1, #1
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff fb13 	bl	8005780 <nixieIface_showLed>
}
 800615a:	bd10      	pop	{r4, pc}

0800615c <enseq_t_MODE1_Awake_Date_default>:
{
 800615c:	b510      	push	{r4, lr}
 800615e:	4604      	mov	r4, r0
	enact_t_MODE1_Awake_Date(handle);
 8006160:	f7ff ffea 	bl	8006138 <enact_t_MODE1_Awake_Date>
	handle->stateConfVector[0] = Nixie_t_MODE1_Awake_Date;
 8006164:	230a      	movs	r3, #10
 8006166:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	6063      	str	r3, [r4, #4]
}
 800616c:	bd10      	pop	{r4, pc}

0800616e <enact_t_MODE1_Awake_Temperature>:
{
 800616e:	b510      	push	{r4, lr}
 8006170:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE1_Awake_Temperature_tev0_raised) , (10 * 1000), bool_false);
 8006172:	2300      	movs	r3, #0
 8006174:	f242 7210 	movw	r2, #10000	; 0x2710
 8006178:	f100 0119 	add.w	r1, r0, #25
 800617c:	f7ff fba6 	bl	80058cc <nixie_setTimer>
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TEMP);
 8006180:	2103      	movs	r1, #3
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff fad2 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_TEMP);
 8006188:	2103      	movs	r1, #3
 800618a:	4620      	mov	r0, r4
 800618c:	f7ff faf8 	bl	8005780 <nixieIface_showLed>
}
 8006190:	bd10      	pop	{r4, pc}

08006192 <enseq_t_MODE1_Awake_Temperature_default>:
{
 8006192:	b510      	push	{r4, lr}
 8006194:	4604      	mov	r4, r0
	enact_t_MODE1_Awake_Temperature(handle);
 8006196:	f7ff ffea 	bl	800616e <enact_t_MODE1_Awake_Temperature>
	handle->stateConfVector[0] = Nixie_t_MODE1_Awake_Temperature;
 800619a:	230b      	movs	r3, #11
 800619c:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	6063      	str	r3, [r4, #4]
}
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <enact_t_MODE2_Sleep_Date>:
{
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE2_Sleep_Date_tev0_raised) , (10 * 1000), bool_false);
 80061a8:	2300      	movs	r3, #0
 80061aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80061ae:	f100 011b 	add.w	r1, r0, #27
 80061b2:	f7ff fb8b 	bl	80058cc <nixie_setTimer>
	nixieIface_show(handle, NIXIE_NIXIEIFACE_DATE);
 80061b6:	2101      	movs	r1, #1
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7ff fab7 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_DATE);
 80061be:	2101      	movs	r1, #1
 80061c0:	4620      	mov	r0, r4
 80061c2:	f7ff fadd 	bl	8005780 <nixieIface_showLed>
}
 80061c6:	bd10      	pop	{r4, pc}

080061c8 <enseq_t_MODE2_Sleep_Date_default>:
{
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4604      	mov	r4, r0
	enact_t_MODE2_Sleep_Date(handle);
 80061cc:	f7ff ffea 	bl	80061a4 <enact_t_MODE2_Sleep_Date>
	handle->stateConfVector[0] = Nixie_t_MODE2_Sleep_Date;
 80061d0:	230f      	movs	r3, #15
 80061d2:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	6063      	str	r3, [r4, #4]
}
 80061d8:	bd10      	pop	{r4, pc}

080061da <enact_t_MODE2_Sleep_Temperature>:
{
 80061da:	b510      	push	{r4, lr}
 80061dc:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE2_Sleep_Temperature_tev0_raised) , (10 * 1000), bool_false);
 80061de:	2300      	movs	r3, #0
 80061e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80061e4:	f100 011c 	add.w	r1, r0, #28
 80061e8:	f7ff fb70 	bl	80058cc <nixie_setTimer>
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TEMP);
 80061ec:	2103      	movs	r1, #3
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff fa9c 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_TEMP);
 80061f4:	2103      	movs	r1, #3
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff fac2 	bl	8005780 <nixieIface_showLed>
}
 80061fc:	bd10      	pop	{r4, pc}

080061fe <enseq_t_MODE2_Sleep_Temperature_default>:
{
 80061fe:	b510      	push	{r4, lr}
 8006200:	4604      	mov	r4, r0
	enact_t_MODE2_Sleep_Temperature(handle);
 8006202:	f7ff ffea 	bl	80061da <enact_t_MODE2_Sleep_Temperature>
	handle->stateConfVector[0] = Nixie_t_MODE2_Sleep_Temperature;
 8006206:	2310      	movs	r3, #16
 8006208:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	6063      	str	r3, [r4, #4]
}
 800620e:	bd10      	pop	{r4, pc}

08006210 <enact_t_Alarm_Alarm_Alarm_ON_>:
{
 8006210:	b510      	push	{r4, lr}
 8006212:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_ON__tev0_raised) , (300 * 1000), bool_false);
 8006214:	2300      	movs	r3, #0
 8006216:	4a05      	ldr	r2, [pc, #20]	; (800622c <enact_t_Alarm_Alarm_Alarm_ON_+0x1c>)
 8006218:	f100 011d 	add.w	r1, r0, #29
 800621c:	f7ff fb56 	bl	80058cc <nixie_setTimer>
	nixieIface_buzzer(handle, NIXIE_NIXIEIFACE_ON);
 8006220:	2101      	movs	r1, #1
 8006222:	4620      	mov	r0, r4
 8006224:	f7ff fac6 	bl	80057b4 <nixieIface_buzzer>
}
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	000493e0 	.word	0x000493e0

08006230 <enseq_t_Alarm_Alarm_Alarm_ON__default>:
{
 8006230:	b510      	push	{r4, lr}
 8006232:	4604      	mov	r4, r0
	enact_t_Alarm_Alarm_Alarm_ON_(handle);
 8006234:	f7ff ffec 	bl	8006210 <enact_t_Alarm_Alarm_Alarm_ON_>
	handle->stateConfVector[0] = Nixie_t_Alarm_Alarm_Alarm_ON_;
 8006238:	2316      	movs	r3, #22
 800623a:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	6063      	str	r3, [r4, #4]
}
 8006240:	bd10      	pop	{r4, pc}

08006242 <react_t_Alarm_Alarm__entry_Default>:
{
 8006242:	b508      	push	{r3, lr}
	enseq_t_Alarm_Alarm_Alarm_ON__default(handle);
 8006244:	f7ff fff4 	bl	8006230 <enseq_t_Alarm_Alarm_Alarm_ON__default>
}
 8006248:	bd08      	pop	{r3, pc}

0800624a <enseq_t_Alarm_Alarm_default>:
{
 800624a:	b508      	push	{r3, lr}
	react_t_Alarm_Alarm__entry_Default(handle);
 800624c:	f7ff fff9 	bl	8006242 <react_t_Alarm_Alarm__entry_Default>
}
 8006250:	bd08      	pop	{r3, pc}

08006252 <enseq_t_Alarm_default>:
{
 8006252:	b510      	push	{r4, lr}
 8006254:	4604      	mov	r4, r0
	enact_t_Alarm(handle);
 8006256:	f7ff ff5e 	bl	8006116 <enact_t_Alarm>
	enseq_t_Alarm_Alarm_default(handle);
 800625a:	4620      	mov	r0, r4
 800625c:	f7ff fff5 	bl	800624a <enseq_t_Alarm_Alarm_default>
}
 8006260:	bd10      	pop	{r4, pc}

08006262 <t_MODE3_react>:
		} 
	} 
	return did_transition;
}

static sc_boolean t_MODE3_react(Nixie* handle, const sc_boolean try_transition) {
 8006262:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state MODE3. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8006264:	460d      	mov	r5, r1
 8006266:	b141      	cbz	r1, 800627a <t_MODE3_react+0x18>
 8006268:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
 800626a:	f7ff fde9 	bl	8005e40 <react>
 800626e:	b920      	cbnz	r0, 800627a <t_MODE3_react+0x18>
		{ 
			if (handle->iface.E_ALARM_raised == bool_true)
 8006270:	7b23      	ldrb	r3, [r4, #12]
 8006272:	b923      	cbnz	r3, 800627e <t_MODE3_react+0x1c>
			{ 
				exseq_t_MODE3(handle);
				enseq_t_Alarm_default(handle);
			}  else
			{
				if (handle->iface.B_1_raised == bool_true)
 8006274:	7a63      	ldrb	r3, [r4, #9]
 8006276:	b94b      	cbnz	r3, 800628c <t_MODE3_react+0x2a>
				{ 
					exseq_t_MODE3(handle);
					enseq_t_MODE1_default(handle);
				}  else
				{
					did_transition = bool_false;
 8006278:	461d      	mov	r5, r3
				}
			}
		} 
	} 
	return did_transition;
}
 800627a:	4628      	mov	r0, r5
 800627c:	bd38      	pop	{r3, r4, r5, pc}
				exseq_t_MODE3(handle);
 800627e:	4620      	mov	r0, r4
 8006280:	f7ff fe1f 	bl	8005ec2 <exseq_t_MODE3>
				enseq_t_Alarm_default(handle);
 8006284:	4620      	mov	r0, r4
 8006286:	f7ff ffe4 	bl	8006252 <enseq_t_Alarm_default>
 800628a:	e7f6      	b.n	800627a <t_MODE3_react+0x18>
					exseq_t_MODE3(handle);
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff fe18 	bl	8005ec2 <exseq_t_MODE3>
					enseq_t_MODE1_default(handle);
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff fe2c 	bl	8005ef0 <enseq_t_MODE1_default>
 8006298:	e7ef      	b.n	800627a <t_MODE3_react+0x18>

0800629a <t_MODE3_Alarm_Hour_react>:
		} 
	} 
	return did_transition;
}

static sc_boolean t_MODE3_Alarm_Hour_react(Nixie* handle, const sc_boolean try_transition) {
 800629a:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Hour. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 800629c:	460d      	mov	r5, r1
 800629e:	b909      	cbnz	r1, 80062a4 <t_MODE3_Alarm_Hour_react+0xa>
				}
			}
		} 
	} 
	return did_transition;
}
 80062a0:	4628      	mov	r0, r5
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	4604      	mov	r4, r0
		if ((t_MODE3_react(handle, try_transition)) == (bool_false))
 80062a6:	f7ff ffdc 	bl	8006262 <t_MODE3_react>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d1f8      	bne.n	80062a0 <t_MODE3_Alarm_Hour_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 80062ae:	7ae3      	ldrb	r3, [r4, #11]
 80062b0:	b91b      	cbnz	r3, 80062ba <t_MODE3_Alarm_Hour_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 80062b2:	7aa3      	ldrb	r3, [r4, #10]
 80062b4:	b943      	cbnz	r3, 80062c8 <t_MODE3_Alarm_Hour_react+0x2e>
					did_transition = bool_false;
 80062b6:	461d      	mov	r5, r3
 80062b8:	e7f2      	b.n	80062a0 <t_MODE3_Alarm_Hour_react+0x6>
				exseq_t_MODE3_Alarm_Hour(handle);
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff fd7a 	bl	8005db4 <exseq_t_MODE3_Alarm_Hour>
				enseq_t_MODE3_Alarm_Minute_default(handle);
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff fd4e 	bl	8005d62 <enseq_t_MODE3_Alarm_Minute_default>
 80062c6:	e7eb      	b.n	80062a0 <t_MODE3_Alarm_Hour_react+0x6>
					exseq_t_MODE3_Alarm_Hour(handle);
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff fd73 	bl	8005db4 <exseq_t_MODE3_Alarm_Hour>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_ALARM, NIXIE_NIXIEIFACE_HOUR);
 80062ce:	2200      	movs	r2, #0
 80062d0:	2106      	movs	r1, #6
 80062d2:	4620      	mov	r0, r4
 80062d4:	f7ff fa22 	bl	800571c <nixieIface_increase>
					enseq_t_MODE3_Alarm_Hour_default(handle);
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff fd3d 	bl	8005d58 <enseq_t_MODE3_Alarm_Hour_default>
 80062de:	e7df      	b.n	80062a0 <t_MODE3_Alarm_Hour_react+0x6>

080062e0 <t_MODE3_Alarm_Minute_react>:

static sc_boolean t_MODE3_Alarm_Minute_react(Nixie* handle, const sc_boolean try_transition) {
 80062e0:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Minute. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 80062e2:	460d      	mov	r5, r1
 80062e4:	b909      	cbnz	r1, 80062ea <t_MODE3_Alarm_Minute_react+0xa>
				}
			}
		} 
	} 
	return did_transition;
}
 80062e6:	4628      	mov	r0, r5
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	4604      	mov	r4, r0
		if ((t_MODE3_react(handle, try_transition)) == (bool_false))
 80062ec:	f7ff ffb9 	bl	8006262 <t_MODE3_react>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1f8      	bne.n	80062e6 <t_MODE3_Alarm_Minute_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 80062f4:	7ae3      	ldrb	r3, [r4, #11]
 80062f6:	b91b      	cbnz	r3, 8006300 <t_MODE3_Alarm_Minute_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 80062f8:	7aa3      	ldrb	r3, [r4, #10]
 80062fa:	b983      	cbnz	r3, 800631e <t_MODE3_Alarm_Minute_react+0x3e>
					did_transition = bool_false;
 80062fc:	461d      	mov	r5, r3
 80062fe:	e7f2      	b.n	80062e6 <t_MODE3_Alarm_Minute_react+0x6>
				exseq_t_MODE3_Alarm_Minute(handle);
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff fd5b 	bl	8005dbc <exseq_t_MODE3_Alarm_Minute>
				nixieIface_send(handle, NIXIE_NIXIEIFACE_ALARM);
 8006306:	2102      	movs	r1, #2
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff fa45 	bl	8005798 <nixieIface_send>
				nixieIface_show(handle, NIXIE_NIXIEIFACE_ALARM);
 800630e:	2102      	movs	r1, #2
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff fa0b 	bl	800572c <nixieIface_show>
				enseq_t_MODE3_Alarm_AlarmConfig_default(handle);
 8006316:	4620      	mov	r0, r4
 8006318:	f7ff fd19 	bl	8005d4e <enseq_t_MODE3_Alarm_AlarmConfig_default>
 800631c:	e7e3      	b.n	80062e6 <t_MODE3_Alarm_Minute_react+0x6>
					exseq_t_MODE3_Alarm_Minute(handle);
 800631e:	4620      	mov	r0, r4
 8006320:	f7ff fd4c 	bl	8005dbc <exseq_t_MODE3_Alarm_Minute>
					nixieIface_increase(handle, NIXIE_NIXIEIFACE_B_ALARM, NIXIE_NIXIEIFACE_MINUTE);
 8006324:	2201      	movs	r2, #1
 8006326:	2106      	movs	r1, #6
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff f9f7 	bl	800571c <nixieIface_increase>
					enseq_t_MODE3_Alarm_Minute_default(handle);
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff fd17 	bl	8005d62 <enseq_t_MODE3_Alarm_Minute_default>
 8006334:	e7d7      	b.n	80062e6 <t_MODE3_Alarm_Minute_react+0x6>

08006336 <exact_t_Alarm>:
{
 8006336:	b508      	push	{r3, lr}
	handle->internal.count = 0;
 8006338:	2100      	movs	r1, #0
 800633a:	6101      	str	r1, [r0, #16]
	nixieIface_buzzer(handle, NIXIE_NIXIEIFACE_OFF);
 800633c:	f7ff fa3a 	bl	80057b4 <nixieIface_buzzer>
}
 8006340:	bd08      	pop	{r3, pc}
	...

08006344 <enact_t_Alarm_Alarm_Alarm_OFF_>:
{
 8006344:	b510      	push	{r4, lr}
 8006346:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_OFF__tev0_raised) , (600 * 1000), bool_false);
 8006348:	2300      	movs	r3, #0
 800634a:	4a06      	ldr	r2, [pc, #24]	; (8006364 <enact_t_Alarm_Alarm_Alarm_OFF_+0x20>)
 800634c:	f100 011e 	add.w	r1, r0, #30
 8006350:	f7ff fabc 	bl	80058cc <nixie_setTimer>
	nixieIface_buzzer(handle, NIXIE_NIXIEIFACE_OFF);
 8006354:	2100      	movs	r1, #0
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff fa2c 	bl	80057b4 <nixieIface_buzzer>
	handle->internal.count++;
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	3301      	adds	r3, #1
 8006360:	6123      	str	r3, [r4, #16]
}
 8006362:	bd10      	pop	{r4, pc}
 8006364:	000927c0 	.word	0x000927c0

08006368 <enseq_t_Alarm_Alarm_Alarm_OFF__default>:
{
 8006368:	b510      	push	{r4, lr}
 800636a:	4604      	mov	r4, r0
	enact_t_Alarm_Alarm_Alarm_OFF_(handle);
 800636c:	f7ff ffea 	bl	8006344 <enact_t_Alarm_Alarm_Alarm_OFF_>
	handle->stateConfVector[0] = Nixie_t_Alarm_Alarm_Alarm_OFF_;
 8006370:	2317      	movs	r3, #23
 8006372:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	6063      	str	r3, [r4, #4]
}
 8006378:	bd10      	pop	{r4, pc}

0800637a <exact_t_MODE1_Awake_Date>:
{
 800637a:	b508      	push	{r3, lr}
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE1_Awake_Date_tev0_raised) );		
 800637c:	f100 0118 	add.w	r1, r0, #24
 8006380:	f7ff fb02 	bl	8005988 <nixie_unsetTimer>
}
 8006384:	bd08      	pop	{r3, pc}

08006386 <exseq_t_MODE1_Awake_Date>:
{
 8006386:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 8006388:	2200      	movs	r2, #0
 800638a:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 800638c:	6042      	str	r2, [r0, #4]
	exact_t_MODE1_Awake_Date(handle);
 800638e:	f7ff fff4 	bl	800637a <exact_t_MODE1_Awake_Date>
}
 8006392:	bd08      	pop	{r3, pc}

08006394 <exact_t_MODE1_Awake_Temperature>:
{
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE1_Awake_Temperature_tev0_raised) );		
 8006398:	f100 0119 	add.w	r1, r0, #25
 800639c:	f7ff faf4 	bl	8005988 <nixie_unsetTimer>
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TIME);
 80063a0:	2100      	movs	r1, #0
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff f9c2 	bl	800572c <nixieIface_show>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_TIME);
 80063a8:	2100      	movs	r1, #0
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff f9e8 	bl	8005780 <nixieIface_showLed>
}
 80063b0:	bd10      	pop	{r4, pc}

080063b2 <exseq_t_MODE1_Awake_Temperature>:
{
 80063b2:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 80063b4:	2200      	movs	r2, #0
 80063b6:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 80063b8:	6042      	str	r2, [r0, #4]
	exact_t_MODE1_Awake_Temperature(handle);
 80063ba:	f7ff ffeb 	bl	8006394 <exact_t_MODE1_Awake_Temperature>
}
 80063be:	bd08      	pop	{r3, pc}

080063c0 <exseq_t_MODE1_Awake>:
{
 80063c0:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 0 ])
 80063c2:	7803      	ldrb	r3, [r0, #0]
 80063c4:	2b0a      	cmp	r3, #10
 80063c6:	d007      	beq.n	80063d8 <exseq_t_MODE1_Awake+0x18>
 80063c8:	2b0b      	cmp	r3, #11
 80063ca:	d008      	beq.n	80063de <exseq_t_MODE1_Awake+0x1e>
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	d000      	beq.n	80063d2 <exseq_t_MODE1_Awake+0x12>
}
 80063d0:	bd08      	pop	{r3, pc}
			exseq_t_MODE1_Awake_Awake(handle);
 80063d2:	f7ff fce3 	bl	8005d9c <exseq_t_MODE1_Awake_Awake>
			break;
 80063d6:	e7fb      	b.n	80063d0 <exseq_t_MODE1_Awake+0x10>
			exseq_t_MODE1_Awake_Date(handle);
 80063d8:	f7ff ffd5 	bl	8006386 <exseq_t_MODE1_Awake_Date>
			break;
 80063dc:	e7f8      	b.n	80063d0 <exseq_t_MODE1_Awake+0x10>
			exseq_t_MODE1_Awake_Temperature(handle);
 80063de:	f7ff ffe8 	bl	80063b2 <exseq_t_MODE1_Awake_Temperature>
}
 80063e2:	e7f5      	b.n	80063d0 <exseq_t_MODE1_Awake+0x10>

080063e4 <exseq_t_MODE1>:
{
 80063e4:	b508      	push	{r3, lr}
	exseq_t_MODE1_Awake(handle);
 80063e6:	f7ff ffeb 	bl	80063c0 <exseq_t_MODE1_Awake>
}
 80063ea:	bd08      	pop	{r3, pc}

080063ec <exact_t_MODE2_Sleep_Date>:
{
 80063ec:	b508      	push	{r3, lr}
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE2_Sleep_Date_tev0_raised) );		
 80063ee:	f100 011b 	add.w	r1, r0, #27
 80063f2:	f7ff fac9 	bl	8005988 <nixie_unsetTimer>
}
 80063f6:	bd08      	pop	{r3, pc}

080063f8 <exseq_t_MODE2_Sleep_Date>:
{
 80063f8:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 80063fa:	2200      	movs	r2, #0
 80063fc:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 80063fe:	6042      	str	r2, [r0, #4]
	exact_t_MODE2_Sleep_Date(handle);
 8006400:	f7ff fff4 	bl	80063ec <exact_t_MODE2_Sleep_Date>
}
 8006404:	bd08      	pop	{r3, pc}

08006406 <exact_t_MODE2_Sleep_Temperature>:
{
 8006406:	b508      	push	{r3, lr}
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE2_Sleep_Temperature_tev0_raised) );		
 8006408:	f100 011c 	add.w	r1, r0, #28
 800640c:	f7ff fabc 	bl	8005988 <nixie_unsetTimer>
}
 8006410:	bd08      	pop	{r3, pc}

08006412 <exseq_t_MODE2_Sleep_Temperature>:
{
 8006412:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 8006414:	2200      	movs	r2, #0
 8006416:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8006418:	6042      	str	r2, [r0, #4]
	exact_t_MODE2_Sleep_Temperature(handle);
 800641a:	f7ff fff4 	bl	8006406 <exact_t_MODE2_Sleep_Temperature>
}
 800641e:	bd08      	pop	{r3, pc}

08006420 <exact_t_MODE2_Sleep_Wake_Up>:
{
 8006420:	b508      	push	{r3, lr}
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE2_Sleep_Wake_Up_tev0_raised) );		
 8006422:	f100 011a 	add.w	r1, r0, #26
 8006426:	f7ff faaf 	bl	8005988 <nixie_unsetTimer>
}
 800642a:	bd08      	pop	{r3, pc}

0800642c <exseq_t_MODE2_Sleep_Wake_Up>:
{
 800642c:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 800642e:	2200      	movs	r2, #0
 8006430:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8006432:	6042      	str	r2, [r0, #4]
	exact_t_MODE2_Sleep_Wake_Up(handle);
 8006434:	f7ff fff4 	bl	8006420 <exact_t_MODE2_Sleep_Wake_Up>
}
 8006438:	bd08      	pop	{r3, pc}

0800643a <exseq_t_MODE2_Sleep>:
{
 800643a:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 0 ])
 800643c:	7803      	ldrb	r3, [r0, #0]
 800643e:	3b0d      	subs	r3, #13
 8006440:	2b03      	cmp	r3, #3
 8006442:	d805      	bhi.n	8006450 <exseq_t_MODE2_Sleep+0x16>
 8006444:	e8df f003 	tbb	[pc, r3]
 8006448:	0b080502 	.word	0x0b080502
			exseq_t_MODE2_Sleep_Wake_Up(handle);
 800644c:	f7ff ffee 	bl	800642c <exseq_t_MODE2_Sleep_Wake_Up>
}
 8006450:	bd08      	pop	{r3, pc}
			exseq_t_MODE2_Sleep_Sleep(handle);
 8006452:	f7ff fca7 	bl	8005da4 <exseq_t_MODE2_Sleep_Sleep>
			break;
 8006456:	e7fb      	b.n	8006450 <exseq_t_MODE2_Sleep+0x16>
			exseq_t_MODE2_Sleep_Date(handle);
 8006458:	f7ff ffce 	bl	80063f8 <exseq_t_MODE2_Sleep_Date>
			break;
 800645c:	e7f8      	b.n	8006450 <exseq_t_MODE2_Sleep+0x16>
			exseq_t_MODE2_Sleep_Temperature(handle);
 800645e:	f7ff ffd8 	bl	8006412 <exseq_t_MODE2_Sleep_Temperature>
}
 8006462:	e7f5      	b.n	8006450 <exseq_t_MODE2_Sleep+0x16>

08006464 <exact_t_Alarm_Alarm_Alarm_OFF_>:
{
 8006464:	b508      	push	{r3, lr}
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_OFF__tev0_raised) );		
 8006466:	f100 011e 	add.w	r1, r0, #30
 800646a:	f7ff fa8d 	bl	8005988 <nixie_unsetTimer>
}
 800646e:	bd08      	pop	{r3, pc}

08006470 <exseq_t_Alarm_Alarm_Alarm_OFF_>:
{
 8006470:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 8006472:	2200      	movs	r2, #0
 8006474:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8006476:	6042      	str	r2, [r0, #4]
	exact_t_Alarm_Alarm_Alarm_OFF_(handle);
 8006478:	f7ff fff4 	bl	8006464 <exact_t_Alarm_Alarm_Alarm_OFF_>
}
 800647c:	bd08      	pop	{r3, pc}

0800647e <exact_t_Alarm_Alarm_Alarm_ON_>:
{
 800647e:	b508      	push	{r3, lr}
	nixie_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_ON__tev0_raised) );		
 8006480:	f100 011d 	add.w	r1, r0, #29
 8006484:	f7ff fa80 	bl	8005988 <nixie_unsetTimer>
}
 8006488:	bd08      	pop	{r3, pc}

0800648a <exseq_t_Alarm_Alarm_Alarm_ON_>:
{
 800648a:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Nixie_last_state;
 800648c:	2200      	movs	r2, #0
 800648e:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
 8006490:	6042      	str	r2, [r0, #4]
	exact_t_Alarm_Alarm_Alarm_ON_(handle);
 8006492:	f7ff fff4 	bl	800647e <exact_t_Alarm_Alarm_Alarm_ON_>
}
 8006496:	bd08      	pop	{r3, pc}

08006498 <exseq_t_Alarm_Alarm>:
{
 8006498:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 0 ])
 800649a:	7803      	ldrb	r3, [r0, #0]
 800649c:	2b16      	cmp	r3, #22
 800649e:	d002      	beq.n	80064a6 <exseq_t_Alarm_Alarm+0xe>
 80064a0:	2b17      	cmp	r3, #23
 80064a2:	d003      	beq.n	80064ac <exseq_t_Alarm_Alarm+0x14>
}
 80064a4:	bd08      	pop	{r3, pc}
			exseq_t_Alarm_Alarm_Alarm_ON_(handle);
 80064a6:	f7ff fff0 	bl	800648a <exseq_t_Alarm_Alarm_Alarm_ON_>
			break;
 80064aa:	e7fb      	b.n	80064a4 <exseq_t_Alarm_Alarm+0xc>
			exseq_t_Alarm_Alarm_Alarm_OFF_(handle);
 80064ac:	f7ff ffe0 	bl	8006470 <exseq_t_Alarm_Alarm_Alarm_OFF_>
}
 80064b0:	e7f8      	b.n	80064a4 <exseq_t_Alarm_Alarm+0xc>

080064b2 <exseq_t_Alarm>:
{
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
	exseq_t_Alarm_Alarm(handle);
 80064b6:	f7ff ffef 	bl	8006498 <exseq_t_Alarm_Alarm>
	exact_t_Alarm(handle);
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7ff ff3b 	bl	8006336 <exact_t_Alarm>
}
 80064c0:	bd10      	pop	{r4, pc}

080064c2 <enact_t_MODE2_Sleep_Sleep>:
{
 80064c2:	b510      	push	{r4, lr}
 80064c4:	4604      	mov	r4, r0
	nixieIface_ledPower(handle, NIXIE_NIXIEIFACE_OFF);
 80064c6:	2100      	movs	r1, #0
 80064c8:	f7ff f960 	bl	800578c <nixieIface_ledPower>
	nixieIface_nixiePower(handle, NIXIE_NIXIEIFACE_OFF);
 80064cc:	2100      	movs	r1, #0
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff f96a 	bl	80057a8 <nixieIface_nixiePower>
}
 80064d4:	bd10      	pop	{r4, pc}

080064d6 <enseq_t_MODE2_Sleep_Sleep_default>:
{
 80064d6:	b510      	push	{r4, lr}
 80064d8:	4604      	mov	r4, r0
	enact_t_MODE2_Sleep_Sleep(handle);
 80064da:	f7ff fff2 	bl	80064c2 <enact_t_MODE2_Sleep_Sleep>
	handle->stateConfVector[0] = Nixie_t_MODE2_Sleep_Sleep;
 80064de:	230e      	movs	r3, #14
 80064e0:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	6063      	str	r3, [r4, #4]
}
 80064e6:	bd10      	pop	{r4, pc}

080064e8 <react_t_MODE2_Sleep__entry_Default>:
{
 80064e8:	b508      	push	{r3, lr}
	enseq_t_MODE2_Sleep_Sleep_default(handle);
 80064ea:	f7ff fff4 	bl	80064d6 <enseq_t_MODE2_Sleep_Sleep_default>
}
 80064ee:	bd08      	pop	{r3, pc}

080064f0 <enseq_t_MODE2_Sleep_default>:
{
 80064f0:	b508      	push	{r3, lr}
	react_t_MODE2_Sleep__entry_Default(handle);
 80064f2:	f7ff fff9 	bl	80064e8 <react_t_MODE2_Sleep__entry_Default>
}
 80064f6:	bd08      	pop	{r3, pc}

080064f8 <enseq_t_MODE2_default>:
{
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
	enact_t_MODE2(handle);
 80064fc:	f7ff fc06 	bl	8005d0c <enact_t_MODE2>
	enseq_t_MODE2_Sleep_default(handle);
 8006500:	4620      	mov	r0, r4
 8006502:	f7ff fff5 	bl	80064f0 <enseq_t_MODE2_Sleep_default>
}
 8006506:	bd10      	pop	{r4, pc}

08006508 <t_MODE1_react>:
static sc_boolean t_MODE1_react(Nixie* handle, const sc_boolean try_transition) {
 8006508:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 800650a:	460d      	mov	r5, r1
 800650c:	b141      	cbz	r1, 8006520 <t_MODE1_react+0x18>
 800650e:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
 8006510:	f7ff fc96 	bl	8005e40 <react>
 8006514:	b920      	cbnz	r0, 8006520 <t_MODE1_react+0x18>
			if (handle->iface.E_ALARM_raised == bool_true)
 8006516:	7b23      	ldrb	r3, [r4, #12]
 8006518:	b923      	cbnz	r3, 8006524 <t_MODE1_react+0x1c>
				if (handle->iface.B_1_raised == bool_true)
 800651a:	7a63      	ldrb	r3, [r4, #9]
 800651c:	b94b      	cbnz	r3, 8006532 <t_MODE1_react+0x2a>
					did_transition = bool_false;
 800651e:	461d      	mov	r5, r3
}
 8006520:	4628      	mov	r0, r5
 8006522:	bd38      	pop	{r3, r4, r5, pc}
				exseq_t_MODE1(handle);
 8006524:	4620      	mov	r0, r4
 8006526:	f7ff ff5d 	bl	80063e4 <exseq_t_MODE1>
				enseq_t_Alarm_default(handle);
 800652a:	4620      	mov	r0, r4
 800652c:	f7ff fe91 	bl	8006252 <enseq_t_Alarm_default>
 8006530:	e7f6      	b.n	8006520 <t_MODE1_react+0x18>
					exseq_t_MODE1(handle);
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff ff56 	bl	80063e4 <exseq_t_MODE1>
					enseq_t_MODE2_default(handle);
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff ffdd 	bl	80064f8 <enseq_t_MODE2_default>
 800653e:	e7ef      	b.n	8006520 <t_MODE1_react+0x18>

08006540 <t_MODE1_Awake_Awake_react>:
static sc_boolean t_MODE1_Awake_Awake_react(Nixie* handle, const sc_boolean try_transition) {
 8006540:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 8006542:	460d      	mov	r5, r1
 8006544:	b909      	cbnz	r1, 800654a <t_MODE1_Awake_Awake_react+0xa>
}
 8006546:	4628      	mov	r0, r5
 8006548:	bd38      	pop	{r3, r4, r5, pc}
 800654a:	4604      	mov	r4, r0
		if ((t_MODE1_react(handle, try_transition)) == (bool_false))
 800654c:	f7ff ffdc 	bl	8006508 <t_MODE1_react>
 8006550:	2800      	cmp	r0, #0
 8006552:	d1f8      	bne.n	8006546 <t_MODE1_Awake_Awake_react+0x6>
			if (handle->iface.S_SENSOR_raised == bool_true)
 8006554:	7a23      	ldrb	r3, [r4, #8]
 8006556:	b92b      	cbnz	r3, 8006564 <t_MODE1_Awake_Awake_react+0x24>
				if (handle->iface.B_3_raised == bool_true)
 8006558:	7ae3      	ldrb	r3, [r4, #11]
 800655a:	b953      	cbnz	r3, 8006572 <t_MODE1_Awake_Awake_react+0x32>
					if (handle->iface.B_2_raised == bool_true)
 800655c:	7aa3      	ldrb	r3, [r4, #10]
 800655e:	b993      	cbnz	r3, 8006586 <t_MODE1_Awake_Awake_react+0x46>
						did_transition = bool_false;
 8006560:	461d      	mov	r5, r3
 8006562:	e7f0      	b.n	8006546 <t_MODE1_Awake_Awake_react+0x6>
				exseq_t_MODE1_Awake_Awake(handle);
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff fc19 	bl	8005d9c <exseq_t_MODE1_Awake_Awake>
				enseq_t_MODE1_Awake_Date_default(handle);
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff fdf6 	bl	800615c <enseq_t_MODE1_Awake_Date_default>
 8006570:	e7e9      	b.n	8006546 <t_MODE1_Awake_Awake_react+0x6>
					exseq_t_MODE1_Awake_Awake(handle);
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff fc12 	bl	8005d9c <exseq_t_MODE1_Awake_Awake>
					nixieIface_swapLedFlag(handle);
 8006578:	4620      	mov	r0, r4
 800657a:	f7ff f931 	bl	80057e0 <nixieIface_swapLedFlag>
					enseq_t_MODE1_Awake_Awake_default(handle);
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fbe0 	bl	8005d44 <enseq_t_MODE1_Awake_Awake_default>
 8006584:	e7df      	b.n	8006546 <t_MODE1_Awake_Awake_react+0x6>
						exseq_t_MODE1_Awake_Awake(handle);
 8006586:	4620      	mov	r0, r4
 8006588:	f7ff fc08 	bl	8005d9c <exseq_t_MODE1_Awake_Awake>
						nixieIface_increaseLed(handle);
 800658c:	4620      	mov	r0, r4
 800658e:	f7ff f8d3 	bl	8005738 <nixieIface_increaseLed>
						enseq_t_MODE1_Awake_Awake_default(handle);
 8006592:	4620      	mov	r0, r4
 8006594:	f7ff fbd6 	bl	8005d44 <enseq_t_MODE1_Awake_Awake_default>
 8006598:	e7d5      	b.n	8006546 <t_MODE1_Awake_Awake_react+0x6>

0800659a <t_MODE1_Awake_Date_react>:
static sc_boolean t_MODE1_Awake_Date_react(Nixie* handle, const sc_boolean try_transition) {
 800659a:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 800659c:	460d      	mov	r5, r1
 800659e:	b909      	cbnz	r1, 80065a4 <t_MODE1_Awake_Date_react+0xa>
}
 80065a0:	4628      	mov	r0, r5
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	4604      	mov	r4, r0
		if ((t_MODE1_react(handle, try_transition)) == (bool_false))
 80065a6:	f7ff ffaf 	bl	8006508 <t_MODE1_react>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d1f8      	bne.n	80065a0 <t_MODE1_Awake_Date_react+0x6>
			if (handle->timeEvents.nixie_t_MODE1_Awake_Date_tev0_raised == bool_true)
 80065ae:	7e23      	ldrb	r3, [r4, #24]
 80065b0:	b90b      	cbnz	r3, 80065b6 <t_MODE1_Awake_Date_react+0x1c>
				did_transition = bool_false;
 80065b2:	461d      	mov	r5, r3
 80065b4:	e7f4      	b.n	80065a0 <t_MODE1_Awake_Date_react+0x6>
				exseq_t_MODE1_Awake_Date(handle);
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fee5 	bl	8006386 <exseq_t_MODE1_Awake_Date>
				enseq_t_MODE1_Awake_Temperature_default(handle);
 80065bc:	4620      	mov	r0, r4
 80065be:	f7ff fde8 	bl	8006192 <enseq_t_MODE1_Awake_Temperature_default>
 80065c2:	e7ed      	b.n	80065a0 <t_MODE1_Awake_Date_react+0x6>

080065c4 <t_MODE1_Awake_Temperature_react>:
static sc_boolean t_MODE1_Awake_Temperature_react(Nixie* handle, const sc_boolean try_transition) {
 80065c4:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 80065c6:	460d      	mov	r5, r1
 80065c8:	b909      	cbnz	r1, 80065ce <t_MODE1_Awake_Temperature_react+0xa>
}
 80065ca:	4628      	mov	r0, r5
 80065cc:	bd38      	pop	{r3, r4, r5, pc}
 80065ce:	4604      	mov	r4, r0
		if ((t_MODE1_react(handle, try_transition)) == (bool_false))
 80065d0:	f7ff ff9a 	bl	8006508 <t_MODE1_react>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d1f8      	bne.n	80065ca <t_MODE1_Awake_Temperature_react+0x6>
			if (handle->timeEvents.nixie_t_MODE1_Awake_Temperature_tev0_raised == bool_true)
 80065d8:	7e63      	ldrb	r3, [r4, #25]
 80065da:	b90b      	cbnz	r3, 80065e0 <t_MODE1_Awake_Temperature_react+0x1c>
				did_transition = bool_false;
 80065dc:	461d      	mov	r5, r3
 80065de:	e7f4      	b.n	80065ca <t_MODE1_Awake_Temperature_react+0x6>
				exseq_t_MODE1_Awake_Temperature(handle);
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff fee6 	bl	80063b2 <exseq_t_MODE1_Awake_Temperature>
				enseq_t_MODE1_Awake_Awake_default(handle);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff fbac 	bl	8005d44 <enseq_t_MODE1_Awake_Awake_default>
 80065ec:	e7ed      	b.n	80065ca <t_MODE1_Awake_Temperature_react+0x6>

080065ee <effect_t__choice_0_tr0>:
{
 80065ee:	b508      	push	{r3, lr}
	enseq_t_MODE2_default(handle);
 80065f0:	f7ff ff82 	bl	80064f8 <enseq_t_MODE2_default>
}
 80065f4:	bd08      	pop	{r3, pc}

080065f6 <react_t__choice_0>:
{
 80065f6:	b510      	push	{r4, lr}
 80065f8:	4604      	mov	r4, r0
	if (check_t__choice_0_tr0_tr0(handle) == bool_true)
 80065fa:	f7ff fb7b 	bl	8005cf4 <check_t__choice_0_tr0_tr0>
 80065fe:	b938      	cbnz	r0, 8006610 <react_t__choice_0+0x1a>
		if (check_t__choice_0_tr2_tr2(handle) == bool_true)
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff fb7d 	bl	8005d00 <check_t__choice_0_tr2_tr2>
 8006606:	b138      	cbz	r0, 8006618 <react_t__choice_0+0x22>
			effect_t__choice_0_tr2(handle);
 8006608:	4620      	mov	r0, r4
 800660a:	f7ff fcc1 	bl	8005f90 <effect_t__choice_0_tr2>
}
 800660e:	bd10      	pop	{r4, pc}
		effect_t__choice_0_tr0(handle);
 8006610:	4620      	mov	r0, r4
 8006612:	f7ff ffec 	bl	80065ee <effect_t__choice_0_tr0>
 8006616:	e7fa      	b.n	800660e <react_t__choice_0+0x18>
			effect_t__choice_0_tr1(handle);
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff fc9d 	bl	8005f58 <effect_t__choice_0_tr1>
}
 800661e:	e7f6      	b.n	800660e <react_t__choice_0+0x18>

08006620 <t_Alarm_react>:

static sc_boolean t_Alarm_react(Nixie* handle, const sc_boolean try_transition) {
 8006620:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Alarm. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8006622:	460d      	mov	r5, r1
 8006624:	b181      	cbz	r1, 8006648 <t_Alarm_react+0x28>
 8006626:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
 8006628:	f7ff fc0a 	bl	8005e40 <react>
 800662c:	b960      	cbnz	r0, 8006648 <t_Alarm_react+0x28>
		{ 
			if ((handle->iface.S_SENSOR_raised == bool_true) || (((handle->internal.count) == (NIXIE_NIXIEIFACE_COUNTMAX)) == bool_true))
 800662e:	7a23      	ldrb	r3, [r4, #8]
 8006630:	b923      	cbnz	r3, 800663c <t_Alarm_react+0x1c>
 8006632:	6922      	ldr	r2, [r4, #16]
 8006634:	2a03      	cmp	r2, #3
 8006636:	d001      	beq.n	800663c <t_Alarm_react+0x1c>
			{ 
				exseq_t_Alarm(handle);
				react_t__choice_0(handle);
			}  else
			{
				did_transition = bool_false;
 8006638:	461d      	mov	r5, r3
 800663a:	e005      	b.n	8006648 <t_Alarm_react+0x28>
				exseq_t_Alarm(handle);
 800663c:	4620      	mov	r0, r4
 800663e:	f7ff ff38 	bl	80064b2 <exseq_t_Alarm>
				react_t__choice_0(handle);
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff ffd7 	bl	80065f6 <react_t__choice_0>
			}
		} 
	} 
	return did_transition;
}
 8006648:	4628      	mov	r0, r5
 800664a:	bd38      	pop	{r3, r4, r5, pc}

0800664c <t_Alarm_Alarm_Alarm_ON__react>:

static sc_boolean t_Alarm_Alarm_Alarm_ON__react(Nixie* handle, const sc_boolean try_transition) {
 800664c:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Alarm[ON]. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 800664e:	460d      	mov	r5, r1
 8006650:	b909      	cbnz	r1, 8006656 <t_Alarm_Alarm_Alarm_ON__react+0xa>
				did_transition = bool_false;
			}
		} 
	} 
	return did_transition;
}
 8006652:	4628      	mov	r0, r5
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	4604      	mov	r4, r0
		if ((t_Alarm_react(handle, try_transition)) == (bool_false))
 8006658:	f7ff ffe2 	bl	8006620 <t_Alarm_react>
 800665c:	2800      	cmp	r0, #0
 800665e:	d1f8      	bne.n	8006652 <t_Alarm_Alarm_Alarm_ON__react+0x6>
			if (handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_ON__tev0_raised == bool_true)
 8006660:	7f63      	ldrb	r3, [r4, #29]
 8006662:	b90b      	cbnz	r3, 8006668 <t_Alarm_Alarm_Alarm_ON__react+0x1c>
				did_transition = bool_false;
 8006664:	461d      	mov	r5, r3
 8006666:	e7f4      	b.n	8006652 <t_Alarm_Alarm_Alarm_ON__react+0x6>
				exseq_t_Alarm_Alarm_Alarm_ON_(handle);
 8006668:	4620      	mov	r0, r4
 800666a:	f7ff ff0e 	bl	800648a <exseq_t_Alarm_Alarm_Alarm_ON_>
				enseq_t_Alarm_Alarm_Alarm_OFF__default(handle);
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff fe7a 	bl	8006368 <enseq_t_Alarm_Alarm_Alarm_OFF__default>
 8006674:	e7ed      	b.n	8006652 <t_Alarm_Alarm_Alarm_ON__react+0x6>

08006676 <t_Alarm_Alarm_Alarm_OFF__react>:

static sc_boolean t_Alarm_Alarm_Alarm_OFF__react(Nixie* handle, const sc_boolean try_transition) {
 8006676:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Alarm[OFF]. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
 8006678:	460d      	mov	r5, r1
 800667a:	b909      	cbnz	r1, 8006680 <t_Alarm_Alarm_Alarm_OFF__react+0xa>
				did_transition = bool_false;
			}
		} 
	} 
	return did_transition;
}
 800667c:	4628      	mov	r0, r5
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	4604      	mov	r4, r0
		if ((t_Alarm_react(handle, try_transition)) == (bool_false))
 8006682:	f7ff ffcd 	bl	8006620 <t_Alarm_react>
 8006686:	2800      	cmp	r0, #0
 8006688:	d1f8      	bne.n	800667c <t_Alarm_Alarm_Alarm_OFF__react+0x6>
			if (handle->timeEvents.nixie_t_Alarm_Alarm_Alarm_OFF__tev0_raised == bool_true)
 800668a:	7fa3      	ldrb	r3, [r4, #30]
 800668c:	b90b      	cbnz	r3, 8006692 <t_Alarm_Alarm_Alarm_OFF__react+0x1c>
				did_transition = bool_false;
 800668e:	461d      	mov	r5, r3
 8006690:	e7f4      	b.n	800667c <t_Alarm_Alarm_Alarm_OFF__react+0x6>
				exseq_t_Alarm_Alarm_Alarm_OFF_(handle);
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff feec 	bl	8006470 <exseq_t_Alarm_Alarm_Alarm_OFF_>
				enseq_t_Alarm_Alarm_Alarm_ON__default(handle);
 8006698:	4620      	mov	r0, r4
 800669a:	f7ff fdc9 	bl	8006230 <enseq_t_Alarm_Alarm_Alarm_ON__default>
 800669e:	e7ed      	b.n	800667c <t_Alarm_Alarm_Alarm_OFF__react+0x6>

080066a0 <exact_t_MODE2>:
{
 80066a0:	b508      	push	{r3, lr}
	nixieIface_ledPower(handle, NIXIE_NIXIEIFACE_ON);
 80066a2:	2101      	movs	r1, #1
 80066a4:	f7ff f872 	bl	800578c <nixieIface_ledPower>
}
 80066a8:	bd08      	pop	{r3, pc}

080066aa <exseq_t_MODE2>:
{
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
	exseq_t_MODE2_Sleep(handle);
 80066ae:	f7ff fec4 	bl	800643a <exseq_t_MODE2_Sleep>
	exact_t_MODE2(handle);
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff fff4 	bl	80066a0 <exact_t_MODE2>
}
 80066b8:	bd10      	pop	{r4, pc}

080066ba <t_MODE2_react>:
static sc_boolean t_MODE2_react(Nixie* handle, const sc_boolean try_transition) {
 80066ba:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 80066bc:	460d      	mov	r5, r1
 80066be:	b141      	cbz	r1, 80066d2 <t_MODE2_react+0x18>
 80066c0:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
 80066c2:	f7ff fbbd 	bl	8005e40 <react>
 80066c6:	b920      	cbnz	r0, 80066d2 <t_MODE2_react+0x18>
			if (handle->iface.E_ALARM_raised == bool_true)
 80066c8:	7b23      	ldrb	r3, [r4, #12]
 80066ca:	b923      	cbnz	r3, 80066d6 <t_MODE2_react+0x1c>
				if (handle->iface.B_1_raised == bool_true)
 80066cc:	7a63      	ldrb	r3, [r4, #9]
 80066ce:	b94b      	cbnz	r3, 80066e4 <t_MODE2_react+0x2a>
					did_transition = bool_false;
 80066d0:	461d      	mov	r5, r3
}
 80066d2:	4628      	mov	r0, r5
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
				exseq_t_MODE2(handle);
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff ffe7 	bl	80066aa <exseq_t_MODE2>
				enseq_t_Alarm_default(handle);
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff fdb8 	bl	8006252 <enseq_t_Alarm_default>
 80066e2:	e7f6      	b.n	80066d2 <t_MODE2_react+0x18>
					exseq_t_MODE2(handle);
 80066e4:	4620      	mov	r0, r4
 80066e6:	f7ff ffe0 	bl	80066aa <exseq_t_MODE2>
					enseq_t_MODE3_default(handle);
 80066ea:	4620      	mov	r0, r4
 80066ec:	f7ff fc48 	bl	8005f80 <enseq_t_MODE3_default>
 80066f0:	e7ef      	b.n	80066d2 <t_MODE2_react+0x18>

080066f2 <t_MODE2_Sleep_Wake_Up_react>:
static sc_boolean t_MODE2_Sleep_Wake_Up_react(Nixie* handle, const sc_boolean try_transition) {
 80066f2:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 80066f4:	460d      	mov	r5, r1
 80066f6:	b909      	cbnz	r1, 80066fc <t_MODE2_Sleep_Wake_Up_react+0xa>
}
 80066f8:	4628      	mov	r0, r5
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	4604      	mov	r4, r0
		if ((t_MODE2_react(handle, try_transition)) == (bool_false))
 80066fe:	f7ff ffdc 	bl	80066ba <t_MODE2_react>
 8006702:	2800      	cmp	r0, #0
 8006704:	d1f8      	bne.n	80066f8 <t_MODE2_Sleep_Wake_Up_react+0x6>
			if (handle->iface.S_SENSOR_raised == bool_true)
 8006706:	7a23      	ldrb	r3, [r4, #8]
 8006708:	b91b      	cbnz	r3, 8006712 <t_MODE2_Sleep_Wake_Up_react+0x20>
				if (handle->timeEvents.nixie_t_MODE2_Sleep_Wake_Up_tev0_raised == bool_true)
 800670a:	7ea3      	ldrb	r3, [r4, #26]
 800670c:	b943      	cbnz	r3, 8006720 <t_MODE2_Sleep_Wake_Up_react+0x2e>
					did_transition = bool_false;
 800670e:	461d      	mov	r5, r3
 8006710:	e7f2      	b.n	80066f8 <t_MODE2_Sleep_Wake_Up_react+0x6>
				exseq_t_MODE2_Sleep_Wake_Up(handle);
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fe8a 	bl	800642c <exseq_t_MODE2_Sleep_Wake_Up>
				enseq_t_MODE2_Sleep_Date_default(handle);
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff fd55 	bl	80061c8 <enseq_t_MODE2_Sleep_Date_default>
 800671e:	e7eb      	b.n	80066f8 <t_MODE2_Sleep_Wake_Up_react+0x6>
					exseq_t_MODE2_Sleep_Wake_Up(handle);
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff fe83 	bl	800642c <exseq_t_MODE2_Sleep_Wake_Up>
					enseq_t_MODE2_Sleep_Sleep_default(handle);
 8006726:	4620      	mov	r0, r4
 8006728:	f7ff fed5 	bl	80064d6 <enseq_t_MODE2_Sleep_Sleep_default>
 800672c:	e7e4      	b.n	80066f8 <t_MODE2_Sleep_Wake_Up_react+0x6>

0800672e <t_MODE2_Sleep_Date_react>:
static sc_boolean t_MODE2_Sleep_Date_react(Nixie* handle, const sc_boolean try_transition) {
 800672e:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 8006730:	460d      	mov	r5, r1
 8006732:	b909      	cbnz	r1, 8006738 <t_MODE2_Sleep_Date_react+0xa>
}
 8006734:	4628      	mov	r0, r5
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	4604      	mov	r4, r0
		if ((t_MODE2_react(handle, try_transition)) == (bool_false))
 800673a:	f7ff ffbe 	bl	80066ba <t_MODE2_react>
 800673e:	2800      	cmp	r0, #0
 8006740:	d1f8      	bne.n	8006734 <t_MODE2_Sleep_Date_react+0x6>
			if (handle->timeEvents.nixie_t_MODE2_Sleep_Date_tev0_raised == bool_true)
 8006742:	7ee3      	ldrb	r3, [r4, #27]
 8006744:	b90b      	cbnz	r3, 800674a <t_MODE2_Sleep_Date_react+0x1c>
				did_transition = bool_false;
 8006746:	461d      	mov	r5, r3
 8006748:	e7f4      	b.n	8006734 <t_MODE2_Sleep_Date_react+0x6>
				exseq_t_MODE2_Sleep_Date(handle);
 800674a:	4620      	mov	r0, r4
 800674c:	f7ff fe54 	bl	80063f8 <exseq_t_MODE2_Sleep_Date>
				enseq_t_MODE2_Sleep_Temperature_default(handle);
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff fd54 	bl	80061fe <enseq_t_MODE2_Sleep_Temperature_default>
 8006756:	e7ed      	b.n	8006734 <t_MODE2_Sleep_Date_react+0x6>

08006758 <enact_t_MODE2_Sleep_Wake_Up>:
{
 8006758:	b510      	push	{r4, lr}
 800675a:	4604      	mov	r4, r0
	nixie_setTimer(handle, (sc_eventid) &(handle->timeEvents.nixie_t_MODE2_Sleep_Wake_Up_tev0_raised) , (60 * 1000), bool_false);
 800675c:	2300      	movs	r3, #0
 800675e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006762:	f100 011a 	add.w	r1, r0, #26
 8006766:	f7ff f8b1 	bl	80058cc <nixie_setTimer>
	nixieIface_show(handle, NIXIE_NIXIEIFACE_TIME);
 800676a:	2100      	movs	r1, #0
 800676c:	4620      	mov	r0, r4
 800676e:	f7fe ffdd 	bl	800572c <nixieIface_show>
	nixieIface_ledPower(handle, NIXIE_NIXIEIFACE_ON);
 8006772:	2101      	movs	r1, #1
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff f809 	bl	800578c <nixieIface_ledPower>
	nixieIface_nixiePower(handle, NIXIE_NIXIEIFACE_ON);
 800677a:	2101      	movs	r1, #1
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff f813 	bl	80057a8 <nixieIface_nixiePower>
	nixieIface_showLed(handle, NIXIE_NIXIEIFACE_TIME);
 8006782:	2100      	movs	r1, #0
 8006784:	4620      	mov	r0, r4
 8006786:	f7fe fffb 	bl	8005780 <nixieIface_showLed>
}
 800678a:	bd10      	pop	{r4, pc}

0800678c <enseq_t_MODE2_Sleep_Wake_Up_default>:
{
 800678c:	b510      	push	{r4, lr}
 800678e:	4604      	mov	r4, r0
	enact_t_MODE2_Sleep_Wake_Up(handle);
 8006790:	f7ff ffe2 	bl	8006758 <enact_t_MODE2_Sleep_Wake_Up>
	handle->stateConfVector[0] = Nixie_t_MODE2_Sleep_Wake_Up;
 8006794:	230d      	movs	r3, #13
 8006796:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	6063      	str	r3, [r4, #4]
}
 800679c:	bd10      	pop	{r4, pc}

0800679e <t_MODE2_Sleep_Sleep_react>:
static sc_boolean t_MODE2_Sleep_Sleep_react(Nixie* handle, const sc_boolean try_transition) {
 800679e:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 80067a0:	460d      	mov	r5, r1
 80067a2:	b909      	cbnz	r1, 80067a8 <t_MODE2_Sleep_Sleep_react+0xa>
}
 80067a4:	4628      	mov	r0, r5
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	4604      	mov	r4, r0
		if ((t_MODE2_react(handle, try_transition)) == (bool_false))
 80067aa:	f7ff ff86 	bl	80066ba <t_MODE2_react>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1f8      	bne.n	80067a4 <t_MODE2_Sleep_Sleep_react+0x6>
			if (handle->iface.S_SENSOR_raised == bool_true)
 80067b2:	7a23      	ldrb	r3, [r4, #8]
 80067b4:	b90b      	cbnz	r3, 80067ba <t_MODE2_Sleep_Sleep_react+0x1c>
				did_transition = bool_false;
 80067b6:	461d      	mov	r5, r3
 80067b8:	e7f4      	b.n	80067a4 <t_MODE2_Sleep_Sleep_react+0x6>
				exseq_t_MODE2_Sleep_Sleep(handle);
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff faf2 	bl	8005da4 <exseq_t_MODE2_Sleep_Sleep>
				enseq_t_MODE2_Sleep_Wake_Up_default(handle);
 80067c0:	4620      	mov	r0, r4
 80067c2:	f7ff ffe3 	bl	800678c <enseq_t_MODE2_Sleep_Wake_Up_default>
 80067c6:	e7ed      	b.n	80067a4 <t_MODE2_Sleep_Sleep_react+0x6>

080067c8 <t_MODE2_Sleep_Temperature_react>:
static sc_boolean t_MODE2_Sleep_Temperature_react(Nixie* handle, const sc_boolean try_transition) {
 80067c8:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 80067ca:	460d      	mov	r5, r1
 80067cc:	b909      	cbnz	r1, 80067d2 <t_MODE2_Sleep_Temperature_react+0xa>
}
 80067ce:	4628      	mov	r0, r5
 80067d0:	bd38      	pop	{r3, r4, r5, pc}
 80067d2:	4604      	mov	r4, r0
		if ((t_MODE2_react(handle, try_transition)) == (bool_false))
 80067d4:	f7ff ff71 	bl	80066ba <t_MODE2_react>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d1f8      	bne.n	80067ce <t_MODE2_Sleep_Temperature_react+0x6>
			if (handle->timeEvents.nixie_t_MODE2_Sleep_Temperature_tev0_raised == bool_true)
 80067dc:	7f23      	ldrb	r3, [r4, #28]
 80067de:	b90b      	cbnz	r3, 80067e4 <t_MODE2_Sleep_Temperature_react+0x1c>
				did_transition = bool_false;
 80067e0:	461d      	mov	r5, r3
 80067e2:	e7f4      	b.n	80067ce <t_MODE2_Sleep_Temperature_react+0x6>
				exseq_t_MODE2_Sleep_Temperature(handle);
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff fe14 	bl	8006412 <exseq_t_MODE2_Sleep_Temperature>
				enseq_t_MODE2_Sleep_Wake_Up_default(handle);
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff ffce 	bl	800678c <enseq_t_MODE2_Sleep_Wake_Up_default>
 80067f0:	e7ed      	b.n	80067ce <t_MODE2_Sleep_Temperature_react+0x6>

080067f2 <t_MODE3_Alarm_AlarmConfig_react>:
static sc_boolean t_MODE3_Alarm_AlarmConfig_react(Nixie* handle, const sc_boolean try_transition) {
 80067f2:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
 80067f4:	460d      	mov	r5, r1
 80067f6:	b909      	cbnz	r1, 80067fc <t_MODE3_Alarm_AlarmConfig_react+0xa>
}
 80067f8:	4628      	mov	r0, r5
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	4604      	mov	r4, r0
		if ((t_MODE3_react(handle, try_transition)) == (bool_false))
 80067fe:	f7ff fd30 	bl	8006262 <t_MODE3_react>
 8006802:	2800      	cmp	r0, #0
 8006804:	d1f8      	bne.n	80067f8 <t_MODE3_Alarm_AlarmConfig_react+0x6>
			if (handle->iface.B_3_raised == bool_true)
 8006806:	7ae3      	ldrb	r3, [r4, #11]
 8006808:	b91b      	cbnz	r3, 8006812 <t_MODE3_Alarm_AlarmConfig_react+0x20>
				if (handle->iface.B_2_raised == bool_true)
 800680a:	7aa3      	ldrb	r3, [r4, #10]
 800680c:	b963      	cbnz	r3, 8006828 <t_MODE3_Alarm_AlarmConfig_react+0x36>
					did_transition = bool_false;
 800680e:	461d      	mov	r5, r3
 8006810:	e7f2      	b.n	80067f8 <t_MODE3_Alarm_AlarmConfig_react+0x6>
				exseq_t_MODE3_Alarm_AlarmConfig(handle);
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff faca 	bl	8005dac <exseq_t_MODE3_Alarm_AlarmConfig>
				nixieIface_show(handle, NIXIE_NIXIEIFACE_B_ALARM);
 8006818:	2106      	movs	r1, #6
 800681a:	4620      	mov	r0, r4
 800681c:	f7fe ff86 	bl	800572c <nixieIface_show>
				enseq_t_MODE3_Alarm_Hour_default(handle);
 8006820:	4620      	mov	r0, r4
 8006822:	f7ff fa99 	bl	8005d58 <enseq_t_MODE3_Alarm_Hour_default>
 8006826:	e7e7      	b.n	80067f8 <t_MODE3_Alarm_AlarmConfig_react+0x6>
					exseq_t_MODE3_Alarm_AlarmConfig(handle);
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff fabf 	bl	8005dac <exseq_t_MODE3_Alarm_AlarmConfig>
					nixieIface_swapAlarm(handle);
 800682e:	4620      	mov	r0, r4
 8006830:	f7fe ffc6 	bl	80057c0 <nixieIface_swapAlarm>
					enseq_t_MODE3_Alarm_AlarmConfig_default(handle);
 8006834:	4620      	mov	r0, r4
 8006836:	f7ff fa8a 	bl	8005d4e <enseq_t_MODE3_Alarm_AlarmConfig_default>
 800683a:	e7dd      	b.n	80067f8 <t_MODE3_Alarm_AlarmConfig_react+0x6>

0800683c <nixie_init>:
{
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4604      	mov	r4, r0
	for (i = 0; i < NIXIE_MAX_ORTHOGONAL_STATES; ++i)
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd07      	ble.n	8006856 <nixie_init+0x1a>
	handle->stateConfVectorPosition = 0;
 8006846:	2500      	movs	r5, #0
 8006848:	6065      	str	r5, [r4, #4]
	clearInEvents(handle);
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff fa44 	bl	8005cd8 <clearInEvents>
	handle->internal.count = 0;
 8006850:	6125      	str	r5, [r4, #16]
	handle->internal.MODE = 0;
 8006852:	6165      	str	r5, [r4, #20]
}
 8006854:	bd38      	pop	{r3, r4, r5, pc}
		handle->stateConfVector[i] = Nixie_last_state;
 8006856:	2200      	movs	r2, #0
 8006858:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < NIXIE_MAX_ORTHOGONAL_STATES; ++i)
 800685a:	3301      	adds	r3, #1
 800685c:	e7f1      	b.n	8006842 <nixie_init+0x6>

0800685e <nixie_enter>:
{
 800685e:	b508      	push	{r3, lr}
	enseq_t_default(handle);
 8006860:	f7ff fb1b 	bl	8005e9a <enseq_t_default>
}
 8006864:	bd08      	pop	{r3, pc}
	...

08006868 <nixie_runCycle>:
{
 8006868:	b510      	push	{r4, lr}
 800686a:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	6043      	str	r3, [r0, #4]
 8006870:	e006      	b.n	8006880 <nixie_runCycle+0x18>
			t_START_Configuration_Config_react(handle, bool_true);
 8006872:	2101      	movs	r1, #1
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff fb56 	bl	8005f26 <t_START_Configuration_Config_react>
		handle->stateConfVectorPosition++)
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	3301      	adds	r3, #1
 800687e:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < NIXIE_MAX_ORTHOGONAL_STATES;
 8006880:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
 8006882:	2b00      	cmp	r3, #0
 8006884:	f040 8089 	bne.w	800699a <nixie_runCycle+0x132>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
 8006888:	5ce3      	ldrb	r3, [r4, r3]
 800688a:	3b02      	subs	r3, #2
 800688c:	2b15      	cmp	r3, #21
 800688e:	d8f4      	bhi.n	800687a <nixie_runCycle+0x12>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <nixie_runCycle+0x30>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	08006873 	.word	0x08006873
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	080068fb 	.word	0x080068fb
 80068a4:	08006905 	.word	0x08006905
 80068a8:	0800690f 	.word	0x0800690f
 80068ac:	08006919 	.word	0x08006919
 80068b0:	0800687b 	.word	0x0800687b
 80068b4:	08006923 	.word	0x08006923
 80068b8:	0800692d 	.word	0x0800692d
 80068bc:	08006937 	.word	0x08006937
 80068c0:	0800687b 	.word	0x0800687b
 80068c4:	08006941 	.word	0x08006941
 80068c8:	0800694b 	.word	0x0800694b
 80068cc:	08006955 	.word	0x08006955
 80068d0:	0800695f 	.word	0x0800695f
 80068d4:	0800687b 	.word	0x0800687b
 80068d8:	08006969 	.word	0x08006969
 80068dc:	08006973 	.word	0x08006973
 80068e0:	0800697d 	.word	0x0800697d
 80068e4:	0800687b 	.word	0x0800687b
 80068e8:	08006987 	.word	0x08006987
 80068ec:	08006991 	.word	0x08006991
			t_START_Configuration_Hour_react(handle, bool_true);
 80068f0:	2101      	movs	r1, #1
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7ff fb50 	bl	8005f98 <t_START_Configuration_Hour_react>
			break;
 80068f8:	e7bf      	b.n	800687a <nixie_runCycle+0x12>
			t_START_Configuration_Minutes_react(handle, bool_true);
 80068fa:	2101      	movs	r1, #1
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7ff fbb4 	bl	800606a <t_START_Configuration_Minutes_react>
			break;
 8006902:	e7ba      	b.n	800687a <nixie_runCycle+0x12>
			t_START_Configuration_Year_react(handle, bool_true);
 8006904:	2101      	movs	r1, #1
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff fb69 	bl	8005fde <t_START_Configuration_Year_react>
			break;
 800690c:	e7b5      	b.n	800687a <nixie_runCycle+0x12>
			t_START_Configuration_Month_react(handle, bool_true);
 800690e:	2101      	movs	r1, #1
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff fb87 	bl	8006024 <t_START_Configuration_Month_react>
			break;
 8006916:	e7b0      	b.n	800687a <nixie_runCycle+0x12>
			t_START_Configuration_Day_react(handle, bool_true);
 8006918:	2101      	movs	r1, #1
 800691a:	4620      	mov	r0, r4
 800691c:	f7ff fbd4 	bl	80060c8 <t_START_Configuration_Day_react>
			break;
 8006920:	e7ab      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE1_Awake_Awake_react(handle, bool_true);
 8006922:	2101      	movs	r1, #1
 8006924:	4620      	mov	r0, r4
 8006926:	f7ff fe0b 	bl	8006540 <t_MODE1_Awake_Awake_react>
			break;
 800692a:	e7a6      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE1_Awake_Date_react(handle, bool_true);
 800692c:	2101      	movs	r1, #1
 800692e:	4620      	mov	r0, r4
 8006930:	f7ff fe33 	bl	800659a <t_MODE1_Awake_Date_react>
			break;
 8006934:	e7a1      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE1_Awake_Temperature_react(handle, bool_true);
 8006936:	2101      	movs	r1, #1
 8006938:	4620      	mov	r0, r4
 800693a:	f7ff fe43 	bl	80065c4 <t_MODE1_Awake_Temperature_react>
			break;
 800693e:	e79c      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE2_Sleep_Wake_Up_react(handle, bool_true);
 8006940:	2101      	movs	r1, #1
 8006942:	4620      	mov	r0, r4
 8006944:	f7ff fed5 	bl	80066f2 <t_MODE2_Sleep_Wake_Up_react>
			break;
 8006948:	e797      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE2_Sleep_Sleep_react(handle, bool_true);
 800694a:	2101      	movs	r1, #1
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff ff26 	bl	800679e <t_MODE2_Sleep_Sleep_react>
			break;
 8006952:	e792      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE2_Sleep_Date_react(handle, bool_true);
 8006954:	2101      	movs	r1, #1
 8006956:	4620      	mov	r0, r4
 8006958:	f7ff fee9 	bl	800672e <t_MODE2_Sleep_Date_react>
			break;
 800695c:	e78d      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE2_Sleep_Temperature_react(handle, bool_true);
 800695e:	2101      	movs	r1, #1
 8006960:	4620      	mov	r0, r4
 8006962:	f7ff ff31 	bl	80067c8 <t_MODE2_Sleep_Temperature_react>
			break;
 8006966:	e788      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE3_Alarm_AlarmConfig_react(handle, bool_true);
 8006968:	2101      	movs	r1, #1
 800696a:	4620      	mov	r0, r4
 800696c:	f7ff ff41 	bl	80067f2 <t_MODE3_Alarm_AlarmConfig_react>
			break;
 8006970:	e783      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE3_Alarm_Hour_react(handle, bool_true);
 8006972:	2101      	movs	r1, #1
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff fc90 	bl	800629a <t_MODE3_Alarm_Hour_react>
			break;
 800697a:	e77e      	b.n	800687a <nixie_runCycle+0x12>
			t_MODE3_Alarm_Minute_react(handle, bool_true);
 800697c:	2101      	movs	r1, #1
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fcae 	bl	80062e0 <t_MODE3_Alarm_Minute_react>
			break;
 8006984:	e779      	b.n	800687a <nixie_runCycle+0x12>
			t_Alarm_Alarm_Alarm_ON__react(handle, bool_true);
 8006986:	2101      	movs	r1, #1
 8006988:	4620      	mov	r0, r4
 800698a:	f7ff fe5f 	bl	800664c <t_Alarm_Alarm_Alarm_ON__react>
			break;
 800698e:	e774      	b.n	800687a <nixie_runCycle+0x12>
			t_Alarm_Alarm_Alarm_OFF__react(handle, bool_true);
 8006990:	2101      	movs	r1, #1
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fe6f 	bl	8006676 <t_Alarm_Alarm_Alarm_OFF__react>
			break;
 8006998:	e76f      	b.n	800687a <nixie_runCycle+0x12>
	clearInEvents(handle);
 800699a:	4620      	mov	r0, r4
 800699c:	f7ff f99c 	bl	8005cd8 <clearInEvents>
}
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	bf00      	nop

080069a4 <nixie_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
 80069a4:	3018      	adds	r0, #24
 80069a6:	4288      	cmp	r0, r1
 80069a8:	dc04      	bgt.n	80069b4 <nixie_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(NixieTimeEvents))
 80069aa:	3007      	adds	r0, #7
 80069ac:	4288      	cmp	r0, r1
 80069ae:	d901      	bls.n	80069b4 <nixie_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
 80069b0:	2301      	movs	r3, #1
 80069b2:	700b      	strb	r3, [r1, #0]
}
 80069b4:	4770      	bx	lr

080069b6 <nixieIface_raise_s_SENSOR>:
	handle->iface.S_SENSOR_raised = bool_true;
 80069b6:	2301      	movs	r3, #1
 80069b8:	7203      	strb	r3, [r0, #8]
}
 80069ba:	4770      	bx	lr

080069bc <nixieIface_raise_b_1>:
	handle->iface.B_1_raised = bool_true;
 80069bc:	2301      	movs	r3, #1
 80069be:	7243      	strb	r3, [r0, #9]
}
 80069c0:	4770      	bx	lr

080069c2 <nixieIface_raise_b_2>:
	handle->iface.B_2_raised = bool_true;
 80069c2:	2301      	movs	r3, #1
 80069c4:	7283      	strb	r3, [r0, #10]
}
 80069c6:	4770      	bx	lr

080069c8 <nixieIface_raise_b_3>:
	handle->iface.B_3_raised = bool_true;
 80069c8:	2301      	movs	r3, #1
 80069ca:	72c3      	strb	r3, [r0, #11]
}
 80069cc:	4770      	bx	lr

080069ce <nixieIface_raise_e_ALARM>:
	handle->iface.E_ALARM_raised = bool_true;
 80069ce:	2301      	movs	r3, #1
 80069d0:	7303      	strb	r3, [r0, #12]
}
 80069d2:	4770      	bx	lr

080069d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80069d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80069d6:	e003      	b.n	80069e0 <LoopCopyDataInit>

080069d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80069da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80069dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80069de:	3104      	adds	r1, #4

080069e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80069e0:	480a      	ldr	r0, [pc, #40]	; (8006a0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80069e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80069e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80069e8:	d3f6      	bcc.n	80069d8 <CopyDataInit>
  ldr r2, =_sbss
 80069ea:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80069ec:	e002      	b.n	80069f4 <LoopFillZerobss>

080069ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80069ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80069f0:	f842 3b04 	str.w	r3, [r2], #4

080069f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80069f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80069f8:	d3f9      	bcc.n	80069ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80069fa:	f7ff f947 	bl	8005c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069fe:	f000 f80f 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a02:	f7fe fac3 	bl	8004f8c <main>
  bx lr
 8006a06:	4770      	bx	lr
  ldr r3, =_sidata
 8006a08:	08006b54 	.word	0x08006b54
  ldr r0, =_sdata
 8006a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006a10:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8006a14:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8006a18:	20002690 	.word	0x20002690

08006a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a1c:	e7fe      	b.n	8006a1c <ADC1_2_IRQHandler>
	...

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	2600      	movs	r6, #0
 8006a24:	4d0c      	ldr	r5, [pc, #48]	; (8006a58 <__libc_init_array+0x38>)
 8006a26:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a28:	1b64      	subs	r4, r4, r5
 8006a2a:	10a4      	asrs	r4, r4, #2
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	f000 f828 	bl	8006a84 <_init>
 8006a34:	2600      	movs	r6, #0
 8006a36:	4d0a      	ldr	r5, [pc, #40]	; (8006a60 <__libc_init_array+0x40>)
 8006a38:	4c0a      	ldr	r4, [pc, #40]	; (8006a64 <__libc_init_array+0x44>)
 8006a3a:	1b64      	subs	r4, r4, r5
 8006a3c:	10a4      	asrs	r4, r4, #2
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	08006b4c 	.word	0x08006b4c
 8006a5c:	08006b4c 	.word	0x08006b4c
 8006a60:	08006b4c 	.word	0x08006b4c
 8006a64:	08006b50 	.word	0x08006b50

08006a68 <memcpy>:
 8006a68:	440a      	add	r2, r1
 8006a6a:	4291      	cmp	r1, r2
 8006a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a70:	d100      	bne.n	8006a74 <memcpy+0xc>
 8006a72:	4770      	bx	lr
 8006a74:	b510      	push	{r4, lr}
 8006a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a80:	d1f9      	bne.n	8006a76 <memcpy+0xe>
 8006a82:	bd10      	pop	{r4, pc}

08006a84 <_init>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr

08006a90 <_fini>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr
